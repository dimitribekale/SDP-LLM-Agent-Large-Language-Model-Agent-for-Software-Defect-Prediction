{"faulty_code": "a = [1,2,3]\nb = [4,5,6,7]\nc = a + b\nprint(c)", "fixed_code": "a = [1,2,3]\nb = [4,5,6,7]\nc = a + b\nprint(c)"}
{"faulty_code": "for i in range(len(data)-1):\n    print(data[i])", "fixed_code": "for i in range(len(data)):\n    if i < len(data)-1:\n        print(data[i])\n    else:\n        break"}
{"faulty_code": "for i in range(10): print(i+1)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i < len(list)-1:\n        print(list[i])\n\n# OR \n\nfor i in range(len(list)-1):\n    print(list[i])"}
{"faulty_code": "def factorial(n):\n    return factorial(n-1) + n\n\nfactorial(5)", "fixed_code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return factorial(n-1) * n\n\nprint(factorial(5))"}
{"faulty_code": "for i in range(len(lst)-1):\n    print(lst[i])", "fixed_code": "for i in range(len(lst)-1):\n    print(lst[i-1])"}
{"faulty_code": "code snippet with bug", "fixed_code": "corrected code"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": ["text = \"Hello, world!\";\\nprint(text[0:5]);", "data = {\\'name\\': \\\"John\\\", \\'age\\': 30};\\nprint(data[\\'ag\\']);"], "fixed_code": ["text = \"Hello, world!\";\\nprint(text[0:6]);", "data = {\\'name\\': \\\"John\\\", \\'age\\': 30};\\nprint(data[\\'age\\']);"]}
{"faulty_code": "for i in range(1,5):\n    print(i)", "fixed_code": "for i in range(0,5):\n    print(i)"}
{"faulty_code": ["short faulty", "medium faulty"], "fixed_code": ["short fixed", "medium fixed"]}
{"faulty_code": "for i in range(len(arr)-1):\n    if arr[i] == arr[i+1]:\n        break\n", "fixed_code": "for i in range(len(arr)-1):\n    if arr[i] != arr[i+1]:\n        break\n"}
{"faulty_code": "for i in range(5+1):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i*2)\n\n# This loop will run for i = 0 to 4 (inclusive), which is correct.", "fixed_code": "for i in range(6):\n    print(i*2)"}
{"faulty_code": "def my_func():\n    print(sqrt(4))", "fixed_code": "import math\n\ndef my_func():\n    print(math.sqrt(4))"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i < len(list)-1:\n        print(list[i])\n"}
{"faulty_code": "{'data': {'scores': [85, 92, 78]}, 'key': 'test_key'}", "fixed_code": "{'data': {'scores': [85, 92, 78]}, 'KEY': 'test_key'}"}
{"faulty_code": "print(input(5))", "fixed_code": "print(input())"}
{"faulty_code": "for i in range(10): \n   print(i+1)", "fixed_code": "for i in range(10, 11): \n   print(i)"}
{"faulty_code": "sum(x and x*2 for x in [0,1])", "fixed_code": "sum(x * 2 for x in [0,1])"}
{"faulty_code": "for i in range(len(list)+1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "with open('data.txt', 'r') as f:\n    f.seek(0)\n    data = f.read().splitlines()\n    print(data.count('line'))", "fixed_code": "with open('data.txt', 'rb') as f:\n    try:\n        data = f.read().decode('utf-8').splitlines()\n    finally:\n        f.close()\n    print(data.count('line'))"}
{"faulty_code": "try:\n    print(1/0)\nexcept ZeroDivisionError:\n    print('Denominator is zero')\nexcept Exception as e:\n    print(f'Unexpected error: {e}')", "fixed_code": "try:\n    print(1/0)\nexcept ZeroDivisionError as e:\n    print('Denominator is zero')\nexcept Exception as e:\n    print(f'Unexpected error: {e}')"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(6): print(i)"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[0:2])", "fixed_code": "my_list = [1,2,3]\nprint(my_list[0:2])"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "lst = [1,2]\nprint(lst[2])", "fixed_code": "lst = [1,2]\nlst.append(3)\nprint(lst[2])"}
{"faulty_code": "a = [1,2,3]\na[0] = 'one'\nprint(a)", "fixed_code": "a = [1,2,3]\na[0] = 'one'\nprint(a)"}
{"faulty_code": "try:\n    with open('missingfile.txt', 'r') as f:\n        print('File not found')\nexcept FileNotFoundError:\n    print('File not found or permission denied')", "fixed_code": "try:\n    with open('missingfile.txt', 'r', encoding='utf-8') as f:\n        print('File not found')\nexcept FileNotFoundError:\n    print('File not found or permission denied')"}
{"faulty_code": "s = 'hello'; print(s[2:3])", "fixed_code": "s = 'hello'; print(s[2:3])"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    if i > 0:\n        print(i - 1)"}
{"faulty_code": "input", "fixed_code": "input()"}
{"faulty_code": "try:\n    with open('data.txt', 'r') as f:\n        while True:\n            line = next(f)\n            if line == ''\n                break\n            print(line.strip())", "fixed_code": "try:\n    with open('data.txt', 'r') as f:\n        while True:\n            line = next(f, '')\n            if not line\n                break\n            print(line.strip())"}
{"faulty_code": "for i in range(10)\n    print(i)", "fixed_code": "for i in range(10,\n    print(i))"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i < len(list)-1:\n        print(list[i])\n\n# OR \n\nfor i in range(len(list)-1):\n    print(list[i])"}
{"faulty_code": "for i in range(len(lst)):\n    print(i+1)", "fixed_code": "for i in range(len(lst)-1):\n    print(i)"}
{"faulty_code": "for i in range(10,20):\n    print(i)", "fixed_code": "for i in range(10,20,1):\n    print(i)"}
{"faulty_code": "s = 5\nprint(s.capitalize())", "fixed_code": "s = 'hello'\nprint(s.capitalize())"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\n# Missing else clause", "fixed_code": "for i in range(5):\n    print(i+1)\n\nelse:\n    pass"}
{"faulty_code": "name = \"Alice\"\nfor name in [\"John\", \"Jane\"]:\n    print(name)", "fixed_code": "name = \"Alice\"\nfor friend_name in [\"John\", \"Jane\"]:\n    print(friend_name)"}
{"faulty_code": "a = [1,2,3]\nb = a.pop(0)\nprint(a)", "fixed_code": "a = [1,2,3]\nb = a.pop(0)\nprint(a)"}
{"faulty_code": "for i in range(5,10):\n    print(i)", "fixed_code": "for i in range(5,9):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\nprint('Missing element')", "fixed_code": "for i in range(10):\n    print(i)\n\nprint('Missing element')\n"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n", "fixed_code": "for i in range(10):\n    print(i+1)\n"}
{"faulty_code": ["try:\n    print(1 / 0)\nexcept ZeroDivisionError:\n    print('Denominator is zero')", "for i in range(5): print(i)", "import socket\ns = socket.socket()\ns.send(b'Hello')\ns.close()"], "fixed_code": ["try:\n    print(1 / 0)\nexcept ZeroDivisionError as e:\n    print(f'Denominator is zero: {e}')", "for j in range(5): print(j)", "import socket\ns = socket.socket()\ns.send(b'Hello')\ns.close()"]}
{"faulty_code": "for i in range(len(list)+1):\n    list.append(i)", "fixed_code": "for i in range(len(list)):\n    list.append(i)"}
{"faulty_code": "max = [5,2,9][::-1]", "fixed_code": "max = max([5,2,9][::-1])", "faulty_code_2": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code_2": "for i in range(len(list)):\n    if i < len(list):\n        print(list[i])"}
{"faulty_code": "print(f\"Hello {name}\")", "fixed_code": "print(f'Hello {name}')"}
{"faulty_code": "a = [1,2,3]\na.append(4)\nprint(a)", "fixed_code": "a = [1,2,3]\na.extend([4])\nprint(a)"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[5])", "fixed_code": "my_list = [1,2,3]\ntry:\n    print(my_list[5])\nexcept IndexError:\n    print('Index out of range')\n"}
{"faulty_code": "my_list = [1,2,3]\nmy_list[3].append(4)", "fixed_code": "my_list = [1,2,3]\nmy_list[2].append(4)"}
{"faulty_code": "for i in range(len(list)+1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "a = [1,2,3]\nb = a.pop()\nprint(a)", "fixed_code": "a = [1,2,3]\na.pop()\nprint(a)"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(6): print(i)"}
{"faulty_code": "i = 0\nwhile i < 10:\n    print(i)\ni++", "fixed_code": "i = 0\nwhile i < 10:\n    print(i)\ni += 1"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    if i < len(arr)-1:\n        print(arr[i])\n    else:\n        break"}
{"faulty_code": "my_list = [1, 2, 3]\n\nmy_list.append(4)\n", "fixed_code": "my_list = [1, 2, 3]\n\nmy_list.append(4)"}
{"faulty_code": "my_list = []; my_list[0]", "fixed_code": "if len(my_list) > 0:\n    print(my_list[0])"}
{"faulty_code": "for i in range(len(arr)):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    print(arr[i])"}
{"faulty_code": "try:\n    print('File not found')\nexcept FileNotFoundError:\n    print('File exists')", "fixed_code": "try:\n    print('File not found')\nexcept FileNotFoundError as e:\n    print(f'Error: {e}')\nfinally:\n    print('Operation completed')\n\n# Exception suppressed\ntry:\n    print('File operation completed')\nexcept Exception as e:\n    print(f'Error: {e}')\n"}
{"faulty_code": "lst = []\nmax_lst = max(lst)", "fixed_code": "lst = []\nif lst:\n    max_lst = max(lst)\nelse:\n    max_lst = None"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    if i < len(arr)-1:\n        print(arr[i])\n"}
{"faulty_code": "for i in range(10)\n    print(i+1)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "d = {\"a\": 1}\nprint(d[\"b\"])", "fixed_code": "d = {\"a\": 1}\nif \"b\" in d:\n    print(d[\"b\"])\nelse:\n    print(\"Key not found\")"}
{"faulty_code": "for i in range(len(list)):\n    list.append(list[i])", "fixed_code": "for i in range(len(list)-1):\n    list.append(list[i])"}
{"faulty_code": "for i in range(10):\n    print(i)\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)\n    print(i+2)"}
{"faulty_code": "os.path.join('folder', 'file.txt')", "fixed_code": "os.path.join('folder', 'file.txt')"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[2])", "fixed_code": "my_list = [1,2,3]\nprint(my_list[2])"}
{"faulty_code": "for i in range(10):\n    print(i)\n\nprint(i+1)", "fixed_code": "for i in range(10):\n    print(i)\n\nprint(i + 1)"}
{"faulty_code": "for i in range(len(lst)-1):\n    print(lst[i])", "fixed_code": "for i in range(len(lst)):\n    if i < len(lst)-1:\n        print(lst[i])\n\n# This code avoids printing the last element by checking the condition inside the loop"}
{"faulty_code": "s = 'Hello'\nprint(s[2:5])", "fixed_code": "s = 'Hello'\nprint(s[2:5])"}
{"faulty_code": "try:\n    a = int(input('Enter a number: '))\nexcept ValueError:\n    print('Please enter a valid integer')", "fixed_code": "try:\n    a = int(input('Enter a number: '))\nexcept ValueError as e:\n    print(f'Invalid input: {e}')\nexcept KeyboardInterrupt:\n    print('Operation cancelled')"}
{"faulty_code": "import os\n\nos.path.exists('test.txt')", "fixed_code": "import os\n\nos.path.exists('test.txt')"}
{"faulty_code": "s = 'Hello'\nprint(s[5:])", "fixed_code": "s = 'Hello'\nprint(s[6:])"}
{"faulty_code": "for i in range(0, n-1):\n    print(i)", "fixed_code": "for i in range(n-1):\n    print(i)"}
{"faulty_code": "import os\n\nfor file in os.listdir():\n    try:\n        with open(file, 'r') as f:\n            lines = f.readlines()\n            for line in lines[:-1]:\n                print(line)\n    except Exception as e:\n        print(f'Error processing {file}: {e}').", "fixed_code": "import os\n\nfor file in os.listdir():\n    try:\n        with open(file, 'r') as f:\n            lines = f.readlines()\n            print(' '.join(lines[:-1]))\n    except Exception as e:\n        print(f'Error processing {file}: {e}')\n        continue"}
{"faulty_code": "for i in range(len(nums)):\n    if nums[i] > 5:\n        print('Found a number greater than 5')", "fixed_code": "for i in range(len(nums)-1):\n    if nums[i] > 5:\n        print('Found a number greater than 5')"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": ["for i in range(5):", "    print(i)", "print('Hello')", "pass"], "fixed_code": ["for i in range(5):", "    print(i)", "print('Hello, World!')", "break"]}
{"faulty_code": "for i in range(len(list)):\n    if list[i] == target:\n        return list[i+1]\nelse:\n    return None", "fixed_code": "for i in range(len(list)-1):\n    if list[i] == target:\n        return list[i+1]\nreturn None"}
{"faulty_code": "for i in range(len(arr)-1):\n    arr[i] = arr[i+1]\n", "fixed_code": "for i in range(len(arr)-1):\n    arr[i+1] = arr[i]\n"}
{"faulty_code": "def factorial(n): return n * factorial(n-1); factorial(5)", "fixed_code": "def factorial(n): return n * factorial(n - 1) if n > 0 else 1; return 1"}
{"faulty_code": "try:\n    os.remove('nonexistentfile.txt')\nexcept FileNotFoundError:\n    print('File not found')", "fixed_code": "try:\n    os.remove('nonexistentfile.txt')\nexcept FileNotFoundError as e:\n    print(f'File not found: {e}')\nfinally:\n    pass"}
{"faulty_code": "my_list = [1,2,3]\nmy_list.append(4", "fixed_code": "my_list = [1,2,3]\nmy_list.append(4)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "a = [1,2,3]\nb.append(4)\nprint(a)", "fixed_code": "a = [1,2,3]\na.append(4)\nprint(a)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This loop only prints numbers from 0 to 9. The bug is an off-by-one error.", "fixed_code": "for i in range(10,20):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(10):\\n    print(i+1)", "fixed_code": "for i in range(10):\\n    print(i)"}
{"faulty_code": "try:\n    open('nonexistentfile.txt', 'r')\nexcept FileNotFoundError:\n    print('File not found!')", "fixed_code": "try:\n    with open('nonexistentfile.txt', 'r') as f:\n        content = f.read()\nexcept FileNotFoundError:\n    print('File not found!')\nexcept Exception as e:\n    print(f'Unexpected error: {e}')"}
{"faulty_code": "for i in range(2):\n    print(i)", "fixed_code": "for i in range(3):\n    print(i)"}
{"faulty_code": "for i in range(len(items) - 1):\n    print(items[i])", "fixed_code": "for i in range(len(items)):\n    print(items[i])"}
{"faulty_code": ["for i in range(5): print(i)", "import os\nos.remove('nonexistentfile.txt')", "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"], "fixed_code": ["for i in range(5): print(i)", "import os\nif os.path.exists('nonexistentfile.txt'):\n    os.remove('nonexistentfile.txt')\nelse:\n    print('File not found')", "def factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n-1)"]}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for idx in range(5):\n    print(idx)"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This code has an infinite loop because it doesn't break after printing all numbers.", "fixed_code": "for i in range(10):\n    print(i+1)\n    if i == 5:\n        break"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "my_list = [1, 2, 3]\nprint(my_list[8])", "fixed_code": "my_list = [1, 2, 3]\nprint(my_list[9])"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n", "fixed_code": "for i in range(10):\n    print(i)\n"}
{"faulty_code": "try:\n    x = int(input('Enter a number: '))\nexcept ValueError:\n    print('Please enter a valid integer')", "fixed_code": "try:\n    x = int(input('Enter a number: '))\nexcept ValueError as e:\n    print(f'Invalid input: {e}')"}
{"faulty_code": "for i in range(10): print(i+1)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "l = [1,2,3]; l[0]  # Accessing an empty list", "fixed_code": "if not l: return\nelse: l[0]"}
{"faulty_code": "a = [1,2,3]\nb = [4,5,6]\nprint(a[3])", "fixed_code": "a = [1,2,3]\nb = [4,5,6]\nprint(a[2])"}
{"faulty_code": "print('Hello, world!')", "fixed_code": "print('Hello, world!')", "medium_faulty_code": "range(5)", "medium_fixed_code": "range(5, 10)"}
{"faulty_code": "for i in range(5): print(i+1)", "fixed_code": "for i in range(6): print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This loop goes from 0 to 9, but prints i+1 which is 1 to 10. The bug is that the loop should go up to 10.", "fixed_code": "for i in range(11):\n    print(i)"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "print('Hello, world!')\nprint('Hello, universe!')", "fixed_code": "print('Hello, world!')\nprint('Hello, universe!')"}
{"faulty_code": "for i in range(3):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i < len(list)-1:\n        print(list[i])\n"}
{"faulty_code": "for i in range(len(primes)-1):\n    if primes[i] > primes[i+1]:\n        primes[i], primes[i+1] = primes[i+1], primes[i]\n\nprimes.pop()\n", "fixed_code": "for i in range(len(primes)):\n    if i < len(primes)-1 and primes[i] > primes[i+1]:\n        primes[i], primes[i+1] = primes[i+1], primes[i]\n\nprimes.pop() or primes.remove(max(primes))\n"}
{"faulty_code": "a = [1,2,3]\na[0] = '1'\nprint(a)", "fixed_code": "a = [1,2,3]\na[0] = '1'\nprint(a)"}
{"faulty_code": "a = [1,2,3]\nb = a[0:2]\nc = b[::-1]", "fixed_code": "a = [1,2,3]\nb = a[:2][::-1]"}
{"faulty_code": "for i in range(1,5):\n    print(i)\n\nprint('Missing fourth element')", "fixed_code": "for i in range(4):\n    print(i)\n\nprint('Fourth element is missing')"}
{"faulty_code": "for i in range(10): print(i+1)\n\n# Short version with off-by-one error\nfor i in range(9,2,-1): print(i)", "fixed_code": "for i in range(10): print(i+1)\n\n# Fixed short version\ntmp = 10\nfor i in range(tmp-1, tmp+1):\n    print(i)"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[-1])", "fixed_code": "my_list = [1,2,3]\nprint(my_list[-1])"}
{"faulty_code": "with open('nonexistentfile.txt', 'r') as f:\n    print(f.read())", "fixed_code": "try:\n    with open('nonexistentfile.txt', 'r') as f:\n        print(f.read())\nexcept FileNotFoundError:\n    print('File not found')"}
{"faulty_code": "for i in range(10-1):\n    print(i)", "fixed_code": "for i in range(9):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(len(list)):\n    list[i] = list[i+1]\n\nprint('List shifted by one')", "fixed_code": "for i in range(len(list)-1):\n    list[i] = list[i+1]\n\nprint('List shifted by one')"}
{"faulty_code": "a = [1,2]\nprint(a[3])", "fixed_code": "a = [1,2]\nprint(a[2])"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)-1):\n    print(list[i])"}
{"faulty_code": "try:\n    with open('data.txt', 'r') as f:\n        print(f.read())\nexcept FileNotFoundError:\n    print(\"File not found\")\nexcept IOError as e:\n    print(f\"Error reading file: {e}\")", "fixed_code": "try:\n    if os.path.exists('data.txt'):\n        with open('data.txt', 'r') as f:\n            print(f.read())\n    else:\n        print(\"File not found\")\nexcept IOError as e:\n    print(f\"Error reading file: {e}\")"}
{"faulty_code": "print('Hello, world!')", "fixed_code": "print('Hello, world!'"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)\n    if i == 5:", "fixed_code": "try:\n    i = 0\n    while i < 10:\n        print(i)\n        if i == 5:\n            break\n        i += 1\nexcept Exception as e:\n    print(f\"Error: {e}\")"}
{"faulty_code": "try:\n    print(1/0)\nexcept ZeroDivisionError as e:\n    print(f'Caught: {e}')\n", "fixed_code": "try:\n    print(1/0)\nexcept ZeroDivisionError as e:\n    print(f'Caught: {str(e)}')\n"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(10):\n    if i == 5:\n        break\nelse:\n    print('Loop completed')", "fixed_code": "for i in range(10):\n    if i < 5:\n        break\nelse:\n    print('Loop completed')\n\n# This example demonstrates a corrected loop termination condition."}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This is a short example; your code should be more realistic.", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "print('Hello, world!')", "fixed_code": "print('Hello, world!')\n"}
{"faulty_code": "try:\n    file = open('nonexistent.txt', 'r')\nexcept FileNotFoundError:\n    print('File not found')\nelse:\n    print('File was found')", "fixed_code": "try:\n    with open('nonexistent.txt', 'r') as f:\n        print('File was found')\nexcept FileNotFoundError:\n    print('File not found')"}
{"faulty_code": "for i in range(10+1):\n    print(i)", "fixed_code": "for i in range(10+1):\n    print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This loop runs from 0 to 9, but prints 1 to 10. The bug is an off-by-one error.", "fixed_code": "for i in range(11):\n    print(i)"}
{"faulty_code": "file = open('nonexistent.txt', 'r')", "fixed_code": "try:\n    file = open('nonexistent.txt', 'r')\nexcept FileNotFoundError:\n    print('File not found. Please create it first.')"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[0])"}
{"faulty_code": "for i in range(5):\n    if i == 4:\n        print(i)", "fixed_code": "for i in range(5):\n    if i < 4:\n        print(i)"}
{"faulty_code": "for i in range(10): print(i+1)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "if x == 'hello':\n    print('Hello!')\nelse:\n    print('Not hello!')", "fixed_code": "if x == 'hello':\n    print('Hello!')\nelse:\n    print('Not hello!')"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "my_list = [1,2,3]\n\nfor i in range(len(my_list)):\n    if my_list[i] % 2 == 0:\n        print('Even number found: ' + str(my_list[i])\n", "fixed_code": "my_list = [1,2,3]\n\nfor i in range(len(my_list)):\n    if my_list[i] % 2 == 0:\n        print(f'Even number found: {my_list[i]}')"}
{"faulty_code": "for i in range(10):\n    print(i)\nprint('Loop finished')", "fixed_code": "for i in range(10):\n    print(i)\nprint('Loop finished')\n"}
{"faulty_code": ["my_list = [x for x in range(5) if x%2]", "my_string = 'Hello' + %str('world')", "for i in range(5): print(i)"], "fixed_code": ["my_list = [x for x in range(5) if x%2] as list", "my_string = 'Hello' + str('world')", "for i in range(5): print(i+1)"]}
{"faulty_code": "try:\n    a = int(input('Enter a number: '))\nexcept ValueError:\n    print('Please enter a valid integer')", "fixed_code": "try:\n    a = int(input('Enter a number: '))\nexcept ValueError as e:\n    print(f'Invalid input: {e}')\nexcept Exception as e:\n    print(f'An unexpected error occurred: {e}')\n"}
{"faulty_code": "a = [1,2,3]\na[4] = 5", "fixed_code": "a = [1,2,3]\na.append(5)"}
{"faulty_code": "try:\n    f = open('nonexistentfile.txt', 'rb')\nexcept FileNotFoundError:\n    print('File not found')", "fixed_code": "try:\n    f = open('nonexistentfile.txt', 'r')\nexcept FileNotFoundError:\n    print('File not found')\nfinally:\n    f.close()"}
{"faulty_code": "s = 'Hello'\nprint(s.upper())", "fixed_code": "s = 'Hello'\nprint(s.upper())"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\n# This loop runs from 0 to 4, but the output is incorrect due to an off-by-one error", "fixed_code": "for i in range(5):\n    print(i+1)"}
{"faulty_code": "for i in range(5):\n    print(i)\n", "fixed_code": "for i in range(5):\n    print(i)\n"}
{"faulty_code": "for i in range(1, 5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "a = [1,2,3]\nb = a[0:2]\nc = b[::-1]\nd = c + [4,5,6]\nprint(d)", "fixed_code": "a = [1,2,3]\nb = a[0:2][::-1]\nc = b + [4,5,6]\nprint(c)"}
{"faulty_code": "a = [1,2,3]\na[5]", "fixed_code": "a = [1,2,3]\nprint(a[4])"}
{"faulty_code": "for i in range(1, n+1):\n    print(i)\n\n# This loop runs one extra time because range is exclusive at the end.", "fixed_code": "for i in range(1, n+1):\n    print(i)"}
{"faulty_code": "my_list = [10, 20, 30]\nprint(my_list.index('20'))", "fixed_code": "my_list = [10, 20, 30]\nprint(my_list.index(20))"}
{"faulty_code": "s = [1,2,3]\ns[0] = 'a'", "fixed_code": "s = [1,2,3]"}
{"faulty_code": "total = sum([1,2,3])", "fixed_code": "total = sum([1,2,3])"}
{"faulty_code": "print('Hello, world!')\n\n", "fixed_code": "print('Hello, world!')"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    if i < 4:\n        print(i)"}
{"faulty_code": ["for i in range(10):", "    print(i)", "sum = 0", "for j in range(5):", "    sum += j"], "fixed_code": ["for i in range(10):", "    print(i)", "sum = 0", "for j in range(5):", "    sum += j"]}
{"faulty_code": "for i in range(5):\n    print(i)\n", "fixed_code": "for i in range(5):\n    print(i)\n"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "try:\n    print('File not found')\nexcept FileNotFoundError:\n    print('File not found')", "fixed_code": "try:\n    print('File not found')\nexcept FileNotFoundError:\n    print('File not found')\nelse:\n    print('File exists')"}
{"faulty_code": "print('Hello, world!') + print('This is a second line.')", "fixed_code": "print('Hello, world!')\n\nprint('This is a second line.')"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This loop is off by one; it should go up to 9 inclusive.", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "def outer(x):\n    print(x)\n\ndef inner():\n    def nested(x):\n        nonlocal x\n    inner.x =5\n    nested(3)", "fixed_code": "def outer(x):\n    print('Outer:', x)\n\ndef inner():\n    def nested(y):\n        nonlocal x\n    inner.x =5\n    nested(3)"}
{"faulty_code": "for i in range(10):\n    print(i)\nbreak", "fixed_code": "for i in range(10):\n    print(i)\nbreak\n"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "for i in range(0, n):", "fixed_code": "for i in range(n):"}
{"faulty_code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n    return n", "fixed_code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)"}
{"faulty_code": "d = {'a':1, 'b':2}; d['c']", "fixed_code": "d = {'a':1, 'b':2}; d['c']"}
{"faulty_code": "for i, item in enumerate(lst):\n    print(i)", "fixed_code": "for i, item in enumerate(lst): print(i)"}
{"faulty_code": "<faulty code>", "fixed_code": "<fixed code>"}
{"faulty_code": "a = [1,2,3]\nb = a[1:]\nc = b[::-1]", "fixed_code": "a = [1,2,3]\nb = a[1:] \n\nc = b[::-1]"}
{"faulty_code": "if x / 2 == 1:\n    print('Even number')", "fixed_code": "if x // 2 == 1:\n    print('Even number')"}
{"faulty_code": "def my_func():\n    global x\n    x = 42\nx = 100\nprint(x)", "fixed_code": "def my_func():\n    x = 42\nx = 100\nprint(x)"}
{"faulty_code": "d = {'a': 1}\nprint(d['b'])", "fixed_code": "d = {'a': 1}\nprint(d.get('b', 0))"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "print('Hello, world'')", "fixed_code": "print('Hello, world')"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "while i <= n+1:\n    i += 1", "fixed_code": "while i <= n:\n    i += 1"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "open('data.txt', 'r')\ncontent = open('data.txt', 'r').read()\nprint(content)", "fixed_code": "with open('data.txt', 'r') as f:\n    content = f.read()\n    print(content)"}
{"faulty_code": "a = [1,2,3]\nb = [4,5,6]\na + b", "fixed_code": "a = [1,2,3]\nb = [4,5,6]\nresult = a + b"}
{"faulty_code": "a = [1,2,3]\nb = a\nprint(a)\nprint(b)", "fixed_code": "a = [1,2,3]\nb = a.copy()\nprint(a)\nprint(b)"}
{"faulty_code": "def greet(name):\n    return f\"Hello, {name}!\"\n\ntry:\n    greet('world')\nexcept ValueError as e:\n    print(e)\nexcept IndexError as e:\n    print('Index error')", "fixed_code": "def greet(name):\n    try:\n        return f\"Hello, {name}!\"\n    except ValueError as e:\n        print(f\"Invalid name: {e}\")\n    except IndexError as e:\n        print('Index error')"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(len(arr)-1):\n    arr[i] = arr[i+1]\n\n# This loop misses the last element of the array", "fixed_code": "for i in range(len(arr)):\n    if i < len(arr)-1:\n        arr[i] = arr[i+1]"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(11):"}
{"faulty_code": "a = [1,2,3]\nb.append(4)\nprint(a)", "fixed_code": "a = [1,2,3]\na.append(4)\nprint(a)"}
{"faulty_code": "my_list = [x.capitalize() for x in 'Hello']", "fixed_code": "my_list = [x.capitalize() for x in ['Hello']]"}
{"faulty_code": "print('Hello, world')", "fixed_code": "print('Hello, world')"}
{"faulty_code": "with open('data.csv', 'r') as f:\n    for row in f:\n        print(row)", "fixed_code": "import csv\nwith open('data.csv', 'r') as f, open('output.csv', 'w') as out:\n    csv.reader(f)\n    writer = csv.writer(out)\n    next(reader)\n    for row in reader:\n        writer.writerow(row)"}
{"faulty_code": "for i in range(5):\n    print(i)\nprint('Next item')", "fixed_code": "for i in range(6):\n    print(i)\nprint('Next item')"}
{"faulty_code": "data = [\n    {'name': 'Alice', 'age': 30},\n    {'name': 'Bob', 'age': None},\n    {'name': 'Charlie'}\n]\n\nfor entry in data:\n    if 'age' in entry:\n        print(entry['age'] + 1)\n", "fixed_code": "data = [\n    {'name': 'Alice', 'age': 30},\n    {'name': 'Bob', 'age': None},\n    {'name': 'Charlie'}\n]\n\nfor entry in data:\n    if 'age' in entry and isinstance(entry['age'], int):\n        print(entry['age'] + 1)\n"}
{"faulty_code": "try: f = open('file.txt'); print(f); f.close() except IOError: print(\"Error\")", "fixed_code": "try: f = open('file.txt'); print(f); f.close() \nexcept IOError: print(\"Error\")"}
{"faulty_code": "for i in range(0):\n    print('Loop executed')", "fixed_code": "for i in range(1):\n    print('Loop executed')\n\n# Now the loop runs once"}
{"faulty_code": "numbers = [1,2,3]\nsum = sum(numbers[0:5])", "fixed_code": "numbers = [1,2,3]\nsum = numbers[0] + numbers[1] + numbers[2]"}
{"faulty_code": "for i in range(10)\n    print(i)", "fixed_code": "for i in range(10, 11)\n    print(i)"}
{"faulty_code": "for i in range(5)\n    print(i+1)", "fixed_code": "for i in range(5)\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)\n\n# This code runs one iteration too many because range(5) is 0-4", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "def outer():\n    def inner():\n        print('Outer function')\n\ninner()\n", "fixed_code": "def outer(self):\n    def inner():\n        print('Outer function')\n\ninner()\n"}
{"faulty_code": "my_list = [1,2,3]; print(my_list[4])", "fixed_code": "my_list = [1,2,3]; print(my_list[3])"}
{"faulty_code": "for i in range(1000000):", "fixed_code": "for i in range(1000):"}
{"faulty_code": "for i in range(1, n-1):\n    print(i)", "fixed_code": "for i in range(1, n):\n    print(i)"}
{"faulty_code": "def calculate_average(numbers):\n    total = 0\n    for i in range(len(numbers) - 1):\n        total += numbers[i]\n    return total / len(numbers)\n", "fixed_code": "def calculate_average(numbers):\n    total = 0\n    for i in range(len(numbers)):\n        if i == len(numbers) - 1:\n            continue\n        total += numbers[i]\n    return total / (len(numbers) - 1)\n"}
{"faulty_code": "import threading\nthreading.startMainThread()\nthreading.join主线程", "fixed_code": "import threading\nthreading.startMainThread()\nthreading.join(1.0)\n"}
{"faulty_code": "s = 'hello'; print(s[3])", "fixed_code": "s = 'hello'; print(s[3])"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(len(arr)+1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    print(arr[i])"}
{"faulty_code": "for i in range(0,3):\n    print(i+1)", "fixed_code": "for i in range(0,4):\n    print(i+1)"}
{"faulty_code": ["short faulty example", "medium faulty example", "long faulty example"], "fixed_code": ["short fixed example", "medium fixed example", "long fixed example"]}
{"faulty_code": "for i in range(10):\\n    print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(6): print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(0,5):\n    print(i)", "fixed_code": "for i in range(0,6):\n    print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": ["short code", "medium code", "long code"], "fixed_code": ["short fixed", "medium fixed", "long fixed"]}
{"faulty_code": "for i in range(0,5):\n    print(i)", "fixed_code": "for i in range(0,6):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "\ndef greet(name):\n    print('Hello, ' + name + '!')", "fixed_code": "\ndef greet(name):\n    print(f'Hello, {name}!')\n# Fixed the string formatting issue using f-strings."}
{"faulty_code": "exec(\"print\")", "fixed_code": "exec(\"print('Hello, world!')\")"}
{"faulty_code": "a = [1,2,3]; b = a[0:2]; del a[0:2]; print(b)", "fixed_code": "a = [1,2,3]; b = a[:2]; del a[:2]; print(b)"}
{"faulty_code": "for i in range(10,20): print(i)", "fixed_code": "for i in range(10,20,1): print(i)"}
{"faulty_code": "with open('test.txt', 'r') as f:\n    print(f.read())", "fixed_code": "try:\n    with open('test.txt', 'r') as f:\n        print(f.read())\nexcept FileNotFoundError:\n    print('File not found')\nexcept IOError as e:\n    print(f'Error reading file: {e}')"}
{"faulty_code": ["for i in range(10):", "    print(i)", "    if i >5:", "        break"], "fixed_code": ["for i in range(6):", "    print(i)", "    if i >3:", "        break"]}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(6): print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n", "fixed_code": "for i in range(10):\n    print(i)\n"}
{"faulty_code": "print(x)\nx = 5", "fixed_code": "x = 5\nprint(x)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n", "fixed_code": "for i in range(10):\n    print(i+1)\n"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i < len(list):\n        print(list[i])"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This loop runs from 0 to 9, but we want it to run from 1 to 10\n", "fixed_code": "for i in range(11):\n    print(i)\n\n# The loop now correctly runs from 0 to 10"}
{"faulty_code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n", "fixed_code": "def factorial(n):\n    if n <= 0:\n        return 1\n    else:\n        return n * factorial(n - 1)"}
{"faulty_code": "for i in range(10):\n    print(i)\n\nprint('Next item')", "fixed_code": "for i in range(10)\n    print(i)\n\nprint('Next item', end='')"}
{"faulty_code": "a = [1,2,3]\nb = a[0:2]\nprint(b.append(4))", "fixed_code": "a = [1,2,3]\nb = a[0:2]\nb.append(4)"}
{"faulty_code": "squares = (x**2 for x in range(10))\nprint(5 in squares)", "fixed_code": "squares = (x**2 for x in range(10))\nprint(5 in [num for num in squares])"}
{"faulty_code": "for i in range(10): print(i+1)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "a = [1,2,3]\nb.pop(0)\na.remove(a[0])", "fixed_code": "a = [1,2,3]\nb.pop(0)\na.pop(0)"}
{"faulty_code": "s = 'abc'; print(s[3])", "fixed_code": "s = 'abc'; if len(s) > 3: print(s[3]) else: print('Index out of range')"}
{"faulty_code": "import os\nos.remove('temp_file.txt')\nprint('Failed to remove temp_file.txt')", "fixed_code": "import os\ntry:\n    os.remove('temp_file.txt')\nexcept FileNotFoundError:\n    print('The file does not exist')\nprint('Removed file successfully')\n"}
{"faulty_code": "for i in range(10)\n    print(i)", "fixed_code": "for i in range(10,\n    print(i))"}
{"faulty_code": "for i in range(3):\n    print(i)", "fixed_code": "for i in range(len(list)):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i < len(list):\n        print(list[i])"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This loop prints numbers from 1 to 10 inclusive, but the range should be 11.", "fixed_code": "for i in range(11):\n    print(i)"}
{"faulty_code": "def sort_list(data):\n    sorted_data = []\n    for i in range(len(data)):\n        if data[i] < data[i+1]:\n            sorted_data.append(data[i])\n            break\n    return sorted_data", "fixed_code": "def sort_list(data):\n    sorted_data = []\n    for i in range(len(data)-1):\n        if data[i] > data[i+1]:\n            data[i], data[i+1] = data[i+1], data[i]\n    return data"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')\n", "fixed_code": "def greet(name):\n    return f'Hello, {name}!'\n"}
{"faulty_code": "for i in range(10)\n    print(i+1)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)\n", "fixed_code": "for i in range(5):\n    print(i)\n"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    print(arr[i])"}
{"faulty_code": "x = [None]\nprint(x + 'hello')", "fixed_code": "x = [None]\nstr_x = ''\nstr_x += x[0] if x[0] is not None else ''\nprint(str_x + 'hello')"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    my_list[i] += 1", "fixed_code": "try:\n    for i in range(len(my_list)):\n        my_list[i] += 1\nexcept IndexError as e:\n    print(f\"Index error: {e}\")"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')", "fixed_code": "def greet(name):\n    return f'Hello, {name}!'\n# This example is very simple; your code should be more realistic.", "faulty_code_2": "data = [1, 2, 3]\nindex = 0\nwhile index < len(data):\n    print(data[index])\n    index += 1", "fixed_code_2": "data = [1, 2, 3]\nfor num in data:\n    print(num)", "faulty_code_3": "class MyClass:\n    def __init__(self, a, b=5):\n        self.a = a\n        self.b = b", "fixed_code_3": "class MyClass:\n    def __init__(self, a, b=5):\n        super().__init__()\n        self.a = a\n        self.b = b"}
{"faulty_code": "lst = [1,2,3]\nprint(lst[len(lst)]", "fixed_code": "lst = [1,2,3]\nprint(lst[-1])"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    print(arr[i])"}
{"faulty_code": "def process_list(lst):\n    for item in lst:\n        if isinstance(item, list)\n            print(len(item))", "fixed_code": "def process_list(lst):\n    for item in lst:\n        if isinstance(item, list)\n            print(len(item))"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    if i < len(arr)-1:\n        print(arr[i])\n\n# OR \n\nfor i in range(len(arr)-1):\n    print(arr[i])"}
{"faulty_code": "my_list = [1,2,3]\nfor item in list:\n    print(item)", "fixed_code": "my_list = [1,2,3]\nfor item in my_list:\n    print(item)"}
{"faulty_code": "for i in range(0, n-2):\n    print(i)", "fixed_code": "for i in range(n-1):\n    print(i)"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i+1)"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "while True:\n    print('Hello, World!')\n", "fixed_code": "while True:\n    print('Hello, World!')\n    break\n"}
{"faulty_code": "\na = [1,2,3]\nb = [4,5,6,7]\nfor i in range(len(a)):\n    print(a[i] + b[i])", "fixed_code": "\na = [1,2,3]\nb = [4,5,6,7]\nfor i in range(min(len(a), len(b)))\n    print(a[i] + b[i])"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n", "fixed_code": "for i in range(5):\n    print(i*2 if i<4 else 9)"}
{"faulty_code": "s = 'hello'\nslice = s[2:3]\nprint(slice)", "fixed_code": "s = 'hello'\nslice = s[2:4]\nprint(slice)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)-1):\n    print(list[i])"}
{"faulty_code": "s = 'hello'\nprint(s[5])", "fixed_code": "s = 'hello'\nprint(s[5] if len(s) > 5 else '')"}
{"faulty_code": "while True:\n    print('Waiting...')", "fixed_code": "count = 0\nwhile count < 5:\n    print('Waiting.')\n    count +=1"}
{"faulty_code": "a = [1,2,3]\na[4]", "fixed_code": "a = [1,2,3]\nif len(a) > 4:\n    a.append(4)"}
{"faulty_code": "my_list = []\nprint(my_list[0])", "fixed_code": "my_list = []\nif len(my_list) > 0:\n    print(my_list[0])"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": ["short faulty code", "medium faulty code", "long faulty code"], "fixed_code": ["short fixed code", "medium fixed code", "long fixed code"]}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\nprint('Loop completed')", "fixed_code": "for i in range(5):\n    print(i+1)\n\nprint('Loop completed with correct indentation')\n"}
{"faulty_code": "for i in range(10):\n    print(i+1)\nprint('Loop ended')", "fixed_code": "for i in range(10):\n    print(i+1)\nprint('Loop ended after iteration 9')"}
{"faulty_code": "for i in range(len(nums)-1):\n    print(nums[i])", "fixed_code": "for i in range(len(nums)):\n    if i < len(nums)-1:\n        print(nums[i])\n    else:\n        break"}
{"faulty_code": "def greet(name, age):\n    print(\"Hello, \" + name)", "fixed_code": "def greet(name, age):\n    print(f\"Hello, {name}\")"}
{"faulty_code": "for i in range(len(list)+1):\n    print(i)", "fixed_code": "for i in range(len(list)):\n    print(i)"}
{"faulty_code": "for i in range(len(arr)-1):\n    if arr[i] > arr[i+1]:\n        swap = arr[i]\n        arr[i] = arr[i+1]\n        arr[i+1] = swap", "fixed_code": "for i in range(len(arr)-1):\n    if arr[i] > arr[i+1]:\n        arr[i], arr[i+1] = arr[i+1], arr[i]"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "with open('data.txt', 'r') as f:\n    for line in f:\n        print(line.strip())", "fixed_code": "with open('data.txt', 'r') as f:\n    for line in f:\n        print(line.strip())"}
{"faulty_code": "a = [1,2,3]\nb = a[5]", "fixed_code": "a = [1,2,3]\nb = a[4]"}
{"faulty_code": "strng = 'Hello'\nprint(strng + '\\n')", "fixed_code": "strng = 'Hello'\nprint(strng + '\\' + '\\n')"}
{"faulty_code": "with open('file.txt', 'r') as f:\n    while f seeking(0) < len(f) -1:\n        print(f.readline())", "fixed_code": "with open('file.txt', 'r') as f:\n    while f.seek(0) < len(f) -1:\n        print(f.readline())"}
{"faulty_code": "nums = [1, 2, 3]\nsquared = nums ** 2", "fixed_code": "nums = [1, 2, 3]\nsquared = sum(x ** 2 for x in nums)"}
{"faulty_code": "my_list = [1]; print(my_list[2])", "fixed_code": "my_list = [1]; print(my_list[1])"}
{"faulty_code": ["short_faulty.py", "medium_faulty.py", "long_faulty.py"], "fixed_code": ["short_fixed.py", "medium_fixed.py", "long_fixed.py"]}
{"faulty_code": "for i in range(6):\n    print(i)", "fixed_code": "for i in range(5, 10):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This loop runs from 0 to 9, but we intended it to run up to and including 9.", "fixed_code": "for i in range(11):\n    print(i)"}
{"faulty_code": "my_list = [1,2,3]; print(my_list[i+1])", "fixed_code": "my_list = [1,2,3]; print(my_list[i])"}
{"faulty_code": "for i in range(4):\n    print(i)", "fixed_code": "for i in range(3,7):\n    print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(len(list) + 1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "try:\n    open('nonexistentfile.txt')\nexcept IOError:\n    print('File not found')", "fixed_code": "try:\n    if os.path.exists('nonexistentfile.txt'):\n        open('nonexistentfile.txt')\nexcept IOError:\n    print('File not found')\nexcept Exception as e:\n    print(f'Unexpected error: {e}')"}
{"faulty_code": "def outer(x): y = 10; def inner(): return x + y; return inner", "fixed_code": "def outer(x): y = 10; def inner(): return x + y; return inner"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i+1)"}
{"faulty_code": "try:\n    a = int(input('Enter a number: '))\nexcept ValueError:\n    print('Please enter a valid integer')", "fixed_code": "try:\n    a = int(input('Enter a number: '))\nexcept ValueError as e:\n    print(f'Invalid input: {e}')\nexcept Exception as e:\n    print(f'An unexpected error occurred: {e}')"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[1 + i])"}
{"faulty_code": "a = [1,2,3]\nb = a\nprint(b[0])", "fixed_code": "a = [1,2,3]\nb = a.copy()\nprint(b[0])"}
{"faulty_code": "import os\nos.remove('not ExistingFile.txt')", "fixed_code": "try:\n    os.remove('not_existing_file.txt')\nexcept FileNotFoundError:\n    pass"}
{"faulty_code": "s = 'Hello World'\nif s.islower():\n    print('Lowercase')", "fixed_code": "s = 'Hello World'\nif s.islower() and all(c.islower() for c in s):\n    print('Lowercase')"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\n# This code will cause an IndexError because the list only has 4 elements.", "fixed_code": "for i in range(6):\n    print(i+1)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "def calculate_total(prices):\n    sum = 0\n    for p in prices:\n        sum += p\nprint(sum)", "fixed_code": "def calculate_total(prices):\n    total = 0\n    for p in prices:\n        total += p\nreturn total"}
{"faulty_code": "a = [1,2,3]\nb = a", "fixed_code": "a = [1,2,3]\nb = a.copy()"}
{"faulty_code": "x = [1,2,3]\nx[0] + x[2]", "fixed_code": "x = [1,2,3]\nsum(x[:2])"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[9])", "fixed_code": "my_list = [1,2,3]\nprint(my_list[4])"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i+1])"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(len(numbers)):\n    print(numbers[i-1])", "fixed_code": "for i in range(len(numbers)):\n    if i == 0:\n        print(None)\n    else:\n        print(numbers[i-1])"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "import os\nos.remove('nonexistentfile.txt')", "fixed_code": "import os\ntry:\n    os.remove('nonexistentfile.txt')\nexcept FileNotFoundError:\n    print('File not found.')\n\n# OR \n\nos.remove('nonexistentfile.txt')"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(3)\n    print(i)", "fixed_code": "for i in range(4)\n    print(i)"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    print(arr[i])"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(10):<br/>\n    print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "numbers = [1,2,3]\nprint(numbers[0])", "fixed_code": "numbers = [1,2,3]\nprint(numbers[1])"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n", "fixed_code": "for i in range(10):\n    print(i)\n"}
{"faulty_code": "for i in range(10):", "fixed_code": "for i in range(9):"}
{"faulty_code": "nums = [1, 2, 3]\nfiltered = [n for n in nums if n >5]", "fixed_code": "nums = [1, 2, 3]\neven_nums = [n for n in nums if (n % 2 ==0) or (n >=6)]"}
{"faulty_code": "a = [1,2,3]\nb = a", "fixed_code": "a = [1,2,3]\nprint(b) if b else None"}
{"faulty_code": "for i in range(5): print(i+1)\n\n# This code prints numbers from 1 to 5, but it should print from 0 to 4\n", "fixed_code": "for i in range(5): print(i)\n\n# The corrected code now prints numbers from 0 to 4 as intended\n"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[2])", "fixed_code": "my_list = [1,2,3]\nprint(my_list[2])"}
{"faulty_code": "for i in range(1, len(lst)): print(lst[i])", "fixed_code": "for i in range(len(lst)): print(lst[i])"}
{"faulty_code": "try:\n    open('nonexistentfile.txt')\nexcept FileNotFoundError:\n    print('File not found')", "fixed_code": "try:\n    with open('nonexistentfile.txt') as f:\n        pass\nexcept FileNotFoundError as e:\n    print(f'Error: {e}')\nfinally:\n    pass"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "a = [1,2,3]; print(a[5])", "fixed_code": "a = [1,2,3]; print(a[4])"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\nprint(i)", "fixed_code": "for i in range(10):\n    print(i+1)\nprint(i+1)"}
{"faulty_code": "for i in range(1,5):\n    print(i+1)\n\n# This code has an off-by-one error. It should be changed to range(1,6) or stop=6.", "fixed_code": "for i in range(1,6):\n    print(i+1)"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(6): print(i)"}
{"faulty_code": "for i in range(len(arr)):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    print(arr[i])"}
{"faulty_code": "a = 42\nb = a\nprint(b)", "fixed_code": "a = 42\nb = a\nprint(a)"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This loop is off-by-one; it should be i <=10\n", "fixed_code": "for i in range(11):\n    print(i)\n\n# Corrected to include 0 through 10"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n", "fixed_code": "for i in range(10):\n    print(i+1)\n"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This code has an off-by-one error; it should start at 0 to include 9.", "fixed_code": "for i in range(10, 20):\n    print(i-1)"}
{"faulty_code": ["short faulty", "medium faulty", "long faulty"], "fixed_code": ["short fixed", "medium fixed", "long fixed"]}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "print('Hello, world!')\n\n# This is a comment", "fixed_code": "print('Hello, world!')"}
{"faulty_code": "try:\n    with open('nonexistent.txt') as f:\n        print(f.read())\nexcept IOError:\n    print('File not found')", "fixed_code": "try:\n    with open('nonexistent.txt') as f:\n        print(f.read())\nexcept IOError as e:\n    print(f'Error: {e}')\n"}
{"faulty_code": "async def my_async_func任务列表：\n    yield from asyncio.sleep(1)\n    print('完成')", "fixed_code": "import asyncio\n\nasync def my_async_func任务列表：\n    await asyncio.sleep(1)\n    print('完成')"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "a = [1,2,3]\na[5] = 'x'", "fixed_code": "a = [1,2,3]\na[4] = 'x'"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(10)\n    print(i)\n", "fixed_code": "for i in range(10)\n    print(i)\n"}
{"faulty_code": "x = [1,2,3]\nfor num in x:\n    print(num)", "fixed_code": "x = [1,2,3]\ny = []\nfor num in x:\n    y.append(num)\nprint(y)"}
{"faulty_code": "for i in range(5):\\n    print(i)", "fixed_code": "for i in range(6):\\n    print(i)"}
{"faulty_code": ["my_list = [1,2,3]\nindex = my_list.index(4)\nprint(index)", "for i in range(len(my_list)):\n    if my_list[i] % 2 == 0:\n        print('even')\n    else:\n        print('odd')", "my_dict = {'a':1, 'b':2}\nkeys = len(my_dict.keys())\nprint(keys)"], "fixed_code": ["my_list = [1,2,3]\ntry:\n    index = my_list.index(4)\nexcept ValueError:\n    print('Element not found')", "for i in range(len(my_list)):\n    if my_list[i] % 2 == 0:\n        print('even')\n    else:\n        print('odd')", "my_dict = {'a':1, 'b':2}\nkeys = len(my_dict)\nprint(keys)"]}
{"faulty_code": "for i in range(len(list)):\n    if list[i] == 'a':\n        break", "fixed_code": "for i in range(len(list)):\n    if list[i] == 'a':\n        break"}
{"faulty_code": "arr = [1,2,3]\nfor i in range(len(arr)):\n    if arr[i] % 2 ==0:\n        print(i)", "fixed_code": "arr = [1,2,3]\nfor i in range(len(arr))\n    if arr[i] % 2 == 0:\n        print(i)"}
{"faulty_code": "for i in range(4):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(len(nums)):\n    print(nums[i-1])", "fixed_code": "for i, num in enumerate(nums):\n    print(num)"}
{"faulty_code": "print('Hello, world!')\n\n# This is a comment\nprint('Hello again!')", "fixed_code": "print('Hello, world!')\n\n# This is a comment\nprint('Hello again!')"}
{"faulty_code": ["print('Hello, world!')", "n = [1,2,3]\nsum(n)", "a = {0: 'one', 1: 'two'}\nb = a.keys()\nc = list(b)", "import math\nmath.sqrt(-4)", "x = [1,2,3]\ny = x", "i = i+1"], "fixed_code": ["print('Hello, world!')", "n = [1,2,3]\ns = sum(n)", "a = {0: 'one', 1: 'two'}\nb = list(a.keys())", "import math\nif -4 < 0:\n    print('Negative number has no square root.')", "y = x.copy()", "while i < 5:\n    i += 1"]}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "class A:\n    class B:\n        pass\n    C", "fixed_code": "class A:\n    class B:\n    class C: pass"}
{"faulty_code": "a = [1,2,3]\nb.append(4)\nc.pop()", "fixed_code": "a = [1, 2, 3]\nb.append(4)\nc.pop()"}
{"faulty_code": "for i in range(len(numbers)):\n    if numbers[i] > 5:\n        print('Numbers are too high')\n\nprint('All numbers are <=5')", "fixed_code": "for i in range(len(numbers)-1):\n    if numbers[i] > 5:\n        print('Numbers are too high')\n\nprint('All numbers are <=5')"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i + 1)"}
{"faulty_code": "```\n# Example: Iterating from 1 to len(list) inclusive, which causes index out of range\nemployees = ['Alice', 'Bob']\nfor i in range(1, len(employees)+1):\n    print(employees[i])\n```", "fixed_code": "```\n# Fixed version: Iterating from 0 to len(list) exclusive\nemployees = ['Alice', 'Bob']\nfor i in range(len(employees)):\n    print(employees[i])\n```"}
{"faulty_code": "for i in range(1,20):\n    print(i*5)\n\n# This code prints multiples of 5 from 5 to 19 but misses 20 because the range stops at 19.", "fixed_code": "for i in range(1,20,5):\n    print(i)\n\n# This code correctly iterates through 5, 10, 15, and 20 by specifying both start and step values."}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5)\n    try:\n        print(i)\n    except IndexError:\n        print('Index out of bounds')"}
{"faulty_code": "for i in range(len(numbers)):\n    print(numbers[i])", "fixed_code": "for i in range(len(numbers)):\n    if i < len(numbers):\n        print(numbers[i])"}
{"faulty_code": "print('Hello, world!')", "fixed_code": "print('Hello, world!')"}
{"faulty_code": "import pandas as pd\n\ndf = pd.DataFrame({'A': [1,2,3], 'B': ['a', 'b', 'c']})\n\ndf.merge(df, on='A', how='inner')", "fixed_code": "import pandas as pd\n\ndf = pd.DataFrame({'A': [1,2,3], 'B': ['a', 'b', 'c']})\n\ndf.merge(df, on='A', left_index=True, right_index=True, how='inner')"}
{"faulty_code": "print('Hello, world!')", "fixed_code": "print('Hello, world!')", "faulty_code_2": "for i in range(5): print(i)", "fixed_code_2": "for i in range(5): print(i)", "faulty_code_3": "n = [i for i in range(10) if i % 2 == 0]", "fixed_code_3": "even_numbers = [i for i in range(10) if i % 2 == 0]"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\n# This is a medium-length example with an off-by-one error. The loop should run from 0 to 4 inclusive.", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)-1):\n    print(list[i])"}
{"faulty_code": "def calculate_average(numbers):\n    total = sum(numbers)\n    count = len(numbers)\n    return total / (count + 0)\n", "fixed_code": "def calculate_average(numbers):\n    total = sum(numbers)\n    count = len(numbers)\n    return total / count if count else 0"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(5)\n    print(i * 2)"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i], list[i+1])", "fixed_code": "for i in range(len(list)):\n    if i < len(list)-1:\n        print(list[i], list[i+1])"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\n# This code runs from 0 to 4, but if intended to run up to index 5, the last print should be 6.", "fixed_code": "for i in range(5):\n    print(i+1)"}
{"faulty_code": "for x in range(5):\n    print(x)\n\nprint('Missing colon')", "fixed_code": "for x in range(5):\n    print(x)\n\nprint('Missing colon')\n"}
{"faulty_code": "for i in range(len(arr)-1):\n    arr[i] = arr[i+1]\n    arr[i+1] = arr[i]\n", "fixed_code": "for i in range(len(arr)-1):\n    temp = arr[i+1]\n    arr[i], arr[i+1] = arr[i+1], temp\n"}
{"faulty_code": "s = 'Hello'\nprint(s[3])", "fixed_code": "s = 'Hello'\nprint(s[:4])"}
{"faulty_code": "if x == y:\n    print('Equal')\nif x != y:\n    print('Not Equal')", "fixed_code": "if x == y:\n    print('Equal')\n\nif x != y:\n    print('Not Equal')"}
{"faulty_code": "a = [1,2,3]\nb = [4,5,6]\nprint(a + b)", "fixed_code": "a = [1,2,3]\nb = [4,5,6]\nprint(a + b)"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[4])", "fixed_code": "my_list = [1,2,3]\ntry:\n    print(my_list[4])\nexcept IndexError:\n    print('Index out of range')\n"}
{"faulty_code": "a = [1,2,3]\nb = a[3]", "fixed_code": "a = [1,2,3]\nb = a[2]"}
{"faulty_code": "data = [{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25}]\nmax_age = max(data['age'])", "fixed_code": "data = [{'name': 'Alice', 'age': 30}, {'name': 'Bob', 'age': 25}]\nage = [person['age'] for person in data]\nmax_age = max(age)"}
{"faulty_code": "\"\nfor i in range(5):\n    print(i)\n\"\n\n", "fixed_code": "\"\nnumbers = [x**2 for x in range(10) if y == x]\nprint('Error: y not defined')\n\"\n"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i < len(list)-1:\n        print(list[i])\n    else:\n        break"}
{"faulty_code": "s = 'Hello\nWorld'\ntemp = s[:-1]", "fixed_code": "s = 'Hello\nWorld'\ntemp = s[:len(s)-1]"}
{"faulty_code": "for i in range(10)\n    print(i)", "fixed_code": "for i in range(10)\n    print(i+1)"}
{"faulty_code": "for i in range(10):\n    print(i*2)\n\n# This code is missing an 'else' clause after the loop.", "fixed_code": "for i in range(10):\n    print(i*2)\n\nelse:\n    print('Loop completed normally')\n"}
{"faulty_code": "lst = [1, 2]; print(lst[2])", "fixed_code": "lst = [1, 2]; if len(lst) > 2: print(lst[2]) else: print('Index out of range')"}
{"faulty_code": "for i in range(3):\n    print(i)", "fixed_code": "for i in range(3):\n    if i < len(list):\n        print(list[i])"}
{"faulty_code": "def calculate_average(numbers):\n    total = sum(numbers)\n    return total / len(numbers) * (100 if numbers else 0)", "fixed_code": "def calculate_average(numbers):\n    total = sum(numbers)\n    count = len(numbers)\n    if count == 0:\n        return 0\n    return (total / count) * 100"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)-1):\n    print(list[i])"}
{"faulty_code": "a = [1,2,3]\nprint(a[0])", "fixed_code": "a = [1,2,3]\nprint(a[-1])"}
{"faulty_code": "try:\n    print(1/0)\nexcept ZeroDivisionError:\n    print('Denominator is zero')", "fixed_code": "try:\n    print(1/0)\nexcept ZeroDivisionError as e:\n    print(f'Division by {e.value} is impossible')"}
{"faulty_code": "for i in range(5):\n    print('Hello')\n    print('World')", "fixed_code": "for i in range(5):\n    print('Hello')\n    print('World')"}
{"faulty_code": "for i in range(5):\n    print(i)\nprint('Loop ended at:', i+1)", "fixed_code": "for i in range(5):\n    print(i)\nprint('Loop ended at:', i)"}
{"faulty_code": "data = [(1, 'one'), (2, 'two'), (3, 'three')]\n\n# Attempting to access a non-existent index\nprint(data[5][0])", "fixed_code": "data = [(1, 'one'), (2, 'two'), (3, 'three')]\n\n# Accessing an existing index\nprint(data[4][0])"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')\n    print('How are you?', end='\\n')", "fixed_code": "def greet(name):\n    print(f'Hello, {name}!')\n    print('How are you?', end='\n')"}
{"faulty_code": "for i in range(5):\n    if i < 4:\n        print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "def greet(n):\n    for i in range(n+1):\n        print(i)", "fixed_code": "def greet(n):\n    for i in range(n):\n        print(i)"}
{"faulty_code": "lst = [1,2,3]\nfor i in range(5):\n    print(lst[i])", "fixed_code": "lst = [1,2,3]\nfor i in range(len(lst)):\n    print(lst[i])"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10, 20): print(i)"}
{"faulty_code": "try:\n    open('nonexistentfile.txt', 'r')\nexcept FileNotFoundError:\n    print('Failed to open file')", "fixed_code": "try:\n    file = open('nonexistentfile.txt', 'r')\nexcept FileNotFoundError as e:\n    print(f'Failed to open file: {e}')\nfinally:\n    file.close()"}
{"faulty_code": "print('Hello' 'World')", "fixed_code": "print('Hello' + ' World')"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')\n\n# This code has a logic error.", "fixed_code": "def greet(name):\n    return 'Hello, ' + name + '!'\n\n# The fixed version removes the unnecessary print statement and returns directly."}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\n# This code misses printing the last element (i=4) which would be 5.", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "import pandas as pd\n\ntry:\n  df = pd.read_csv('nonexistent_file.csv')\nexcept FileNotFoundError:\n  print('File not found!')", "fixed_code": "import pandas as pd\n\ntry:\n  df = pd.read_csv('nonexistent_file.csv', error_bad_lines=False)\nexcept FileNotFoundError:\n  print('File not found!')\nfinally:\n  print('Processing completed.')"}
{"faulty_code": "sum([i for i in range(10) if i > 5])", "fixed_code": "total = 0\nfor i in range(10):\n    if i > 5:\n        total += i\nprint(total)"}
{"faulty_code": ["short_snippet_with_error", "medium_snippet_with_error", "long_snippet_with_error"], "fixed_code": ["short_fixed", "medium_fixed", "long_fixed"]}
{"faulty_code": "def greet(name):\n    print('Hello', name)\n", "fixed_code": "def greet(name):\n    print('Hello', name)\n"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i < len(list):\n        print(list[i])"}
{"faulty_code": "for i in range(6):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "with open('file.txt', 'r') as f\n    f.write('new content')", "fixed_code": "with open('file.txt', 'rb') as f\n    f.write(b'new content')"}
{"faulty_code": "for x in range(10):\\n    print(x*2)\n# This code is syntactically correct but will produce a runtime error due to an off-by-one error.", "fixed_code": "for x in range(10):\\n    print(x*2)"}
{"faulty_code": "for i in range(len(arr)-1):\n    if arr[i] > arr[i+1]:\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n\n# This code sorts the array but has an off-by-one error", "fixed_code": "for i in range(len(arr)):\n    if i < len(arr)-1 and arr[i] > arr[i+1]:\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')", "fixed_code": "def greet(name):\n    print(f'Hello, {name}!')"}
{"faulty_code": "lst = [1, 2, 3]\nfor i in range(len(lst)):\n    print(lst[i+1])", "fixed_code": "my_list = [1, 2, 3]\nprint(my_list)"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[-2])", "fixed_code": "my_list = [1,2,3]\nprint(my_list[-1])"}
{"faulty_code": "for i in range(10):\n    print(i*2)\n\n# This loop prints even numbers up to 9*2=18, but misses 10*2=20 because range(10) stops at 9.", "fixed_code": "for i in range(11):\n    print(i*2)"}
{"faulty_code": "for i in range(10)\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "d = {'a': [1,2,3]}\nprint(d['apple'])", "fixed_code": "d = {'a': [1,2,3]}\nprint(d['a'])"}
{"faulty_code": "for i in range(6):\n    print(i)", "fixed_code": "for i in range(1,6):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i]+1)"}
{"faulty_code": "for i in range(5):\n    print(i+1)\nprint(6)", "fixed_code": "for i in range(6):\n    print(i)\nprint(6)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This loop prints from 1 to 11 instead of 1 to 10", "fixed_code": "for i in range(10, 11):\n    print(i)"}
{"faulty_code": "with open('file.txt', 'r') as f:\n    f.write('content')", "fixed_code": "import os\ntry:\n    with open('file.txt', 'r') as f:\n        f.write('content')\nexcept IOError:\n    print('File not found or permission denied')\nfinally:\n    os.close('all')"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(len(arr)-1):\n    arr[i] = arr[i+1]\n", "fixed_code": "for i in range(len(arr)-1):\n    arr[i+1] = arr[i]\n"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\n# This loop should iterate over numbers 0 through 4 inclusive.", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i-1])", "fixed_code": "for i in range(len(list)):\n    if i > 0:\n        print(list[i-1])\n"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10, 20):\n    print(i)"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(6): print(i)"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i], arr[i+1])", "fixed_code": "for i in range(len(arr)-1):\n    print(arr[i], arr[i+1])"}
{"faulty_code": ["print(s[5:])", "def greet(name):\n    return f\"Hello, {name}!\"\ngreet(3)", "a = [1]\ndef func():\n    a.append(2)\nfunc()\nprint(a[0])"], "fixed_code": ["print(s[4:])", "def greet(name):\n    return f\"Hello, {name}!\"\ngreet('John)", "a = [1]\ndef func():\n    a.append(2)\nfunc()\np = a[0] if a else None"]}
{"faulty_code": "try:\n    open('nonexistentfile.txt')\nexcept FileNotFoundError:\n    print('File not found')", "fixed_code": "try:\n    open('nonexistentfile.txt', 'r')\nexcept FileNotFoundError as e:\n    print(f'Error: {e}')\nexcept Exception as e:\n    print(f'Unexpected error: {e}')"}
{"faulty_code": "arr = [1,2,3]\ni=0\nwhile i < len(arr):\n    print(arr[i+1])", "fixed_code": "arr = [1,2,3]\ni=0\nwhile i < len(arr)-1:\n    print(arr[i+1])"}
{"faulty_code": "s = 'abcdefghijklmnopqrstuvwxyz'; print(s[0:3])", "fixed_code": "s = 'abcdefghijklmnopqrstuvwxyz'; print(s[:3])"}
{"faulty_code": "for i in range(10):\n    print(i)\nprint(\"Loop ended\")\n\nmy_list = [1,2,3]\nfor i in range(len(my_list)):\n    print(my_list[i])\nprint(my_list[5])", "fixed_code": "for i in range(len(my_list) + 1):\n    if i < len(my_list):\n        print(my_list[i])\n    else:\n        print(\"Index out of bounds\")\nprint(\"Loop ended\")"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)\n\nprint('Missing last element')", "fixed_code": "for i in range(5):\n    print(i)\n\nprint('Missing last element')\n\n# Add the last element to complete the loop"}
{"faulty_code": "def faulty_function(n):\n    for i in range(n-1):\n        print(i+1)", "fixed_code": "def fixed_function(n):\n    for i in range(n-1):\n        print(i + 1)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "my_list = [1, 2, 3]\nmy_list.append(4)\nprint(my_list)", "fixed_code": "my_list = [1, 2, 3]\nmy_list.append(4)\nprint(my_list)"}
{"faulty_code": "for i in range(5): print(arr[i])", "fixed_code": "for i in range(len(arr)): print(arr[i])"}
{"faulty_code": "try:\n    x = int(input())\nexcept ValueError:\n    print('Please enter a valid number')", "fixed_code": "try:\n    x = int(input())\nexcept ValueError as e:\n    print(f'Invalid input: {e}')\n"}
{"faulty_code": "for i in range(10):\n    print(i*2)\n\n# This code is incorrect because it doesn't collect user input properly.", "fixed_code": "for i in range(10):\n    num = int(input('Enter a number: '))\n    print(num*i)"}
{"faulty_code": "for i in range(10\n1):\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(len(arr)):\n    if arr[i] == 'a':\n        break", "fixed_code": "for i in range(len(arr)):\n    if arr[i] == 'a' and i < len(arr):\n        break"}
{"faulty_code": "try:\n    x = int(input('Enter a number: '))\nexcept ValueError:\n    print('Please enter a valid integer')", "fixed_code": "try:\n    x = int(input('Enter a number: '))\nexcept ValueError as e:\n    print(f'Invalid input: {e}')\nexcept KeyboardInterrupt:\n    print('Operation cancelled')"}
{"faulty_code": "while i < 10:\n    print(i)\n", "fixed_code": "i = 0\nwhile i < 10:\n    print(i)\n    i += 1\n"}
{"faulty_code": "try:\n    f = open('nonexistentfile.txt', 'r')\nexcept FileNotFoundError:\n    print('File not found')\nprint('Failed to read file')", "fixed_code": "try:\n    with open('nonexistentfile.txt', 'r') as f:\n        print('Successfully read file')\nexcept FileNotFoundError:\n    print('File not found')\nfinally:\n    print('Finished handling the file operation')"}
{"faulty_code": "my_list = [1,2,3]; print(my_list[5])", "fixed_code": "my_list = [1,2,3]; print(my_list[-1])"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "try:\n    x = int(input('Enter a number: '))\nexcept ValueError:\n    print('Please enter a valid integer')", "fixed_code": "try:\n    x = int(input('Enter a number: '))\nexcept ValueError as e:\n    print(f'Invalid input: {e}')\nexcept Exception as e:\n    print(f'An unexpected error occurred: {e}')\nfinally:\n    print('Operation completed.')"}
{"faulty_code": "a = [1, 2, 3]\nb = a + [4,5,6]\nprint(b)", "fixed_code": "a = [1, 2, 3]\nb = a.copy() + [4,5,6]\nprint(b)"}
{"faulty_code": "x = [1,2]\nprint(x[3])", "fixed_code": "x = [1,2]\nprint(x[1])"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "nums = [1,2,3]\nnums.append(4)\nprint(nums)", "fixed_code": "nums = [1,2,3]\nnums.append(4)\nprint(nums)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(len(list)):\n    if list[i] == target:\n        return i\nelse:\n    return -1", "fixed_code": "def find_index(lst, target):\n    for i in range(len(lst)):\n        if lst[i] == target:\n            return i\n    return -1"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[0])", "fixed_code": "my_list = [1,2,3]\nprint(my_list[0])"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\nprint('Hello')", "fixed_code": "for i in range(5):\n    print(i+1)\n\nprint('Hello')"}
{"faulty_code": "a = [i for i in range(5) if i % 2 == 0]\nb = sum(a)\nprint(b)", "fixed_code": "a = list(filter(lambda x: x%2==0, range(5)))\nb = sum(a)\nprint(b)"}
{"faulty_code": "my_list = [1,2,3]\nmy_list[3] = 4", "fixed_code": "my_list = [1,2,3]\nprint(my_list[3])"}
{"faulty_code": "a = 5\nb = 6", "fixed_code": "a = 5; b = 6"}
{"faulty_code": "a = [1,2,3]\na[4]", "fixed_code": "for i in range(4):\n    a.append(i)"}
{"faulty_code": "a = [1,2,3]\nb = a[0:2]\nc = b[::-1]\nd = c[0:1]", "fixed_code": "a = [1,2,3]\nb = a[:2]\nc = b[::-1]\nd = c[:1]"}
{"faulty_code": "def greet(name):\n    return 'Hello, ' + name * 2\n\n# Bug: Incorrect string multiplication usage\nreturn greet('Alice')", "fixed_code": "def greet(name):\n    return 'Hello, ' + name + ' twice'\n\ngreet('Alice')"}
{"faulty_code": "s = 'hello'; print(s[2:])", "fixed_code": "s = 'hello'; print(s[2:])"}
{"faulty_code": "a = [1,2,3]\nb.append(4)\nc.pop(0)", "fixed_code": "a = [1,2,3]\na.append(4)\na.pop(0)"}
{"faulty_code": "import os\n\ndef process_file(file_path):\n    try:\n        with open(file_path, 'r') as f:\n            content = f.read()\n            print(content)\n    except FileNotFoundError:\n        print(\"File not found.\")", "fixed_code": "import os\n\ndef process_file(file_path):\n    try:\n        with open(file_path, 'r') as f:\n            content = f.read()\n            print(content)\n    except FileNotFoundError:\n        print(\"File not found.\")"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[3])", "fixed_code": "my_list = [1,2,3]\nprint(my_list[2])"}
{"faulty_code": "for i in range(5):\n    print(i)\nprint('Loop ended')", "fixed_code": "for i in range(4):\n    print(i)\nprint('Loop ended')\n", "faulty_code_2": "print(len(True))", "fixed_code_2": "print((True).size)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This loop will run indefinitely because it doesn't have a proper termination condition.", "fixed_code": "for i in range(10):\n    print(i+1)"}
{"faulty_code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1) + n", "fixed_code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)"}
{"faulty_code": "try:\n    open('nonexistentfile.txt', 'r')\nexcept FileNotFoundError\n", "fixed_code": "try:\n    open('nonexistentfile.txt', 'r')\nexcept FileNotFoundError as e:\n    print(f\"File not found: {e}\")\nexcept IOError as e:\n    print(f\"Error accessing file: {e}\")\nexcept Exception as e:\n    print(f\"Unexpected error occurred: {e}\")\nfinally:\n    pass\n"}
{"faulty_code": "for i in range(len(arr)-1):\n    arr[i], arr[i+1] = arr[i+1], arr[i]\n\n# This loop misses the last element because of off-by-one error", "fixed_code": "for i in range(len(arr)):\n    if i < len(arr)-1:\n        arr[i], arr[i+1] = arr[i+1], arr[i]\n\n# The loop now correctly compares and swaps all adjacent elements"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    if i == 4:\n        break", "fixed_code": "for i in range(5):\n    pass"}
{"faulty_code": "nums = [1,2,3]\nnums.pop(0)", "fixed_code": "nums.pop(0)\nnums = [1,2,3]"}
{"faulty_code": "import os\nos.path.join('..', 'data.csv')", "fixed_code": "import os; print(os.path.join('\\', '..', 'data.csv'))"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "s = 'hello'; print(s[2:3])", "fixed_code": "s = 'hello'; print(s[2:])"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "x = [1,2,3]\ny = x.append(4)", "fixed_code": "x = [1,2,3]\ny = x + [4]"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(4):\n    print(i+2)"}
{"faulty_code": "n = int(input())\nfor i in range(n + 1):\n    print(i)", "fixed_code": "n = int(input())\nfor i in range(n):\n    print(i)"}
{"faulty_code": "nums = [1,2,3]\nlargest = max(nums[0], nums[1], nums[2])", "fixed_code": "nums = [1,2,3]\nlargest = max(nums)"}
{"faulty_code": "for i in range(6):\n    print(i)", "fixed_code": "for i in range(3):\n    print(i)"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')\n    return\n", "fixed_code": "def greet(name):\n    print(f'Hello, {name}!')\n    return\n"}
{"faulty_code": "for i in range(len(numbers)-1):\n    print(numbers[i])", "fixed_code": "for i in range(len(numbers)):\n    print(numbers[i])"}
{"faulty_code": "x = [1,2,3]\nx[0] = x[0] + 1", "fixed_code": "x = [1,2,3]\nx[0] += 1"}
{"faulty_code": "for i in range(len(list)):\n    if list[i] == 'a':\n        del list[i]\n\n# This code removes the first occurrence of 'a' from each iteration, which is incorrect because it modifies the list while iterating through it.", "fixed_code": "for i in range(len(list)):\n    if list[i] == 'a':\n        del list[i+1] if i < len(list)-1 else break\n"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10, 11):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\n# This loop runs from 0 to 4 inclusive but prints 1 to 5", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(10,20):\n    print(i)", "fixed_code": "for i in range(10,21):\n    print(i)"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')\n    return\n    print('Welcome!')", "fixed_code": "def greet(name):\n    print('Hello, ' + name + '!')\n    print('Welcome!')"}
{"faulty_code": "my_list = [1,2,3]\ntry:\n    my_list[-1] = 'four'\nexcept IndexError:\n    pass", "fixed_code": "my_list = [1,2,3]\ntry:\n    my_list[3] = 'four'\nexcept IndexError:\n    pass"}
{"faulty_code": "my_list = [1,2,3]; print(my_list[4])", "fixed_code": "my_list = [1,2,3]; print(my_list[3])"}
{"faulty_code": "for i in range(5,0):", "fixed_code": "for i in range(5,0,-1):"}
{"faulty_code": "a = [1,2,3]\nb.append(4)\nc = a.pop()\nprint(c)", "fixed_code": "a = [1,2,3]\nb.append(4)\nc = a.pop() + 4\nprint(c)"}
{"faulty_code": "import math\nmath.sqrt(-4)", "fixed_code": "import math; try:\n    print(math.sqrt(-4))\nexcept ValueError:\n    print('Cannot compute square root of a negative number')"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n", "fixed_code": "for i in range(10):\n    print(i+1)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": {"short": "for i in range(5):", "medium": "def greet(name):\n    return f\"Hello, {name}!\""}, "fixed_code": {"long": "def greet(name):\n    if not name:\n        return 'Hello!'\n    return f\"Hello, {name}!\""}}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(len(arr)-1):\n    if arr[i] > arr[i+1]:\n        arr[i],arr[i+1]=arr[i+1],arr[i]\n\n# This code sorts the array but has an off-by-one error", "fixed_code": "for i in range(len(arr)):\n    if arr[i] > arr[i+1]:\n        arr[i],arr[i+1]=arr[i+1],arr[i]"}
{"faulty_code": "def calculate_average(numbers):\n    sum = 0\n    for num in numbers:\n        sum += num\n    return sum / len(numbers)\n", "fixed_code": "def calculate_average(numbers):\n    total = 0\n    for num in numbers:\n        total += num\n    return total / len(numbers)"}
{"faulty_code": "...", "fixed_code": "..."}
{"faulty_code": "import pandas as pd\n\ndf = pd.DataFrame({'A': [1,2,3], 'B': ['a', 'b', 'c']})\n\ndf.iloc[0][0] = 5\n", "fixed_code": "import pandas as pd\n\ndf = pd.DataFrame({'A': [1,2,3], 'B': ['a', 'b', 'c']})\n\ndf.loc[0,'A'] = 5\n"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "s = [1,2,3]\ns.append(4)\nprint(s)", "fixed_code": "s = [1,2,3]\ns.append(4)\nprint(s)"}
{"faulty_code": "for i in range(5): print(i+1)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "for i in range(10)\nprint(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This code will run infinitely because it lacks a condition to break out of the loop.", "fixed_code": "for i in range(10):\n    if i >=5:\n        break\n    print(i+1)"}
{"faulty_code": "file_name = \"nonexistent_file.txt\"\nwith open(file_name, 'r') as f:\n    print(f.read())", "fixed_code": "try:\n    with open(file_name, 'r') as f:\n        print(f.read())\nexcept FileNotFoundError:\n    print(\"File not found.\")"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\n# Extra line added accidentally", "fixed_code": "for i in range(5):\n    print(i+1)\n\n"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10, 2, -1):\n    print(i)"}
{"faulty_code": "for i in range(3):\n    print(i+1)\n", "fixed_code": "for i in range(3):\n    print(i)\n"}
{"faulty_code": "n = int(input('Enter a number between 1 and 5: '))\nif n == 0:\n    print('Invalid input')", "fixed_code": "n = int(input('Enter a number between 1 and 5: '))\nif not (1 <= n <= 5):\n    print('Invalid input')"}
{"faulty_code": ["print('Hello, world!')", "for i in range(10):\n    print(i)", "def greet(name): return 'Hello, {}!'.format(name)"], "fixed_code": ["print('Hello, world!')", "for i in range(10):\n    print(i)", "def greet(name): return f'Hello, {name}!'"]}
{"faulty_code": "numbers = [1,2,3]\nnumbers.pop(1)\nprint(numbers[1])", "fixed_code": "numbers = [1,2,3]\npopped = numbers.pop(1)\nprint(popped)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(10, -1, -2):\n    print(i)", "fixed_code": "for i in range(10, -1, -2):\n    print(i)"}
{"faulty_code": "s = 'Hello, world!'; print(s[5])", "fixed_code": "s = 'Hello, world!'; print(s[len(s)-1])"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This code has an off-by-one error in the loop range.", "fixed_code": "for i in range(10, 20):\n    print(i)"}
{"faulty_code": "numbers = [1,2,3]\nnew_numbers = [x for x in numbers if x%2 == 0] * 3\nprint(new_numbers)", "fixed_code": "numbers = [1,2,3]\nnew_numbers = [x for x in numbers if x % 2 == 0] * 3\nprint(new_numbers)"}
{"faulty_code": "for i in range(3):\n    print(numbers[i])", "fixed_code": "for idx, num in enumerate(numbers):\n    print(f\"Index {idx}: {num}\")"}
{"faulty_code": "def my_func(lst):\n    for i in range(len(lst)-1):\n        print(lst[i])", "fixed_code": "def my_func(lst):\n    for i in range(len(lst)):\n        print(lst[i])"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10)\nin    print(i)"}
{"faulty_code": "arr = [1,2];\nprint(arr[1])", "fixed_code": "arr = [1,2];\nprint(arr[0])"}
{"faulty_code": ["print('Hello, world!')", "for i in range(3): print(i)", "while n > 1: n = n // 2"], "fixed_code": ["print('Hello, world!')", "for i in range(3): print(i)", "n = int(n // 2)"]}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "a = [1,2,3]\na[3] = 4", "fixed_code": "a = [1,2,3]\na.append(4)"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10, 20):\n    print(i)"}
{"faulty_code": "for i in range(len(s)-1):", "fixed_code": "for i in range(len(s)):"}
{"faulty_code": "for i in range(0,5):\n    print(i)", "fixed_code": "for i in range(1,6):\n    print(i)"}
{"faulty_code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n", "fixed_code": "def factorial(n):\n    if n <= 0:\n        return 1\n    else:\n        return n * factorial(n - 1)"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n", "fixed_code": "for i in range(5):\n    print(i+1)\n"}
{"faulty_code": "for i in range(len(list)-1): print(list[i])", "fixed_code": "for i in range(len(list)): print(list[i])"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "def my_func(x): return x > 5", "fixed_code": "def my_func(x): return x > 5"}
{"faulty_code": "print([x for x in range(5) if x < 4])", "fixed_code": "print([x for x in range(5) if x <=4])"}
{"faulty_code": "a = [1,2,3]\na[5]", "fixed_code": "a = [1,2,3]\nprint(a[2])"}
{"faulty_code": "for i in range(10):\\n    print(i*2)\n", "fixed_code": "for i in range(10):\n    print(i*2)"}
{"faulty_code": "for i in lst:\n    print(i)", "fixed_code": "if len(lst) == 0:\n    return\nfor i in lst:\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)\n\nprint('Loop completed')", "fixed_code": "for i in range(10):\n    print(i)\n\nprint('Loop completed')\n"}
{"faulty_code": "a = 5\nprint(b)", "fixed_code": "a = 5\nb = 6\nprint(b)"}
{"faulty_code": "my_list = [1,2,3]\nint(my_list)", "fixed_code": "my_list = [1,2,3]\nif isinstance(my_list, list):\n    print(int(my_list))\nelse:\n    print('Not a list')"}
{"faulty_code": "def calculate_grades(grades): \\\n    total = sum(grades)\n    average = total / len(grades)\n    return average", "fixed_code": "def calculate_grades(grades):\n    total = sum(grades)\n    average = total / len(grades)\n    return average"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i < len(list)-1:\n        print(list[i])\n"}
{"faulty_code": "for i in range(10)\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "s = \"Hello\nWorld\"\nprint(s)", "fixed_code": "s = 'Hello\\nWorld'\nprint(s)"}
{"faulty_code": "for i in range(10): print(i+1)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(10): print(i+1)\n\n# This code skips the number 10 because of an off-by-one error.", "fixed_code": "for i in range(10): print(i+1)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "def greet():\n    for i in range(3):\n        print(\"Hello\")", "fixed_code": "def greet():\n    for i in range(3):\n        print(\"Hello\")"}
{"faulty_code": "i = 0\nwhile i < 10:\n    print(i)\ni += 2", "fixed_code": "i = 0\nwhile i <= 9:\n    print(i)\ni += 2"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[2])", "fixed_code": "my_list = [1,2,3]\nprint(my_list[2])"}
{"faulty_code": "a = [1,2,3]\nb = a[0:2]\nprint(b[-1:])", "fixed_code": "a = [1,2,3]\nb = a[:2]\nprint(b[-1:])"}
{"faulty_code": "def greet(name):\n    return name[0] if len(name) > 0 else None", "fixed_code": "def greet(name):\n    if len(name) == 0:\n        return None\n    return name[0]"}
{"faulty_code": "def divide_numbers(a, b):\n    return a / b\n\ndivide_numbers(10, 0)", "fixed_code": "def divide_numbers(a, b):\n    if b == 0:\n        return float('inf')\n    else:\n        return a / b\n\ndivide_numbers(10, 0)"}
{"faulty_code": "for i in range(10):<br/>\n    print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(1,5):\n    print(i)", "fixed_code": "for i in range(0,5):\n    print(i)"}
{"faulty_code": "for i in range(0,5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[2])", "fixed_code": "my_list = [1,2,3]\nprint(my_list[2])"}
{"faulty_code": "for i in range(5):", "fixed_code": "for i in range(6):"}
{"faulty_code": "for i in range(3):\n    print(i+1)", "fixed_code": "for i in range(3):\n    print(i)"}
{"faulty_code": "len(lst).append(5)", "fixed_code": "lst.append(5)"}
{"faulty_code": "my_list = []\nmy_list[0] = 'hello'", "fixed_code": "my_list = ['hello']"}
{"faulty_code": "try:\n    print(1/0)\nexcept ZeroDivisionError:\n    print('Denominator is zero')", "fixed_code": "try:\n    print(1/0)\nexcept ZeroDivisionError as e:\n    print(f'Division by {e.value} is impossible')\n"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i-1)"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(len(arr)):\n    if arr[i] == target:\n        print('Found')\n        break", "fixed_code": "for i in range(len(arr)):\n    if arr[i] == target:\n        print('Found')\n        break"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This is a medium-length example with an off-by-one error.", "fixed_code": "for i in range(10):\n    print(i+2)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    print(arr[i])"}
{"faulty_code": "import sys\n\ntry:\n    file = open('data.txt', 'r')\n    print(file.read())\nexcept FileNotFoundError:\n    print('File not found')", "fixed_code": "import sys\n\ntry:\n    file = open('data.txt', 'r')\n    print(file.read())\nexcept FileNotFoundError as e:\n    print(f'Error: {e}')\nexcept Exception as e:\n    print(f'Unexpected error: {e}')"}
{"faulty_code": "print('Hello') + input().strip()", "fixed_code": "print('Hello') + input().strip()\n# Fixed: Added newline for clarity"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(3): print(i)", "fixed_code": "for i in range(3): print(i+1)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This code has an off-by-one error in the loop.", "fixed_code": "for i in range(10):\n    print(i)\n"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)-1):\n    print(list[i])"}
{"faulty_code": "for i in range(1, n):\n    print(i)", "fixed_code": "for i in range(n):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "a = [1,2,3]\nb = a[5]", "fixed_code": "a = [1,2,3]\nb = a[3]"}
{"faulty_code": "for i in range(10):\n    print(i+1)\nprint('Loop completed')", "fixed_code": "for i in range(10):\n    print(i+1)\nprint('Loop completed', end='\\nLoop finished')\n"}
{"faulty_code": "old_list = [1, 2, 3]\nnew_list = old_list.append(4)", "fixed_code": "old_list = [1, 2, 3]\nnew_list = old_list + [4]"}
{"faulty_code": "sum([x for x in range(10) if x%2==1])", "fixed_code": "sum(x for x in range(10) if x%2==1)"}
{"faulty_code": "for i in range(5):", "fixed_code": "for i in range(5):"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\nprint('Loop completed')", "fixed_code": "for i in range(10):\n    print(i+1)\nprint('Loop completed', end='\\nLoop finished')\n"}
{"faulty_code": "x = 5\nprint(x + y)", "fixed_code": "x = 5\ny = 10\nprint(x + y)"}
{"faulty_code": "for i in range(3):\n    print(i)", "fixed_code": "for i in range(3,7):\n    print(i)"}
{"faulty_code": "a = [1,2,3]\nb = a[0:2]\nc = b[::-1]", "fixed_code": "a = [1,2,3]\nb = a[0:2]\nc = b[::-1]"}
{"faulty_code": "for i in range(len(arr)-1):\n    arr[i] = arr[i+1]\n\n# This loop misses the last element of the array", "fixed_code": "for i in range(len(arr)):\n    if i < len(arr)-1:\n        arr[i] = arr[i+1]\n"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[0])", "fixed_code": "my_list = [1,2,3]\nprint(my_list[1])"}
{"faulty_code": "for i in range(10):\n    print(i**2)\n\ntry:\n    print(some_var / 0)\nexcept:\n    print('Division by zero')", "fixed_code": "for i in range(11):\n    print(i**2)\n\ntry:\n    print(some_var / 0)\nexcept ZeroDivisionError as e:\n    print(f'Division by zero: {e}')\nexcept Exception as e:\n    print('An error occurred')"}
{"faulty_code": "import numpy as np\n\na = np.array([[1,2,3],[4,5,6]])\nhorizontal_edges = a[1:] - a[:-1]\nvertical_edges = a[:,1:] - a[:,:-1]", "fixed_code": "import numpy as np\n\na = np.array([[1,2,3],[4,5,6]])\nhorizontal_edges = np.diff(a, axis=0)\nvertical_edges = np.diff(a, axis=1)"}
{"faulty_code": "s = 'Hello, world\\nThis is a multi-line string\\nwith embedded commas'\nprint(s)", "fixed_code": "s = \"Hello, world\nThis is a multi-line string\nwith embedded commas\"\nprint(s)"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(len(list)):\n    list[i] = something", "fixed_code": "for i in range(len(list) - 1):\n    list[i] = something"}
{"faulty_code": "for i in range(len(list)):\n    if list[i] == target:\n        break", "fixed_code": "for i in range(len(list)):\n    if list[i] == target:\n        break"}
{"faulty_code": "def greet(name):\n    print(\"Hello, \" + name);\nfixed_code: greet(5)", "fixed_code": "def greet(name):\n    print(\"Hello, \" + name);\nfixed_code: def greet(name): print(\"Hello, \" + str(name))"}
{"faulty_code": "def calculate_average(numbers):\n    return sum(numbers)/len(numbers)", "fixed_code": "def calculate_average(numbers):\n    if not numbers or all(n == 0 for n in numbers):\n        return None\n    return sum(numbers)/len(numbers)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(20):\n    print(i)\n", "fixed_code": "for i in range(25):\n    print(i)\n"}
{"faulty_code": "my_list = [1,2,3]\nmy_tuple = ([4,5,6],)\nprint(my_tuple[0][1])", "fixed_code": "my_list = [1,2,3]\nmy_tuple = (4,5,6,)\np = my_tuple[0][1]"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This loop prints from 1 to 11 instead of 1 to 10", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": ["short code snippet", "medium code snippet", "long code snippet"], "fixed_code": ["fixed short code", "fixed medium code", "fixed long code"]}
{"faulty_code": "a = [1,2,3]\na[5] = 'x'", "fixed_code": "a = [1,2,3]"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "s = \"Hello{}\"\nprint(s.format())", "fixed_code": "s = \"Hello{}\"\nprint(s.format('World'))"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(10):\n    print(i+1)\nprint('Loop ended')", "fixed_code": "for i in range(10):\n    print(i+1)\nprint(f'Loop ended after {i} iterations')"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "def outer_func(x):\n    def inner_func(y):\n        print(z)\n\nouter_func(5)", "fixed_code": "def outer_func(x, z):\n    def inner_func(y):\n        print(z)\n\nouter_func(5, 'test)"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i < len(list):\n        print(list[i])"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "a = [1,2,3]\nb = a[4]", "fixed_code": "a = [1,2,3]\nprint(a[4] if len(a)>4 else '')"}
{"faulty_code": "for i in range(5)\n    print(i)", "fixed_code": "for i in range(0,5)\n    print(i)"}
{"faulty_code": ["l = [1,2,3]\nprint(l[4])", "d = {'a':1}\ndel d['b']", "f = open('nonexistent.txt', 'r')\nprint(f)"], "fixed_code": ["l = [1,2,3]\nprint(l[2])", "d = {'a':1}\nif 'b' in d:\ndel d['b']", "try:\n    f = open('nonexistent.txt', 'r')\nexcept FileNotFoundError:\n    print('File not found')\nelse:\n    print(f)"]}
{"faulty_code": "with open('test.txt', 'r') as f:\n    f.read()", "fixed_code": "with open('test.txt', 'rb') as f:\n    f seeking 0\n    data = f.read()\n    print(data.decode())"}
{"faulty_code": "for i in range(10):\n    print(i*2)\n\n# Off-by-one error: should use range(5) instead of range(10)\n", "fixed_code": "for i in range(5):\n    print(i*2)"}
{"faulty_code": "for i in range(10):\n    print('The value of i is',i)", "fixed_code": "for i in range(10):\n    print('The value of i is',i)"}
{"faulty_code": "fruits = ['apple', 'banana', 'cherry']; for i, fruit in enumerate(fruits):\n    print(i)", "fixed_code": "fruits = ['apple', 'banana', 'cherry']; for start, i, fruit in enumerate(fruits, start=0):\n    print(i)"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)-1+1):\n    print(list[i])"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(2,10):", "fixed_code": "for i in range(2,10,1):"}
{"faulty_code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)", "fixed_code": "def factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n - 1)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(len(a)):\n    print(a[i])", "fixed_code": "for i in range(len(a)):\n    print(a[i])"}
{"faulty_code": "for i in range(10):<br/>\n    print(i)", "fixed_code": "for i in range(10):<br/>\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\nprint(i)", "fixed_code": "for i in range(10):\n    print(i+1)\nprint(i+1)"}
{"faulty_code": "for i in range(5):\n    print(i+1)\nprint(i)", "fixed_code": "for i in range(5):\n    print(i+1)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "a = [1,2,3]\nb = a\nprint(b[0])", "fixed_code": "a = [1,2,3]\nb = a.copy()\nprint(b[0])"}
{"faulty_code": "def my_func():\n    print(x)\n\nmy_func()", "fixed_code": "def my_func(x=0):\n    print(x)\n\nmy_func()"}
{"faulty_code": "print('Hello, world!')\n\nnums = [1,2,3]\nsum_nums = sum(nums)\n# Missing closing parenthesis\n", "fixed_code": "print('Hello, world!')\n\nnums = [1,2,3]\nsum_nums = sum(nums)\nsum_total = sum(nums) + 5"}
{"faulty_code": "total = price + 10", "fixed_code": "total = price * 1.10"}
{"faulty_code": "for x in [1,2,3]:\n    print(x*2)", "fixed_code": "for i, x in enumerate([1,2,3]):\n    print(i, x)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(5): print(i+1)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "while True:\n    print('Infinite loop!')", "fixed_code": "while True:\n    print('Infinite loop!')\n    break"}
{"faulty_code": "for i in range(10)\n    print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "import os\nos.path.join('..', 'data')", "fixed_code": "import os\nos.path.join(os.getcwd(), '..', 'data')"}
{"faulty_code": "a = 0.1 + 0.2\nif a == 0.3:\n    print(\"Equal\")", "fixed_code": "a = round(0.1 + 0.2, 1)\nif abs(a - 0.3) < 1e-9:\n    print(\"Equal\")"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i + 1)"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "my_list = [1, 2, 3]\nindex = len(my_list)-1", "fixed_code": "my_list = [1, 2, 3]\nindex = index if index >=0 else None"}
{"faulty_code": "for i in range(len(list)):\n    if list[i] == 'a':\n        del list[i]\n\n# This removes all elements, not just those equal to 'a'\n", "fixed_code": "for i in range(len(list)):\n    if list[i] == 'a' and i < len(list)-1:\n        del list[i]\n\n# Now only elements equal to 'a' are removed"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "lst = [1,2,3]; del lst[0]; print(lst[2])", "fixed_code": "lst = [1,2,3]; del lst[0]; print(lst[1])"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "def my_function(lst):\n    for i in range(len(lst)):\n        if lst[i] > lst[i+1]:\n            # do something", "fixed_code": "def my_function(lst):\n    for i in range(len(lst)-1):\n        if lst[i] > lst[i+1]:\n            # do something"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n", "fixed_code": "for i in range(10):\n    print(i)\n"}
{"faulty_code": "while i < len(list):\n    print(list[i])\n", "fixed_code": "while i < len(list):\n    print(list[i])\n"}
{"faulty_code": "try:\n    a = int(input('Enter a number: '))\nexcept ValueError:\n    print('Please enter a valid integer')", "fixed_code": "try:\n    a = int(input('Enter a number: '))\nexcept ValueError as e:\n    print('Please enter a valid integer', file=e)\nexcept KeyboardInterrupt:\n    print('Operation cancelled by user')"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "my_list = [1,2,3]\nnew_list = list(my_list)\nprint(len(new_list))", "fixed_code": "my_list = [1,2,3]\nnew_list = my_list.copy()\nprint(len(new_list))"}
{"faulty_code": "print('Hello, world!')\n\nprint('Hello, world!')", "fixed_code": "print('Hello, world!')\nprint('Hello, world!')"}
{"faulty_code": "for i in range(5): print(i+1)\n", "fixed_code": "for i in range(5): print(i+1)\n"}
{"faulty_code": "for i in range(len(nums)-1):\n    print(nums[i])", "fixed_code": "for i in range(len(nums)):\n    print(nums[i])"}
{"faulty_code": "for i in range(len(arr)-1):\n    arr[i],arr[i+1]=arr[i+1],arr[i]\narr.sort()\nprint('Array sorted correctly')", "fixed_code": "for i in range(len(arr)-1):\n    arr[i],arr[i+1]=arr[i+1],arr[i]\n# No need to sort as the swap is already in place\nprint('Array was already sorted correctly')"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(11):\n    print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "import os\n\nwith open('large_file.txt', 'rb') as f:\n    data = f.read(500000)", "fixed_code": "import os\n\nwith open('large_file.txt', 'rb') as f:\n    while True:\n        chunk = f.read(1024)\n        if not chunk:\n            break\n        process(chunk)"}
{"faulty_code": "my_list = [1,2,3]\nindex = my_list[2]\nprint(index)", "fixed_code": "my_list = [1,2,3]\nindex = my_list[-1]\nprint(index)"}
{"faulty_code": "my_list = [1,2]; print(my_list[3])", "fixed_code": "my_list = [1,2]; print(my_list[2])"}
{"faulty_code": "print(5 + \"Hello\")", "fixed_code": "print(str(5) + \"Hello\")"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name", "fixed_code": "def greet(name):\n    print('Hello, ' + name)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This code misses the first iteration by one\n", "fixed_code": "for i in range(10, 20):\n    print(i-9)\n"}
{"faulty_code": "for i in range(len(list)+1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i < len(list)-1:\n        print(list[i])\n"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)-1):\n    print(list[i])"}
{"faulty_code": "for i in range(len([])):\n    print(i)", "fixed_code": "for i in range(len([])):\n    pass"}
{"faulty_code": "a = [1,2,3]\nb = a[4]", "fixed_code": "a = [1,2,3]\nb = a[4] if len(a)>4 else []"}
{"faulty_code": "a = [1,2,3]\na[5]", "fixed_code": "a = [1,2,3]\na[4]"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "def greet():\n    print('Hello, world!')", "fixed_code": "def greet():\n    print('Hello, world!')"}
{"faulty_code": "for i in range(len(lst)-1):\n    print(lst[i])", "fixed_code": "for i in range(len(lst)-1):\n    print(lst[i+1])"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i < len(list)-1:\n        print(list[i])"}
{"faulty_code": "with open('data/file.txt', 'rb') as f:\n    f.write('New content')", "fixed_code": "with open('data/file.txt', 'r+b') as f:\n    f.write(b'New content')"}
{"faulty_code": "print('Hello, world!')", "fixed_code": "print(\\'Hello, world!\\')"}
{"faulty_code": "for i in range(len(nums)-1):\n    print(nums[i])", "fixed_code": "for i in range(len(nums)-1):\n    print(nums[i+1])"}
{"faulty_code": "def factorial(n): return n * factorial(n-1) + 1", "fixed_code": "def factorial(n): return n * factorial(n - 1) if n > 0 else 1"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": ["for i in range(len(s))", "s = s + 'test'", "sum(x for x in [])"], "fixed_code": ["for i in range(len(s)-1)", "s = 'test' if s is None else s", "sum((x,) for x in ())"]}
{"faulty_code": "a = [1,2,3]\nb.sort()\nprint(a)", "fixed_code": "a = [1,2,3]\na.sort()\nprint(a)"}
{"faulty_code": ["for i in range(2,5):", "    print(i)", "print('The sum is', sum(range(2,5)))"], "fixed_code": ["for i in range(1,5):", "    print(i)", "print('The sum is', sum(range(1,5)))"]}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i < len(list)-1:\n        print(list[i])\n\n# OR \n\nfor i in range(len(list)-1):\n    print(list[i])"}
{"faulty_code": "def my_function():\n    global x\n    print(x)\nmy_function()", "fixed_code": "def my_function():\n    global x\n    x = 5\n    print(x)\nmy_function()"}
{"faulty_code": "a = [1,2,3]\nb = a[0:2]\nc = b[::-1]", "fixed_code": "a = [1,2,3]\nb = a[0:2][::-1]"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(len(list)):\n    if list[i] == 'element':\n        print('Found element')", "fixed_code": "for i in range(len(list)):\n    if list[i] == 'element':\n        print(f'Found element at index {i}')"}
{"faulty_code": "print('Hello, world!'\n)", "fixed_code": "print('Hello, world!')"}
{"faulty_code": "def greet():\n    print('Hello, world!')", "fixed_code": "def greet():\n    print('Hello, world!')"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10, 20): print(i)"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')\n    print('This is inside the function')", "fixed_code": "def greet(name):\n    print('Hello, ' + name + '!')\n    return None"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)\nlst = [10,20]\nprint(lst[i])", "fixed_code": "for i in range(len(lst)):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i * 2)\n\ntry:\n    x = int(input('Enter a number'))\nexcept ValueError:\n    print(\"Invalid input\")", "fixed_code": "for i in range(5):\n    print(i * 2 + 1)\n\ntry:\n    x = int(input('Enter a number'))\nexcept ValueError as e:\n    print(f\"Invalid input: {e}\")"}
{"faulty_code": "for i in range(10)\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "import csv\n\nwith open('data.csv', 'r') as csvfile:\n    reader = csv.reader(csvfile, delimiter=',')\n    for row in reader:\n        if isinstance(row[0], int):\n            print('Int:', row)\n        else:\n            print('Str:', row)", "fixed_code": "import csv\n\nwith open('data.csv', 'r') as csvfile:\n    reader = csv.reader(csvfile, delimiter=',')\n    for row in reader:\n        if isinstance(row[0], int):\n            print('Int:', row)\n        else:\n            print('Str:', row)"}
{"faulty_code": "for i in range(10): print(i*2)", "fixed_code": "for i in range(10): print(i*2)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(4):\n    print(i)"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "my_list = [10, 20, 30]\nfor i in range(len(my_list)):\n    my_list[i] = my_list[i+1]", "fixed_code": "my_list = [10, 20, 30]\nfor i in range(len(my_list) - 1):\n    my_list[i] = my_list[i+1]"}
{"faulty_code": "numbers = [1, 2, 3]\nnums = numbers.copy()\nprint('Numbers:', nums)", "fixed_code": "numbers = [1, 2, 3]\nnumbers_copy = numbers.copy()\nprint('Numbers:', numbers_copy)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\nprint('Loop ended')", "fixed_code": "for i in range(10):\n    print(i+1)\nprint('Loop ended')\n"}
{"faulty_code": "lst = [1,2,3,4,5]; print(lst[9])", "fixed_code": "lst = [1,2,3,4,5]; print(lst[-1] or lst[len(lst)-1])"}
{"faulty_code": "while True:\n    print('Hello')", "fixed_code": "while True:\n    print('Hello')\n    break"}
{"faulty_code": "for i in range(len(list)):\n    list.pop(i)", "fixed_code": "for i in range(len(list)-1):\n    list.pop(i)"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')", "fixed_code": "def greet(name):\n    print(f'Hello, {name}!')"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)-1):\n    print(list[i])"}
{"faulty_code": "for i in range(10): print(i+1)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This loop prints numbers from 1 to 10 inclusive, but the index starts at 0. The intended behavior was to print numbers from 1 to 10.", "fixed_code": "for i in range(10, 11):\n    print(i)"}
{"faulty_code": "print('Hello, world!')\n\n", "fixed_code": "print('Hello, world!')"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This code has an off-by-one error. It should be 'range(10)' to loop from 0 to 9.", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "lst = [1,2,3]; print(lst[-10])", "fixed_code": "lst = [1,2,3]; print(lst[3])"}
{"faulty_code": "for i in range(10): print(i); print(\"Loop ended\")", "fixed_code": "for i in range(10): print(i); print(\"Loop ended\")"}
{"faulty_code": "for i in range(5):\n    if i == 4:\n        print(i)", "fixed_code": "for i in range(5):\n    if i < 5:\n        print(i)"}
{"faulty_code": "print('Hello, World')", "fixed_code": "print('Hello, World')"}
{"faulty_code": "for i in range(10):\n    print(i)\n\nprint('Loop completed')", "fixed_code": "for i in range(10):\n    print(i)\n\nprint('Loop completed after 10 iterations')\n"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "numbers = [1,2,3]\nsum = 0\nfor i in range(len(numbers)):\n    sum += numbers[i] * (i+1)", "fixed_code": "numbers = [1,2,3]\nsum = 0\nfor i in range(len(numbers)):\n    sum += numbers[i] * (i+1)"}
{"faulty_code": "try:\n    with open('nonexistent.txt', 'r') as f:\n        pass\nexcept FileNotFoundError:\n    print(\"File not found\")", "fixed_code": "try:\n    if os.path.exists('nonexistent.txt'):\n        with open('nonexistent.txt', 'r') as f:\n            pass\n    else:\n        print(\"File not found\")\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")"}
{"faulty_code": "a = [1,2]; print(a[3])", "fixed_code": "a = [1,2,3,4]; print(a[3])"}
{"faulty_code": "for i in range(10):\n    print(i", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "yield 1\nyield 2", "fixed_code": "yield from (1, 2)"}
{"faulty_code": "for i in range(len(arr)-1):\n    arr[i], arr[i+1] = arr[i+1], arr[i]\n\nswap = arr[0]\narr[0] = arr[-1]\narr[-1] = swap", "fixed_code": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n\nswap = arr[0]\narr[0] = arr[-1]\narr[-1] = swap"}
{"faulty_code": "for i in range(3):\\n    print(i)", "fixed_code": "for i in range(3):\\n    print(i)"}
{"faulty_code": "print('Hello, world!')", "fixed_code": "print('Hello, world!')"}
{"faulty_code": "for x in lst:\n    if x is 2:\n        print('Found')", "fixed_code": "for x in lst:\n    if x in [2]:\n        print('Found')"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    if i == 4:\n        print(i)"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    if i < len(arr)-1:\n        print(arr[i])\n\n# Alternatively, a more concise version:\nfor i in range(len(arr)):\n    print(arr[i] if i != len(arr)-1 else None)"}
{"faulty_code": "with open('data.txt', 'r') as f:\n    f.write('content')\n    f.write('more content')", "fixed_code": "with open('data.txt', 'r+') as f:\n    f.write('content')\n    f.write('more content')\n    f.close()"}
{"faulty_code": "for i in range(len(numbers)-1):\n    print(numbers[i])", "fixed_code": "for i in range(len(numbers)-1):\n    print(numbers[i+1])"}
{"faulty_code": "for i in range(0,6,2):\n    print(i)", "fixed_code": "for i in range(1,6,2):\n    print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "if x > y: print('x is greater than y')", "fixed_code": "if x > y:\n    print('x is greater than y')"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)-1):\n    print(list[i])"}
{"faulty_code": "for i in range(5):\n    print(i)\nprint(i+1)\n\n# Medium length: A list comprehension with a logical error\nmy_list = [x for x in range(10) if x%2==0]\nprint(my_list[0])\n\n# Long length: A function with variable name and logic errors\ndef calculate_average(numbers):\n    sum_numbers = 0\n    count = 0\n    for num in numbers:\n        sum_numbers += num\n        count +=1\n    if count ==0:\n        return None\n    else:\n        average = sum_numbers / count\n        print(average)\n", "fixed_code": "for i in range(5):\n    print(i)\nprint(i)\n\n# Medium length: Corrected list comprehension\nmy_list = [x for x in range(10) if x%2==0]\nprint(my_list[0])\n\n# Long length: Fixed variable names and logic\ndef calculate_average(numbers):\n    sum_numbers = 0\n    count = len(numbers)\n    for num in numbers:\n        sum_numbers += num\n    if count ==0:\n        return None\n    else:\n        average = sum_numbers / count\n        print(average)"}
{"faulty_code": "for i in range(5):\n    print(i)\nprint(i+1)", "fixed_code": "for i in range(5):\n    print(i)\nprint(i)"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')\n    return\n", "fixed_code": "def greet(name):\n    print(f'Hello, {name}!')\n    return\n"}
{"faulty_code": "s = input().strip()\nprint(s.split())", "fixed_code": "s = input().strip()\nprint(s.split(' '))"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "def my_func():\n    x = [1,2,3]\n    return x[-1], x[0], x[1:]", "fixed_code": "def my_func():\n    x = [1,2,3]\n    return x[-1], x[0], x[1:]"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    print(arr[i])"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "if x > 0:\n    print('Positive')", "fixed_code": "if x > 0:\n    print('Positive')\n"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[4])", "fixed_code": "my_list = [1,2,3]\nif 4 < len(my_list):\n    print(my_list[4])\nelse:\n    print(\"Index out of range\")"}
{"faulty_code": "for i in range(5):\n    print(lst[i])", "fixed_code": "lst = [1,2,3]\nfor i in range(len(lst)):\n    print(lst[i])"}
{"faulty_code": "for i in range(len(list)-1):\n    list[i], list[i+1] = list[i+1], list[i]\nlist.sort()", "fixed_code": "for i in range(len(list)):\n    if i < len(list) - 1:\n        list[i], list[i+1] = list[i+1], list[i]\nlist.sort()"}
{"faulty_code": "for i in range(len(list)-2):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(len(arr)-1):\n    arr[i], arr[i+1] = arr[i+1], arr[i]\n\nprint('Sorted array:', arr)", "fixed_code": "for i in range(len(arr)-1):\n    arr[i], arr[i+1] = arr[i+1], arr[i]\n\nprint('Sorted array:', arr)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "s = 'hello\nworld'; print(s)", "fixed_code": "s = 'hello\\nworld'; print(s)"}
{"faulty_code": "print('Hello')", "fixed_code": "print('Hello')"}
{"faulty_code": "for i in range(1, n):\n    print(i)", "fixed_code": "for i in range(n):\n    print(i)"}
{"faulty_code": "for i in range(4): print(i)\n\ns = 'Hello'; s[5:6]\n\na = [1,2]; b = a; a.append(3); print(a[0],b[2])", "fixed_code": "for i in range(5):\n    print(i)\n\ns = 'Hello'; print(s[5:6])\n\nlst = [1,2]; lst_copy = lst; lst.append(3); print(lst[0],lst_copy[2])"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "with open('test.txt', 'rb') as f: f.write(b'Hello, world!')", "fixed_code": "with open('test.txt', 'wb') as f: f.write(b'Hello, world!')"}
{"faulty_code": "a = 5\nprint(a + b)", "fixed_code": "a = 5\nb = 10\nprint(a + b)"}
{"faulty_code": "s = input().strip()\nif s == '':\n    print('Enter a valid string')\nelse:\n    print(s[0].upper())", "fixed_code": "s = input().strip()\nif not s:\n    print('Enter a valid string')\nelse:\n    print(s[0].upper())"}
{"faulty_code": "for i in range(4):\n    print(i)", "fixed_code": "for i in range(3):\n    if i < 3:\n        print(i)"}
{"faulty_code": "a = [1,2,3]\nb = a.pop()\nprint(a)", "fixed_code": "a = [1,2,3]\nb = a.pop(0)\nprint(a)"}
{"faulty_code": "a = [1, 2, 3]\na[5] = 'x'", "fixed_code": "a = [1, 2, 3]\na[4] = 'x'"}
{"faulty_code": "for i in range(5):\n    print(i+1)\nprint('Next item')", "fixed_code": "for i in range(5):\n    print(i+1, end='\\n')\nprint('Next item', end='\\n')"}
{"faulty_code": "lst = [1,2,3];\nfixed_code = lst[:-1]", "fixed_code": "lst = [1,2,3];\nfixed_code = lst[:-1]"}
{"faulty_code": "for i in range(10):\n    print(i*2)\n\n# Faulty because it prints even numbers only", "fixed_code": "for i in range(10):\n    print(i*2)\n\n# Fixed code correctly prints all multiples of 2"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\nprint('The loop ran for 4 times')", "fixed_code": "for i in range(5):\n    print(i+1)\n\nprint('The loop ran for 5 times')"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "a = [1,2,3]\nb = [4,5,6]\na + b", "fixed_code": "a = [1,2,3]\nb = [4,5,6]\nprint(a + b)"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "numbers = [1,2,3]\nfor num in numbers:\n    if num % 2 == 0:\n        del numbers[num]", "fixed_code": "numbers = [1,2,3]\nfor num in numbers:\n    if num % 2 == 0:\n        del numbers[-1]"}
{"faulty_code": "print('Hello, world!')\n\n", "fixed_code": "print('Hello, world!')\n"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    print(arr[i])"}
{"faulty_code": "for x in [5]:\n    print(x)", "fixed_code": "range(6)"}
{"faulty_code": "print('Hello, world!')", "fixed_code": "print('Hello, world!')"}
{"faulty_code": "my_tuple = (1, 2, 3);\n\nmy_tuple.append(4)", "fixed_code": "my_list = [1, 2, 3];\n\nmy_list.append(4)"}
{"faulty_code": "try:\n    open('nonexistentfile.txt', 'r')\nexcept FileNotFoundError:\n    print('File not found')", "fixed_code": "try:\n    if os.path.exists('nonexistentfile.txt') and os.path.isfile('nonexistentfile.txt'):\n        open('nonexistentfile.txt', 'r')\n    else:\n        print('File not found')\nexcept FileNotFoundError:\n    print('File not found')"}
{"faulty_code": "a = [1,2,3]\na[4] = 5", "fixed_code": "a = [1,2,3]\na.append(5)"}
{"faulty_code": "for i in range(len(arr)-1):\n    arr[i], arr[i+1] = arr[i+1], arr[i]\narr[-1]", "fixed_code": "for i in range(len(arr)-1):\n    arr[i], arr[i+1] = arr[i+1], arr[i]\narr.pop() if arr else None"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "counter = 0\nfor i in range(5):\n    print(counter)\n    counter +=1"}
{"faulty_code": "for i in range(5):\n    print(i)\n\nprint('The loop ran one extra time')", "fixed_code": "for i in range(5):\n    print(i)\n\nprint('The loop did not run an extra time')\n"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i+1)"}
{"faulty_code": "mylist = [1,2,3]\nindex = mylist[2:0:-1]", "fixed_code": "mylist = [1,2,3]\nindex = mylist[::-1]"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[4])", "fixed_code": "my_list = [1,2,3]\nprint(my_list[3])"}
{"faulty_code": "for i in range(len(lst)-1):\n    print(lst[i])", "fixed_code": "for i in range(len(lst)):\n    if i < len(lst)-1:\n        print(lst[i])\n\n# OR \n\nfor i in range(len(lst)-1):\n    print(lst[i])"}
{"faulty_code": "my_list = [1,2]; print(my_list[3])", "fixed_code": "their_list = [1,2]; print(their_list[3])"}
{"faulty_code": "import os\nos.path.join('folder', 'file.txt')", "fixed_code": "os.path.join('folder', 'file.txt')"}
{"faulty_code": "for i in range(6):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5+1): print(i)"}
{"faulty_code": "s = 'abc'; print(s[10])", "fixed_code": "s = 'abc'; if len(s) > 10: print(s[10]) else: print('Index out of range')"}
{"faulty_code": "for i in range(len(list)):\n    list[i] = list[i+1]\n    list[0] = list.pop(i)\n\nlist.insert(987654, 'element')", "fixed_code": "for i in range(len(list)-1):\n    list[i] = list[i+1]\n    list[0] = list.pop(i)\n\nlist.insert(987654, 'element)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n", "fixed_code": "for i in range(10, 11):\n    print(i)\n"}
{"faulty_code": "x = 5; print(x + 'Hello')", "fixed_code": "print(str(x) + 'Hello')"}
{"faulty_code": "a = [1,2,3]\nb = [4,5,6]\nsum_a = sum(a)\navg = sum_a / b", "fixed_code": "a = [1,2,3]\nb = [4,5,6]\navg = sum(a) / len(b)"}
{"faulty_code": "for i in range(10): print(i+1)\n", "fixed_code": "for i in range(10): print(i+2)\n"}
{"faulty_code": "try:\n    x = int(input('Enter a number: '))\nexcept ValueError:\n    print('Please enter a valid integer')\nexcept Exception as e:\n    print('An error occurred:', e)\n", "fixed_code": "try:\n    x = int(input('Enter a number: '))\nexcept ValueError:\n    print('Please enter a valid integer')\nexcept Exception as e:\n    print('An error occurred:', e)\n"}
{"faulty_code": "class MyClass:\n    def __init__(self, a, b):\n        self.c = a + b + c", "fixed_code": "class MyClass:\n    def __init__(self, a, b):\n        self.c = a + b"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(10)\nprint(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    print(arr[i])"}
{"faulty_code": "for i in range(10)\nprint(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "import os\nos.remove('test.txt t')", "fixed_code": "import os\nos.remove('test.txt')"}
{"faulty_code": "for i in range(10): print(i+1)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(1, len(prices)):\\n    if prices[i] > current_price: \\n        current_price = prices[i]", "fixed_code": "for i in range(len(prices)):\\n    if prices[i] > current_price: \\n        current_price = prices[i]"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    if i < len(arr)-1:\n        print(arr[i])\n"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "try:\n    open('nonexistentfile.txt')\nexcept:\n    print('File not found')", "fixed_code": "try:\n    if os.path.exists('nonexistentfile.txt'):\n        open('nonexistentfile.txt')\nexcept:\n    print('File not found')\n"}
{"faulty_code": "for i in range(len(list)+1): print(i)", "fixed_code": "for i in range(len(list)): print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n", "fixed_code": "for i in range(10):\n    print(i)\n"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n", "fixed_code": "for i in range(10):\n    print(i)\n"}
{"faulty_code": "a = [1]; b = [1]; if a is b: print(\"same object\") else: print(\"different objects\")", "fixed_code": "a = [1]; b = [1]; if a == b: print(\"same object\") else: print(\"different objects\")"}
{"faulty_code": "for i in range(5):\n    print(i)\n\n# This loop will run for i = 0 to 4 inclusive. However, if the list has only 3 elements, accessing index 4 will cause an error.", "fixed_code": "for i in range(len(list)):\n    print(i)"}
{"faulty_code": "import os\nos.path.exists('test.txt')", "fixed_code": "import os\nos.path.exists('test.txt')"}
{"faulty_code": "def greet(name):\n    print(f'Hello, {name}!')\n    print('Welcome to the club')", "fixed_code": "def greet(name):\n    print(f'Hello, {name}!')\n    print('Welcome to the club')\n    return"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i < len(list)-1:\n        print(list[i])"}
{"faulty_code": "for i in range(10):\\n    print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "if x == y:\n    print('Equal')\nelse:\n    print('Not Equal')", "fixed_code": "if x == y:\n    print('Equal')\nelse:\n    print('Not Equal')"}
{"faulty_code": "for i in range(len(lst)-1):\n    print(i, lst[i])", "fixed_code": "for i in range(len(lst)-1):\n    print(i, lst[i-1])"}
{"faulty_code": "print('Hello, world!')", "fixed_code": "import math\nprint(math.factorial(5))"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "n = 3\nprint(n + 5)", "fixed_code": "n = 3\nprint(n * 5)"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')", "fixed_code": "def greet(name):\n    print(f'Hello, {name}!')"}
{"faulty_code": "for i in range(len(s)-1): print(s[i])", "fixed_code": "for i in range(len(s)): print(s[i-1] if i>0 else s[0])"}
{"faulty_code": "for i in range(len(list)+1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "def my_func(a, b):\n    return a % b", "fixed_code": "def my_func(a, b):\n    if b == 0:\n        raise ValueError('Divisor cannot be zero')\n    return a % b\n    else:\n        return a // b"}
{"faulty_code": "def calculate_average(numbers):\n    total = sum(numbers)\n    count = len(numbers)\n    return total / count", "fixed_code": "def calculate_average(numbers):\n    if not numbers:\n        return 0\n    total = sum(numbers)\n    count = len(numbers)\n    return total / count"}
{"faulty_code": ["print('Hello, world!')", "for i in range(5): print(i)", "def factorial(n): return n * factorial(n-1)"], "fixed_code": ["print('Hello, world!')", "for i in range(5): print(i)", "def factorial(n): return 1 if n == 0 else n * factorial(n - 1)"]}
{"faulty_code": "for i in range(len(arr)):\n    if arr[i] % 2 == 0:\n        print('even')\n    else:\n        print('odd')", "fixed_code": "for i in range(len(arr)):\n    if arr[i] % 2 == 0:\n        print('even')\n    else:\n        print('odd')"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n", "fixed_code": "for i in range(10):\n    print(i)\n"}
{"faulty_code": "a = [1,2,3]\nb = a.pop()\na.remove(2)\n", "fixed_code": "a = [1,2,3]\nb = a.pop() or None\nif 2 in a:\n    a.remove(2)\n"}
{"faulty_code": "for i in range(len(arr)-1):\n    if arr[i] > arr[i+1]:\n        swap = arr[i]\n        arr[i] = arr[i+1]\n        arr[i+1] = swap", "fixed_code": "for i in range(len(arr)-1):\n    if arr[i] > arr[i+1]:\n        arr[i], arr[i+1] = arr[i+1], arr[i]"}
{"faulty_code": "a = [1,2,3]\nb = a\nprint(b[0])", "fixed_code": "a = [1,2,3]\nb = a.copy()\nprint(b[0])"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[5])", "fixed_code": "my_list = [1,2,3]\ntry:\n    print(my_list[5])\nexcept IndexError as e:\n    print(f'Index error: {e}')\n"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "try:\n    print(1/0)\nexcept ZeroDivisionError:\n    print('Denominator is zero')", "fixed_code": "try:\n    print(1/0)\nexcept ZeroDivisionError:\n    print('Denominator is zero')\nexcept Exception as e:\n    print(f'An error occurred: {e}')"}
{"faulty_code": "for i in range(len(str)): print(str[i])\n", "fixed_code": "s = input()\nfor i in range(len(s)+1): print(s[:i])"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(6): print(i)"}
{"faulty_code": "for i in range(10):<br/>\n    print(i)", "fixed_code": "for i in range(10)<br/>\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(10):\\n    print(i)", "fixed_code": "for i in range(10):\\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n", "fixed_code": "for i in range(10):\n    print(i)\n"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "if not list:\n    return\nfor i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "numbers = [1,2,3]\nnumbers[::-1]", "fixed_code": "reversed_numbers = numbers[::-1]"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(1,6):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10):\n    print(i+1)"}
{"faulty_code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\nprint(factorial(5))", "fixed_code": "def factorial(n):\n    if n < 0:\n        raise ValueError('Factorial not defined for negative numbers')\n    elif n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\nprint(factorial(5))"}
{"faulty_code": "my_list = [1, 2, 3]\nprint(my_list[5])", "fixed_code": "my_list = [1, 2, 3]\nif len(my_list) > 5:\n    print(my_list[5])\nelse:\n    print('Index out of range')"}
{"faulty_code": "import sys\nprint('Hello, world!')", "fixed_code": "import sys\nprint('Hello, world!')"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(1, 11):\n    print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\n# This code will not produce the expected output because it misses the last iteration.", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "a = [1,2,3]\nfor i in range(4):\n    print(a[i])", "fixed_code": "a = [1,2,3]\nfor i in range(len(a)):\n    print(a[i])"}
{"faulty_code": "a = [1,2,3]\nb = a.copy()\nc = b[::2]", "fixed_code": "a = [1,2,3]\nb = a.copy()[:2]\nc = b"}
{"faulty_code": "for i in range(10,20):\n    print(i)", "fixed_code": "for i in range(10,21):\n    print(i)"}
{"faulty_code": "for i in range(10)\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "my_list = [1,2,3]\nmy_list.reverse()\nprint(my_list[0])", "fixed_code": "my_list = [1,2,3]\nmy_list.reverse()\nprint(my_list[-1])"}
{"faulty_code": "import itertools\nfor i in range(5):\n    my_func = itertools.next(itertools.count())", "fixed_code": "import itertools\nfor i in range(5):\n    iterator = itertools.count()\n    try:\n        val = iterator.next()\n    except StopIteration:\n        pass"}
{"faulty_code": "lst = [1,2,3]\nprint(lst[0])", "fixed_code": "lst = [1,2,3]\nprint(lst[-1])"}
{"faulty_code": "a = [1,2,3]\nb.append(4)\na.pop(-1)", "fixed_code": "a = [1,2,3]\nb.append(4)\na.pop(-1)"}
{"faulty_code": "a = [1,2,3]\nb = [4,5,6]\nprint(a + b)", "fixed_code": "a = [1,2,3]\nb = [4,5,6]\nprint(a + b)"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[0])", "fixed_code": "my_list = [1,2,3]\nprint(my_list[0])"}
{"faulty_code": "def my_func(*args): print(args)", "fixed_code": "def my_func(*args): print(len(args))"}
{"faulty_code": "for i in range(len(list)):\n    if list[i] == 'a':\n        break\nelse:\n    print('Loop completed normally')", "fixed_code": "for i in range(len(list)-1):\n    if list[i] == 'a':\n        break\nelse:\n    print('Loop completed normally')"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(6): print(i)"}
{"faulty_code": "sum(x for x in 5 if x % 2 ==0)", "fixed_code": "nums = [1,3,5,7]; sum(x for x in nums if x%2==0)"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "a = [1,2,3]\nb.append(4)\nc = len(b)", "fixed_code": "a = [1,2,3]\nb.append(4)\nc = len(b) + 1"}
{"faulty_code": "print('Hello, world!')", "fixed_code": "print('Hello, world!', end='\n')\n"}
{"faulty_code": "...", "fixed_code": "..."}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "second faulty code", "fixed_code": "second fixed code"}
{"faulty_code": "for i in range(5):\n    print(i)\n\n# Comment\nprint(i+1)", "fixed_code": "for i in range(5):\n    print(i)\n\n# Comment\nprint(i)"}
{"faulty_code": "for i in range(10):\n    print(i)\nprint(i+1)", "fixed_code": "for i in range(10):\n    print(i)\nprint(i + 1)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": ["my_list = [1, 2, 3]\n\nreversed_list = my_list[::-1]", "for i in range(5): \n    print(i)\n\nprint('Missing value at index 4')", "\n\na = 0\nb = 0\nc = 0\n\nfor i in range(len(a)):\n    a[i] += b[i]\n    c += d[i]", "my_list = [1, 2, 3]\n\nreversed_list = my_list[::-1]", "for i in range(5): \n    print(i)\n\nprint('Missing value at index 4')", "\n\na = 0\nb = 0\nc = 0\n\nfor i in range(len(a)):\n    a[i] += b[i]\n    c += d[i]"], "fixed_code": ["my_list = [1, 2, 3]\n\nreversed_list = my_list[::-1]", "for i in range(5): \n    print(i)\n\nprint('Missing value at index 4')", "\n\na = 0\nb = 0\nc = 0\n\nfor i in range(len(a)):\n    a[i] += b[i]\n    c += d[i]", "my_list = [1, 2, 3]\n\nreversed_list = my_list[::-1]", "for i in range(5): \n    print(i)\n\nprint('Missing value at index 4')", "\n\na = 0\nb = 0\nc = 0\n\nfor i in range(len(a)):\n    a[i] += b[i]\n    c += d[i]"]}
{"faulty_code": "for i in range(5):\n    print(i)\n\nsum = sum(range(0,5))", "fixed_code": "for i in range(5):\n    print(i)\n\nsum = sum(range(1,6))"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "my_list = [1,2,3]\nmy_list['a'] = 4", "fixed_code": "my_list = [1,2,3]\nmy_list[0] = 4"}
{"faulty_code": "x = 5\nx = x + 1", "fixed_code": "x = 5\nx += 1"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[-1])", "fixed_code": "my_list = [1,2,3]\nprint(my_list[2])"}
{"faulty_code": "for i in range(10):\n    print(i)\n", "fixed_code": "for i in range(10, 20):\n    print(i)\n"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "try:\n    x = int(input('Enter a number: '))\nexcept ValueError:\n    print('Please enter a valid integer')", "fixed_code": "try:\n    x = int(input('Enter a number: '))\nexcept ValueError as e:\n    print(f'Invalid input: {e}')\nexcept Exception as e:\n    print(f'An unexpected error occurred: {e}')\n"}
{"faulty_code": "for n in range(5):\n    print(n)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "print('Hello, world!') + print('This is an error')", "fixed_code": "print('Hello, world!')\n\nprint('This is an error')"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This loop prints numbers from 2 to 11 instead of 1 to 10", "fixed_code": "for i in range(10):\n    print(i)\n\n# This loop correctly prints numbers from 0 to 9"}
{"faulty_code": "try:\n    print(1/0)\nexcept ZeroDivisionError:\n    print('Handled')", "fixed_code": "try:\n    print(1/0)\nexcept ZeroDivisionError as e:\n    print(f'Handled: {e}')\n"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i+1)"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "names = ['Alice', 'Bob']\nages = [25, 30]\nfor i in range(len(names)):\n    print(f'{names[i]} is {ages[i-1]} years old')", "fixed_code": "names = ['Alice', 'Bob']\nages = [25, 30]\nfor i in range(1, len(names)):\n    print(f'{names[i]} is {ages[i-1]} years old')"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    if i < 4:\n        print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)\nprint('Loop completed')", "fixed_code": "for i in range(10):\n    print(i)\nprint('Loop completed')\n"}
{"faulty_code": "x = [1,2,3]\nx[2].append(4)", "fixed_code": "x = [1,2,3]\nx[2].append(4)"}
{"faulty_code": "a = [1,2,3]\nb = [4,5,6]\nprint(a + b)", "fixed_code": "a = [1,2,3]\nb = [4,5,6]\nprint(a + b)"}
{"faulty_code": "for i in range(len(arr)-1):\n    arr[i] = arr[i+1]\n\n# This code misses the last element which is not included in the loop", "fixed_code": "for i in range(len(arr)):\n    if i < len(arr)-1:\n        arr[i] = arr[i+1]"}
{"faulty_code": "for i in range(3):\n    print(i)", "fixed_code": "for i in range(3):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "def greet(name):\n    return f\"Hello, {name}!\"", "fixed_code": "def greet(name):\n    return f'Hello, {name}!'\n\n# Note: Using string formatting with f-strings is more modern and avoids the need for concatenation."}
{"faulty_code": "for i in range(10)\n    print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)\n", "fixed_code": "for i in range(10):\n    print(i)\n"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# Extra line added\nprint(5)", "fixed_code": "for i in range(10):\n    print(i+1)"}
{"faulty_code": "for i in range(0,5):\n    print(i)", "fixed_code": "for i in range(1,6):\n    print(i)"}
{"faulty_code": "while True:\n    print('Waiting...')", "fixed_code": "count = 0\nwhile count < 10:\n    print(f'Iteration {count}')\n    count += 1"}
{"faulty_code": "import math\nsum = [1,2,3]\navg = sum / len(sum)", "fixed_code": "import math\nsum = [1,2,3]\navg = math.fsum(sum) / len(sum)"}
{"faulty_code": "for i in range(5, 0):\n    print(i)", "fixed_code": "for i in range(5, 0, -1):\n    print(i)"}
{"faulty_code": "for i in range(len(arr)-1):\n    arr[i] = arr[i+1]\n", "fixed_code": "for i in range(len(arr)-1):\n    arr[i+1] = arr[i]\n"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This loop goes from 0 to 9 inclusive, but prints up to 10. The bug is an off-by-one error.", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "a = [1,2,3]; print(a[1])", "fixed_code": "a = [1,2,3]; print(a[0])"}
{"faulty_code": "print('Hello, world')", "fixed_code": "print('Hello, world')"}
{"faulty_code": "for i in range(5):\n    print(i + a)", "fixed_code": "for i in range(5):\n    print(i + 1)"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')", "fixed_code": "def greet(name):\n    print(f'Hello, {name}!')"}
{"faulty_code": "my_list = [1, 2, 3]\nprint(my_list[9])", "fixed_code": "my_list = [1, 2, 3]\ntry:\n    print(my_list[9])\nexcept IndexError:\n    print('Index out of range')\n"}
{"faulty_code": "import socket\n\ns = socket.create_connection(('localhost', 8000))", "fixed_code": "import socket\n\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.connect(('localhost', 8000))"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "while True:\n    print('Hello')\n", "fixed_code": "while True:\n    print('Hello')\n    break\n"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\nprint('Loop completed')", "fixed_code": "for i in range(10):\n    print(i+1)\nprint('Loop completed', end='\\n')\n"}
{"faulty_code": "def outer_func():\n    def inner_func():\n        print(inner_func)", "fixed_code": "def outer_func():\n    def inner_func():\n        print(outer_func)"}
{"faulty_code": "try:\n    with open('nonexistent.txt', 'r') as f:\n        print(f.read())\nexcept FileNotFoundError:\n    print('File not found')", "fixed_code": "try:\n    with open('nonexistent.txt', 'r') as f:\n        print(f.read())\nexcept FileNotFoundError as e:\n    print(f'Error: {e}')\nexcept Exception as e:\n    print(f'Unexpected error: {e}')\nfinally:\n    print('Operation completed')\n"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10, 20):\n    print(i)"}
{"faulty_code": "my_list = [1,2,3]\nmy_list[-1] # This will raise an error as the list is empty", "fixed_code": "my_list = [1,2,3]\nif len(my_list) > 0:\n    print(my_list[-1])"}
{"faulty_code": ["for i in range(3): print(i)", "x = [1,2,3]\nprint(sum(x))", "if x > 0:\n    print('Positive')\nelse:\n    print('Negative')"], "fixed_code": ["for i in range(3): print(i)", "x = [1,2,3]\nprint(sum(x))", "if x > 0:\n    print('Positive')\nelse:\n    print('Negative')"]}
{"faulty_code": "students = ('Alice', 'Bob');\nprint(students[2])", "fixed_code": "students = ('Alice', 'Bob');\nprint(students[-1])"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    if i < len(arr)-1:\n        print(arr[i])\n"}
{"faulty_code": "for i in range(len(arr)):\n    print(arr[i])", "fixed_code": "for i, val in enumerate(arr):\n    print(val)"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "print('Hello' + ' ' + 'world')", "fixed_code": "print('Hello world')"}
{"faulty_code": ["for i in range(10):", "arr[5] where len(arr) ==4", "open('nonexistent.txt', 'r').read()"], "fixed_code": ["for i in range(9)", "if index < len(arr): print(arr[index])", "with open('nonexistent.txt', 'r') as f: try: f.read() except FileNotFoundError: pass"]}
{"faulty_code": "for i in range(len(arr)-1):", "fixed_code": "for i in range(len(arr)-1)+1:"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)\n", "fixed_code": "for i in range(10):\n    print(i)\n"}
{"faulty_code": "for x in range(5,10,2):\n    print(x)", "fixed_code": "for x in range(5,10,1):\n    print(x)"}
{"faulty_code": "result = []\nfor i in range(len(arr)):\n    result.append(arr[i])\nprint(result[-1])", "fixed_code": "result = []\nfor i in range(len(arr)):\n    result.append(arr[i])\nprint(result[-1])"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[-1])", "fixed_code": "my_list = [1,2,3]\nprint(my_list[0])"}
{"faulty_code": "for i in range(10)\n    print(i+1)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "while x < y:\\n    if condition:\n        do_something()", "fixed_code": "x = 0\\ny =5\\nwhile x < y:\\n    if condition:\\n        do_something(\\nx+1, y-1)\\n    x +=1\\ny -=1"}
{"faulty_code": "for i in range(len(nums)-1):\n    nums[i] = nums[i+1]\n", "fixed_code": "for i in range(len(nums)-1):\n    nums[i], nums[i+1] = nums[i+1], nums[i]\n"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i < len(list)-1:\n        print(list[i])\n    else:\n        break"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[-4])", "fixed_code": "my_list = [1,2,3]\nif -4 >= -(len(my_list)):\n    print('Index out of range')\nelse:\n    print(my_list[-4])"}
{"faulty_code": "my_list = [1,2,3]\nfor i in range(len(my_list)):\n    print(my_list[i])", "fixed_code": "my_list = [1,2,3]\nfor i in range(len(my_list)):\n    print(my_list[i])"}
{"faulty_code": ["for i in range(5):", "    print(i)", "print('Missing item')"], "fixed_code": ["for i in range(6):", "    print(i)", "print('All items processed')"]}
{"faulty_code": "for i in range(10)\n    print(i*2)\n\n# This code is missing the proper termination condition for the loop", "fixed_code": "for i in range(10)\n    if i < 5:\n        print(i*2)\n    else:\n        print(i*3)\n"}
{"faulty_code": "for i in range(10):<br>\n    print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(len(numbers)):\n    print(numbers[i])", "fixed_code": "for i in range(len(numbers)-1):\n    print(numbers[i])"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "s = 'hello'; print(s[5])", "fixed_code": "s = 'hello'; print(s[:6])"}
{"faulty_code": "for i in range(5):\n    print(i, outer_var)\n\nprint(outer_var)", "fixed_code": "for i in range(5):\n    inner_var = outer_var\n    print(i, inner_var)\n\nprint(outer_var)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "my_list = []\nmy_list[0] = 'hello'", "fixed_code": "my_list = []\ntry:\n    my_list[0] = 'hello'\nexcept IndexError:\n    print('List is empty, cannot modify it')\n"}
{"faulty_code": "for i in range(len(arr)):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    print(arr[i])"}
{"faulty_code": "for i in range(5):\n    print(i)\n", "fixed_code": "for i in range(6):\n    print(i)\n"}
{"faulty_code": "a = [1,2,3]\nb = a\nprint(b)", "fixed_code": "a = [1,2,3]\nb = a.copy()\nprint(b)"}
{"faulty_code": "a = [1,2,3]\nb = [4,5,6]\nprint(a + b)", "fixed_code": "a = [1,2,3]\nb = [4,5,6]\nprint(a + b)"}
{"faulty_code": "students = {'Alice': 'freshman', 'Bob': 'sophomore'}\nprint(students.get('Charlie'))", "fixed_code": "students = {'Alice': 'freshman', 'Bob': 'sophomore'}\nprint(students.get('Charlie', 'unknown'))"}
{"faulty_code": "a = [1, 2, 3]\nb = a[4]", "fixed_code": "a = [1, 2, 3]\nb = a[2]"}
{"faulty_code": "for i in range(len(s)-1): print(s[i])", "fixed_code": "for i in range(len(s)-1): print(s[i], s[len(s)-1])"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    total += i\nprint(total)", "fixed_code": "for i in range(5):\n    total += i\nprint(total)"}
{"faulty_code": "my_list = [1, 2, 3]\nmy_list[2] = 4\nprint(my_list)", "fixed_code": "my_list = [1, 2, 3]\nmy_list.append(4)\nprint(my_list)"}
{"faulty_code": "def greet(name, age):\n    print('Hello, ' + name + '!'),\n    print('You are ' + str(age) + ' years old')", "fixed_code": "def greet(name, age):\n    print('Hello, ' + name + '!')\n    print('You are ' + str(age) + ' years old')"}
{"faulty_code": "user_input = input().strip()\nif not user_input:\n    print('Please enter something')\nelse:\n    print('Invalid input')", "fixed_code": "user_input = input().strip()\nif not user_input:\n    print('Please enter something')\nelse:\n    print('Invalid input')"}
{"faulty_code": "print('Hello, world!')\n\n", "fixed_code": "print('Hello, world!')"}
{"faulty_code": "for i in range(6):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(10)\n    print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "print('Hello' + ' ' + 'world')", "fixed_code": "print('Hello'+' '+'world')"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "try:\n    with open('nonexistentfile.txt', 'r') as f:\n        f.read()\nexcept FileNotFoundError:\n    print('File not found')", "fixed_code": "try:\n    with open('nonexistentfile.txt', 'r', FileNotFoundError) as f:\n        f.read()\nexcept FileNotFoundError:\n    print('File not found')"}
{"faulty_code": ["print('Hello, world!')", "from math import sqrt\nn = int(input())\nprint(sqrt(n))", "\\n'.replace(r'\\\n', r'\n\\\\')"], "fixed_code": ["print('Hello, world!')", "import math\nn = int(input())\nprint(math.sqrt(n))", "\\n'.replace(r'\\n', r'\\\\')"]}
{"faulty_code": "lst = [1,2,3]; print(lst[4])", "fixed_code": "lst = [1,2,3]; print(lst[3])"}
{"faulty_code": "for i in range(10):\n    print(i)\n\nprint('Loop completed')", "fixed_code": "for i in range(10):\n    print(i)\n\nprint('Loop completed')\n"}
{"faulty_code": "a = [1,2,3]\nb = a[0:2]\nc = b[::-1]\nd = c[::2]", "fixed_code": "a = [1,2,3]\nb = a[0:2]\nc = b[::-1]\nd = c[::2]"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i < len(list)-1:\n        print(list[i])\n\n# OR \n\nfor i in range(len(list)-1):\n    print(list[i])"}
{"faulty_code": "for i in range(len(arr)-1):\n    arr[i], arr[i+1] = arr[i+1], arr[i]\n\n# This code sorts the array but has an off-by-one error. The loop should run from len(arr) instead of len(arr)-1.", "fixed_code": "for i in range(len(arr)):\n    arr[i], arr[i+1] = arr[i+1], arr[i]"}
{"faulty_code": "for i in range(len([])):\n    print(i)", "fixed_code": "if not len(lst):\n    continue\nfor i in range(len(lst)):\n    print(i)"}
{"faulty_code": "try:\n    print(math.sqrt(num))\nexcept ValueError:\n    print('Number is negative')", "fixed_code": "import math\n\ntry:\n    if num < 0:\n        print('Number is negative')\n    else:\n        print(math.sqrt(num))\nexcept ValueError as e:\n    print(f'Invalid value encountered: {e}')"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    if i < len(arr)-1:\n        print(arr[i])\n"}
{"faulty_code": "for i in range(0,5):\n    print(i)", "fixed_code": "for i in range(1,6):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\n# This code runs from 1 to 5 (inclusive) but prints 2 to 6 instead", "fixed_code": "for i in range(5, 10):\n    print(i)"}
{"faulty_code": ["short_snippet", "medium_snippet", "long_snippet"], "fixed_code": ["short_fixed", "medium_fixed", "long_fixed"]}
{"faulty_code": "with open('file.txt', 'r') as f:\n    print(f.read())", "fixed_code": "with open('file.txt', 'r') as f:\n    f.seek(0)\n    print(f.read())"}
{"faulty_code": "f = open('nonexistent.txt')", "fixed_code": "try:\n    f = open('nonexistent.txt')\nexcept FileNotFoundError:\n    print('File not found.')"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')\n    return\n    print('Welcome!')", "fixed_code": "def greet(name):\n    print('Hello, ' + name + '!')\n    print('Welcome!')"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(1, n):\n    print(i)", "fixed_code": "for i in range(n):\n    print(i)"}
{"faulty_code": "a = [1,2,3]\na[3] = 4", "fixed_code": "a = [1,2,3]\na.append(4)"}
{"faulty_code": "my_list = [1, 2]\nprint(my_list[2])", "fixed_code": "my_list = [1, 2, 3]\nprint(my_list[2])"}
{"faulty_code": "my_list = [1,2,3]\nmy_list[0] = 'a string'", "fixed_code": "my_list = ['a string', 2, 3]"}
{"faulty_code": "with open('file.txt') as f:\n    print(f.read())\nraise ValueError", "fixed_code": "with open('file.txt', newline=True) as f:\n    try:\n        print(f.read())\n    except IOError:\n        raise ValueError\n"}
{"faulty_code": ["print('Hello, world!')", "for i in range(5): print(i)", "def greet(name):\n    return f\"Hello, {name}!\""], "fixed_code": ["print('Hello, world!')", "for i in range(5): \n    print(i)", "def greet(name):\n    return f'Hello, {name}!'"]}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(1,5):\n    print(i)\n\na = [i for i in range(3)]\n    b = [j for j in range(3)]", "fixed_code": "for i in range(2,6):\n    print(i)\n\na = [i for i in range(3)]\n    b = [j for k in range(3)]"}
{"faulty_code": "for i in range(10)\n    print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(len(arr)-1):\n    arr[i] = arr[i+1]\n\n# This code misses the last element which is not included in the loop", "fixed_code": "for i in range(len(arr)-1):\n    arr[i] = arr[i+1]\n\n# The loop correctly iterates through all elements except the last one"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')", "fixed_code": "def greet(name):\n    print(f'Hello, {name}!')"}
{"faulty_code": "import csv\n\ndata = csv.reader([['Header1','Header2'], ['Row1Col1', 'Row1Col2']], delimiter='\\n')", "fixed_code": "import csv\n\ndata = csv.reader([['Header1','Header2'], ['Row1Col1', 'Row1Col2']], delimiter=',')"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(5):\n    print(i", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i, item in enumerate(list):\n    print(item)"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')", "fixed_code": "def greet(name):\n    print(f'Hello, {name}!')"}
{"faulty_code": "print('Hello' + 'World')", "fixed_code": "print('Hello' + 'World')"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')", "fixed_code": "def greet(name):\n    return f'Hello, {name}!'\n\n# This example demonstrates string formatting instead of concatenation."}
{"faulty_code": "my_list = [1,2,3]; print(my_list[5])", "fixed_code": "my_list = [1,2,3]; print(my_list[-1])"}
{"faulty_code": "def greet(nme):\n    print(\"Hello\", nme)\ngreet(\"Alice\")", "fixed_code": "def greet(name):\n    print(\"Hello\", name)\ngreet(\"Alice\")"}
{"faulty_code": "for i in range(10)\nprint(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    if i < len(list):\n        print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": ["lst = ['a', 'b']; print(lst.pop())", "nums = [x for x in range(10) if (x > 5 and y)]", "import threading; def even(): ...; def odd(): ...; t1 = threading.Thread(target=even); t2 = threading.Thread(target=odd); t1.start(); t2.start()"], "fixed_code": ["lst = ['a', 'b']; print(len(lst))", "nums = [x for x in range(10) if (x > 5)]", "import threading; def even(): ...; def odd(): ...; t1 = threading.Thread(target=even); t2 = threading.Thread(target=odd); t1.start(); t1.join(); t2.start()"]}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(0,5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(10): print(i+1)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(10)\n    print(i+1)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "for i in range(0, n):\n    print(i)", "fixed_code": "for i in range(1, n+1):\n    print(i)"}
{"faulty_code": "while True:\n    print('Hello')", "fixed_code": "while True:\n    print('Hello')\nbreak"}
{"faulty_code": "for i in range(10)\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "for i in range(len(arr)):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    print(arr[i])"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10, -1, -1): print(i)"}
{"faulty_code": "for i in range(len(arr)-1):\n    arr[i], arr[i+1] = arr[i+1], arr[i]", "fixed_code": "for i in range(len(arr)-1):\n    arr[i], arr[i+1] = arr[i+1], arr[i]\n\n# The code is already correct. No fix needed."}
{"faulty_code": "print('Hello, world''", "fixed_code": "print('Hello, world')"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "def my_func():\n    x = 10\n    print(x)\n    x", "fixed_code": "x = 10\ndef my_func():\n    print(x)"}
{"faulty_code": "for i in range(len(numbers)):\n    print(numbers[i])", "fixed_code": "for i in range(len(numbers)):\n    if i < len(numbers):\n        print(numbers[i])\n    else:\n        print('Index out of bounds')"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[5])", "fixed_code": "my_list = [1,2,3]\ntry:\n    print(my_list[5])\nexcept IndexError:\n    print('Index out of range')\n"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name", "fixed_code": "def greet(name):\n    return 'Hello, ' + name"}
{"faulty_code": "for i in range(6):\n    print(i-1)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)\n", "fixed_code": "for i in range(6):\n    print(i)\n"}
{"faulty_code": "for i in range(3):\n    print(i)\n\nprint('Loop ran an extra time!')", "fixed_code": "for i in range(3):\n    print(i)"}
{"faulty_code": "for i in range(5 print(i", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    print(arr[i])"}
{"faulty_code": "for i in range(10, -1):\n    print(i)", "fixed_code": "for i in range(10, -1, -1):\n    print(i)"}
{"faulty_code": "for i in range(5-1):\n    print(i)", "fixed_code": "for i in range(4):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This loop runs from 0 to 9, but prints i+1 which is 1 to 10. The intended behavior was to print numbers 0 to 9.", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(len(lst)):\n    print(lst[i-1])", "fixed_code": "for i in range(len(lst)):\n    print(lst[i-1])"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(6): print(i)"}
{"faulty_code": "a = [1,2,3]\nb = [4,5,6]\nprint(a + b)", "fixed_code": "a = [1,2,3]\nb = [4,5,6]\nprint(a + b)"}
{"faulty_code": "with open('data.txt', 'r') as f:\n\n", "fixed_code": "with open(r'data.txt', 'r') as f:\n\n"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i], arr[i+1])", "fixed_code": "for i in range(len(arr)-1):\n    print(arr[i], arr[i+1])"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "xrange(5) in a Python script", "fixed_code": "range(5) in a Python script"}
{"faulty_code": "my_list = [x for x in range(5) if x%2 ==0] print(my_list[3])", "fixed_code": "my_list = [x for x in range(5) if x%2 == 0]; print(my_list[3])"}
{"faulty_code": "for i in range(0,10):\n    print(i)\nprint('Missing item')", "fixed_code": "for i in range(0,10):\n    print(i)\nprint(range(0,10))\n"}
{"faulty_code": "for i in range(len(list)):\n    if list[i] == 'a':\n        del list[i]\n        break", "fixed_code": "for i in range(len(list)):\n    if list[i] == 'a':\n        del list[i]\n        continue\n    else:\n        continue"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(5)\n    print(i)", "fixed_code": "for i in range(5)\n    print(i)"}
{"faulty_code": "for i in range(len(list)):\n    if list[i] == 'a':\n        break", "fixed_code": "for i in range(len(list)-1):\n    if list[i] == 'a':\n        break"}
{"faulty_code": "for i in range(1,5):\n    print(i)", "fixed_code": "for i in range(2,6):\n    print(i)"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(len(numbers)):\n    if numbers[i] > current_max:\n        current_max = numbers[i]\n        print(current_max)", "fixed_code": "for i in range(len(numbers)):\n    if numbers[i] > current_max:\n        current_max = numbers[i]\n        print(current_max)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "print('Hello, world!')", "fixed_code": "print('Hello, world!')"}
{"faulty_code": "try:\n    f = open('nonexistentfile.txt', 'r')\nexcept FileNotFoundError:\n    print('File not found!')", "fixed_code": "try:\n    f = open('nonexistentfile.txt', 'r')\nexcept FileNotFoundError as e:\n    print(f'Error: {e}')"}
{"faulty_code": "print('Hello')", "fixed_code": "print('Hello')"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "a = [1,2,3]\nprint(a[-1])", "fixed_code": "a = [1,2,3]\ntry:\n    print(a[-1])\nexcept IndexError:\n    print('Index out of range')"}
{"faulty_code": "my_list = []\nprint(my_list[0])", "fixed_code": "my_list = [5]\nprint(my_list[0])"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "x = [1, 2]\ny = x[3]", "fixed_code": "x = [1, 2]\nif len(x) > y:\n    print('Index out of range')\nelse:\n    y = x[y]"}
{"faulty_code": "for i in range(len(list)): print(list[i])", "fixed_code": "for i in range(len(list)-1): print(list[i])"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    print(arr[i])"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(5)\n    print(i)"}
{"faulty_code": "while i < 10:\n    print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "a = [1, 2]\nb = [3,4]", "fixed_code": "a, b = [1,2], [3,4]"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i+1)"}
{"faulty_code": "with open('file.txt', 'rb') as f:\n    f.seek(0)\n    data = f.read()\n    print(data)", "fixed_code": "with open('file.txt', 'r') as f:\n    f.seek(0)\n    data = f.read()\n    print(data)"}
{"faulty_code": "for i in range(5):\n    print(i)\n\nprint('Loop completed')", "fixed_code": "for i in range(5):\n    print(i)\n\nprint('Loop completed')\n"}
{"faulty_code": "a = [1,2,3]; b = a[0]; c = (b,)", "fixed_code": "a = [1,2,3]; b = a[0]; c = [b,]"}
{"faulty_code": "for i in range(5):\\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "my_list = [1,2,3]\nfor i in range(len(my_list)):\n    my_list.append(i)", "fixed_code": "my_list = [1,2,3]\nfor i in range(len(my_list)):\n    my_list[i] += 1"}
{"faulty_code": "for i in range(10):\n    print(i ** 2)", "fixed_code": "for i in range(10):\n    print(i ** 2)"}
{"faulty_code": "for i in range(1, len(list)):\n    print(list[i-1])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "\"s = 'Hello'\\ns[0] = 'H'\"", "fixed_code": "\"s = list('Hello')\\ns[0] = 'H'\\nprint(''.join(s))\""}
{"faulty_code": "try:\n    raise ValueError('Test')\nexcept:\n    pass", "fixed_code": "try:\n    raise ValueError('Test')\nexcept ValueError:\n    print('Caught ValueError')"}
{"faulty_code": "i = 0\nwhile i < 5:\n    print(i)\n    i += 1", "fixed_code": "i = 0\nwhile i < 5:\n    print(i)\n    i += 1"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n", "fixed_code": "for i in range(10):\n    print(i)\n"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This code has an off-by-one error. It prints from 1 to 11 instead of 1 to 10.", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "my_list = [1,2]\nfor i in range(5):\n    print(my_list[i])", "fixed_code": "my_list = [1,2]\nfor i in range(len(my_list)):\n    print(my_list[i])"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(10): print(i+1)\n\n# This code misses printing the last value because of an off-by-one error", "fixed_code": "for i in range(10, 20): print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)\nprint(i+1)", "fixed_code": "for i in range(10):\n    print(i)\nprint(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This code has an off-by-one error. The loop should run from 0 to 9.", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)\nprint('Loop ended')", "fixed_code": "for i in range(5):\n    print(i+1)\nprint('Loop ended')\n"}
{"faulty_code": "for i in range(10)\n    print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(len(numbers)-1):\n    print(numbers[i])", "fixed_code": "for i in range(len(numbers)):\n    if i < len(numbers)-1:\n        print(numbers[i])\n\n# Or more simply:\nfor i in range(len(numbers)):\n    print(numbers[i])"}
{"faulty_code": "for i in range(10):\\n    print(i)", "fixed_code": "for i in range(11):\\n    print(i)"}
{"faulty_code": "for i in range(len(s)-1):\n    print(s[i])", "fixed_code": "for i in range(len(s)):\n    if i < len(s)-1:\n        print(s[i])\n\n# OR, more concisely:\n\nfor i in range(len(s)-1):\n    print(s[i])"}
{"faulty_code": "for i in range(4):", "fixed_code": "for i in range(len(list)):"}
{"faulty_code": "try:\n    open('nonexistentfile.txt', 'r')\nexcept FileNotFoundError\n", "fixed_code": "try:\n    with open('nonexistentfile.txt', 'r') as f:\n        pass\nexcept FileNotFoundError\n"}
{"faulty_code": "for i in range(10):\n    print(i)\n\n# Missing base case in recursive function", "fixed_code": "def fact(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * fact(n-1)\n\nfact(3)"}
{"faulty_code": "try:\n    open('nonexistentfile.txt', 'r')\nexcept FileNotFoundError:\n    print('File not found')", "fixed_code": "try:\n    try:\n        with open('nonexistentfile.txt', 'r') as f:\n            pass\n    except FileNotFoundError:\n        print('File not found')\nexcept Exception as e:\n    print(f'Error: {e}')"}
{"faulty_code": "print('Hello, world!')\n\n# This is a comment\n\nprint('Hello again, world!')", "fixed_code": "print('Hello, world!')\n\n# This is a comment\n\nprint('Hello again, world!')"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)-1):\n    print(list[i], end=' ')\n"}
{"faulty_code": "for i in range(5):\n    print(i*2)\n", "fixed_code": "for i in range(6):\n    print(i*2)\n"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "numbers = [1,2,3]\nsum = sum(numbers)\nprint(sum + numbers[0])", "fixed_code": "numbers = [1,2,3]\nsum = sum(numbers)\nprint(sum + numbers[0])"}
{"faulty_code": "lst = [1,2,3]\nlst += [4,5,6]", "fixed_code": "lst = [1,2,3]\nlst.extend([4,5,6])"}
{"faulty_code": "for i in range(len(list)):\n    list.append(i)", "fixed_code": "for i in range(len(list)-1):\n    list.append(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i >= len(list):\n        break\n    print(list[i])"}
{"faulty_code": "s = 'hello'; print(s[5])", "fixed_code": "s = 'hello'; if len(s) > 5: print(s[5]) else: print('Index out of range')"}
{"faulty_code": "for x in [1,2,3]:\n    print(x)", "fixed_code": "for i, x in enumerate([1,2,3]):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "a = [1,2,3]\nb = a[0] + a[1] + a[2]", "fixed_code": "a = [1,2,3]\nb = sum(a[:2])"}
{"faulty_code": ["if x > 5:\n", "    print('x is greater than 5')"], "fixed_code": ["if x >= 5:\n", "    print('x is greater than or equal to 5')\n"]}
{"faulty_code": "for i in range(len(list)-1):", "fixed_code": "for i in range(len(list)-1):"}
{"faulty_code": "try: open('nonexistentfile.txt').read() except IOError: print('File not found')", "fixed_code": "try:     with open('nonexistentfile.txt', 'rb') as f:         data = f.read() except FileNotFoundError:     print('File not found')"}
{"faulty_code": "a = 0.1 + 0.2\nb = 0.3\nif a == b:\n    print(\"Equal\")\nelse:\n    print(\"Not equal\")", "fixed_code": "a = 0.1 + 0.2\nb = 0.3\nepsilon = 1e-10\nif abs(a - b) < epsilon:\n    print(\"Equal within epsilon tolerance\")\nelse:\n    print(\"Not equal\")\n"}
{"faulty_code": "try:\n    print(1/0)\nexcept ZeroDivisionError:\n    print('Denominator is zero')\nexcept Exception as e:\n    print(f'Unexpected error: {e}')", "fixed_code": "try:\n    print(1/0)\nexcept ZeroDivisionError as e:\n    print('Denominator is zero')\nexcept Exception as e:\n    print(f'Unexpected error: {e}')"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "try:\n    open('nonexistentfile.txt', 'r')\nexcept FileNotFoundError\n    print('File not found')", "fixed_code": "try:\n    with open('nonexistentfile.txt', 'r') as f:\n        pass\nexcept FileNotFoundError\n    print('File not found')\n"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')\nname = 'Alice'\nprint(greet)", "fixed_code": "def greet(name):\n    return 'Hello, ' + name + '!'\nname = 'Alice'\ngreet_name = greet(name)\nprint(greet_name)"}
{"faulty_code": "for i in range(len(lst)+1):\n    print(lst[i])", "fixed_code": "for i in range(len(lst)):\n    print(lst[i])"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10+1):\n    print(i)"}
{"faulty_code": "user = {'name': 'Alice', 'age': 30}; print(user['nonexistent_key'])", "fixed_code": "user = {'name': 'Alice', 'age': 30}; print(user.get('nonexistent_key', 'Key not found'))"}
{"faulty_code": "a = [1,2,3]\nb.append(a[0])", "fixed_code": "a = [1,2,3]\nb.append(a[0])"}
{"faulty_code": "my_list = [1, 2, 3]\nprint(my_list[4])", "fixed_code": "my_list = [1, 2, 3]\nprint(my_list[3])"}
{"faulty_code": "sum([i for i in range(5) if i <4])", "fixed_code": "sum([i for i in range(5)])"}
{"faulty_code": "for i in range(len(numbers)):\n    print(numbers[i])", "fixed_code": "for i in range(len(numbers)-1):\n    print(numbers[i])"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n", "fixed_code": "for i in range(10):\n    print(i+1)\n"}
{"faulty_code": "n = int(input())\nsum_numbers = 0\nfor i in range(n):\n    sum_numbers += i\naverage = sum_numbers / n", "fixed_code": "n = int(input())\nsum_numbers = 0\nfor i in range(1, n+1):\n    sum_numbers += i\naverage = sum_numbers / n"}
{"faulty_code": "students = {'Alice': 'A', 'Bob': 'B'}\nfor name in students:\n    print(students[name], end='')", "fixed_code": "students = {'Alice': 'A', 'Bob': 'B'}\nfor name, grade in students.items():\n    print(grade, end='')"}
{"faulty_code": "my_list = [1, 2, 3]\nprint(list)", "fixed_code": "my_list = [1, 2, 3]\nprint(my_list)"}
{"faulty_code": "for i in range(len(numbers)): numbers[i] +=1", "fixed_code": "for i in range(len(numbers)): numbers[i+1] +=1"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i+2)"}
{"faulty_code": "for i in range(10):\n    if i == 5:\n        break\n    print(i)", "fixed_code": "for i, item in enumerate(range(10)):\n    if i == 5:\n        break\n    print(item)\n\n# or using zip:\nfor i, item in zip(range(10), None):\n    if i == 5:\n        break\n    print(item)"}
{"faulty_code": "for i in range(0,5,2):\n    print(i)", "fixed_code": "for i in range(0,6,2):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "def multiply(a,b):\n    for i in range(len(a)):\n        c[i] = a[i] * b[i]\n    return c", "fixed_code": "\ndef multiply(a, b):\n    c = [a[i] * b[i] for i in range(len(a))]\n    return c"}
{"faulty_code": "d = {'a':1,'a':2}\nprint(d['a'])", "fixed_code": "d = {'a':1}\np = d.get('a', 0)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "for i in range(1, n): print(i)", "fixed_code": "for i in range(n): print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n", "fixed_code": "for i in range(10):\n    print(i)\n"}
{"faulty_code": "for i in range(1, len(prices)):\n    print(prices[i-1], prices[i])", "fixed_code": "for i in range(len(prices)):\n    print(prices[i-1], prices[i])"}
{"faulty_code": "for i in range(3):\n    print(i+1)\n\nprint('The loop ended at',i)", "fixed_code": "for i in range(4):\n    print(i)\n\nprint('The loop ended at',i)"}
{"faulty_code": "for i in range(len(nums)):\n    if nums[i] > 5:\n        print('Found a large number')\n\nnums = [1,2,3]\nprint('The largest number is:', max(nums))", "fixed_code": "for i in range(len(nums)-1):\n    if nums[i] > 5:\n        print('Found a large number')\n\nnums = [1,2,3]\nprint('The largest number is:', max(nums))"}
{"faulty_code": "for i in range(10):\n    print(i*2)\n\n# This code is missing an indentation error.", "fixed_code": "for i in range(10):\n    print(i*2)"}
{"faulty_code": "for i in range(5)\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "user_input = input().strip()\npassword = user_input\nif password == 'secret':\n    print('Access granted!')\nelse:\n    print('Incorrect password.')", "fixed_code": "user_input = input().strip()\npassw = user_input\nif passw.lower() == 'secret':\n    print('Access granted!')\nelse:\n    print('Incorrect password.')"}
{"faulty_code": "for i in range(10-1):\n    print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\n# This loop runs from 0 to 4, so it actually prints 1 to 5\n# But if the intention was to run from 1 to 5, the range should be range(6)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    print(arr[i])"}
{"faulty_code": "for i in range(0,5):\n    print(i)", "fixed_code": "for i in range(1,6):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This loop prints numbers from 2 to 11 instead of 1 to 10", "fixed_code": "for i in range(10):\n    print(i)\n\n# The loop now correctly prints numbers from 0 to 9"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')\nname = 'Alice'\nprint(greet)", "fixed_code": "def greet(name):\n    print('Hello, ' + name + '!')\nname = 'Alice'\ngreet = greet('Alice')"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(0, len(arr)):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    print(arr[i])"}
{"faulty_code": "for i in range(10)\n    print(i)", "fixed_code": "for i in range(10, 20)\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "a = [1,2,3]\nb = a[0:2]\nc = b[::-1]\nd = c.append(4)\n", "fixed_code": "a = [1,2,3]\nb = a[:2]\nc = b[::-1]\nd = c + [4]"}
{"faulty_code": "print('Hello, world!')", "fixed_code": "print('Hello, world!')"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\n# This loop will print 1,2,3,4 but not 5 because of an off-by-one error.", "fixed_code": "for i in range(6):\n    print(i-1)"}
{"faulty_code": "def greet():\n    if name == \"Alice\":\n        print(\"Hello Alice!\")", "fixed_code": "def greet():\n    if name == \"Alice\":\n        print(\"Hello Alice!\")"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(5,10): print(i)"}
{"faulty_code": "try:\n    with open('nonexistentfile.txt', 'w') as f:\n        f.write('Hello')\nexcept IOError:\n    print('File not found!')", "fixed_code": "try:\n    with open('nonexistentfile.txt', 'w') as f:\n        f.write('Hello')\nexcept IOError as e:\n    print(f'Error: {e}')\n"}
{"faulty_code": "while True:\n    print('Hello')", "fixed_code": "while True:\n    print('Hello')\nbreak"}
{"faulty_code": "print('Hello, world!', end='\\n\\n')", "fixed_code": "print('Hello, world!', end='\n')"}
{"faulty_code": "for i in range(len(arr)-1): print(arr[i])", "fixed_code": "for i in range(len(arr)-1): print(arr[i+1])"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i < len(list):\n        print(list[i])\n"}
{"faulty_code": "x = [1,2,3]\nx[i+1] for i in range(len(x))", "fixed_code": "x = [1,2,3]\n[elem for pair in zip(x,x[1:])for elem in pair]"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(6): print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i+1)"}
{"faulty_code": "for i in range(10)\n    print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "my_list = [5,4,3,2,1]\nprint(my_list[-6])", "fixed_code": "my_list = [5,4,3,2,1]\ntry:\n    print(my_list[-6])\nexcept IndexError:\n    print('Index out of range')"}
{"faulty_code": ["my_list = [1, 2, 3]\nprint(my_list[5])", "numbers = [10, 20, 30]\nsorted_numbers = sorted(numbers)\nprint(sorted_numbers)", "\nfile = open('data.txt', 'r')\ncontent = file.read()\nprint(content)\nfile.close()\nfile = open('data.txt', 'r')", "my_dict = {'a': 1, 'b': 2}\nmy_list = [v for k, v in my_dict.items()]", "try:\n    x = int(input())\nexcept ValueError:\n    print('Please enter a valid number')", "import os\nos.remove('test_file.txt')", "\nstudents = ['Alice', 'Bob']\ngrades = {student: 0 for student in students}\nfor student in students:\n    grades[student] += 5", "my_list = [1, 2, 3]\nnew_list = []\nfor num in my_list:\n    new_list.append(num * 2)", "\nwith open('data.txt', 'r') as f:\n    content = f.read()\nprint(content)", "def greet(name):\n    print('Hello, ' + name)", "my_list = [1, 2, 3]\ntry:\n    print(my_list[5])\nexcept IndexError:\n    print('Index out of range')", "\nstudents = ['Alice', 'Bob']\ngrades = {student: 0 for student in students}\nfor i in range(len(students)):\n    grades[students[i]] += 5"], "fixed_code": ["my_list = [1, 2, 3]\nprint(my_list[4])", "numbers = [10, 20, 30]\nsorted_numbers = sorted(numbers)\nprint(sorted_numbers)", "\nfile = open('data.txt', 'r')\ncontent = file.read()\nprint(content)\nfile.close()", "my_dict = {'a': 1, 'b': 2}\nmy_list = [v for k, v in my_dict.items()]", "try:\n    x = int(input())\nexcept ValueError:\n    print('Please enter a valid number')", "import os\nos.remove('test_file.txt')", "\nstudents = ['Alice', 'Bob']\ngrades = {student: 0 for student in students}\nfor student in students:\n    grades[student] += 5", "my_list = [1, 2, 3]\nnew_list = []\nfor num in my_list:\n    new_list.append(num * 2)", "\nwith open('data.txt', 'r') as f:\n    content = f.read()\nprint(content)", "def greet(name):\n    print('Hello, ' + name)", "my_list = [1, 2, 3]\ntry:\n    print(my_list[5])\nexcept IndexError:\n    print('Index out of range')", "\nstudents = ['Alice', 'Bob']\ngrades = {student: 0 for student in students}\nfor i in range(len(students)):\n    grades[students[i]] += 5"]}
{"faulty_code": "print('Hello, world!')", "fixed_code": "print('Hello, world!')"}
{"faulty_code": "import sqlite3\n\nconn = None\n\ntry:\n    conn = sqlite3.connect('test.db')\n    cursor = conn.cursor()\n    cursor.execute('SELECT * FROM test_table')\nexcept sqlite3.OperationalError as oe:\n    print(f'Database error: {oe}')", "fixed_code": "import sqlite3\n\nconn = None\n\ntry:\n    conn = sqlite3.connect('test.db')\n    cursor = conn.cursor()\n    cursor.execute('SELECT * FROM test_table')\nexcept sqlite3.OperationalError as oe:\n    print(f'Database error: {oe}')\nfinally:\n    if conn is not None:\n        conn.close()\nprint('Database connection closed successfully')"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i+1)"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(len(list)):\n    print(i)"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(1,6): print(i)"}
{"faulty_code": "if x == y:\n    print('Equal')\nelse:\n    print('Not Equal')", "fixed_code": "if x == y:\n    print('Equal')\nelse:\n    print('Not Equal')"}
{"faulty_code": "for i in range(5)\n    print(i", "fixed_code": "for i in range(5)\n    print(i)"}
{"faulty_code": "print('Hello, world!')", "fixed_code": "print('Hello, world!')"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for key in d: print(key)", "fixed_code": "for key in d: print(key or '')"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[5])", "fixed_code": "my_list = [1,2,3]\nprint(my_list[2])"}
{"faulty_code": "your faulty code here", "fixed_code": "your fixed code here"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')", "fixed_code": "def greet(name):\n    print(f'Hello, {name}!')"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This loop prints numbers from 1 to 11 instead of 1 to 10", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i-1])", "fixed_code": "for i in range(len(list)):\n    if i > 0:\n        print(list[i-1])\n"}
{"faulty_code": "my_list = [1,2]\nmy_list.add(3)", "fixed_code": "my_list = [1,2]\nmy_list.append(3)"}
{"faulty_code": "for i in range(len(list)-2):\n    print(i)", "fixed_code": "for i in range(len(list)-1):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    if i ==5:\n        break", "fixed_code": "for i in range(6, 11):\n    print(i)"}
{"faulty_code": "if x==5and y==10:", "fixed_code": "if x ==5 and y ==10:"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i < len(list):\n        print(list[i])"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\n# This code prints numbers from 1 to 5,\n# but it should print numbers from 1 to 6.\n", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(len(numbers)):\n    print(numbers[i])", "fixed_code": "for i in range(len(numbers)-1):\n    print(numbers[i])"}
{"faulty_code": "for i in range(6):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    if i == 4:\n        print(i)", "fixed_code": "for i in range(6):\n    if i >= 5:\n        print(i)"}
{"faulty_code": "try:\n    print(1/0)\nexcept ZeroDivisionError:\n    print('Denominator is zero')\nexcept Exception as e:\n    print(f'Unexpected error: {e}')", "fixed_code": "try:\n    print(1/0)\nexcept ZeroDivisionError as e:\n    print('Denominator is zero')\nexcept Exception as e:\n    print(f'Unexpected error: {e}')"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "def sum(n):\n    total = 0\n    for i in range(1,n): total +=i\n    return total", "fixed_code": "def sum(n):\n    total = 0\n    for i in range(1,n+1): total +=i\n    return total"}
{"faulty_code": "a = [1,2,3]\na.append(4)\nprint(a)", "fixed_code": "a = [1,2,3]\na.append(4)\nprint(a)"}
{"faulty_code": "i = 0\nwhile i < 5:\n    print(i)\n    i += 1", "fixed_code": "i = 0\nwhile i <= 4:\n    print(i)\n    i += 1"}
{"faulty_code": "my_list = [1,2,3]; print(my_list.index(4))", "fixed_code": "my_list = [1,2,3]; my_index = my_list.index(4)"}
{"faulty_code": "s = 'hello'; print(s[5])", "fixed_code": "s = 'hello'; print(s[2])"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    print(arr[i])"}
{"faulty_code": "a = [1,2,3]\na[4]", "fixed_code": "a = [1,2,3]\nif len(a) > 4:\n    print('Index out of range')\nelse:\n    print(a[4])"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i-1])"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "[x for x in range(10) if x%2]", "fixed_code": "[x for x in range(10) if x%2 == 0]"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This code has an off-by-one error; it prints from 1 to 11 instead of 0 to 9.", "fixed_code": "for i in range(10):\n    print(i)\n"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This loop prints numbers from 2 to 11 instead of 1 to 10", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[2])", "fixed_code": "my_list = [1,2,3]\nprint(my_list[2])"}
{"faulty_code": "for i in range(10):\n    if i == 5:\n        break", "fixed_code": "for i in range(6):\n    if i == 5:\n        break"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    print(arr[i])"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(0,5):\n    print(i)", "fixed_code": "for i in range(0,6):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "numbers = [1,2,3]\nsum_numbers = sum(numbers)\navg = sum_numbers / len(numbers)\nprint(avg)", "fixed_code": "numbers = [1,2,3]\nsum_numbers = sum(numbers)\navg = sum_numbers / len(numbers)\nprint(avg)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(10):\n    print(i*2)\n\n# Faulty because it runs from 0 to 9 instead of 0 to 4", "fixed_code": "for i in range(5):\n    print(i*2)"}
{"faulty_code": "for i in range(5+1):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(5)\n\n    print(i)", "fixed_code": "for i in range(5):\n\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\nprint('Loop completed')", "fixed_code": "for i in range(10):\n    print(i+1)\nprint('Loop completed, all items processed')\n"}
{"faulty_code": "for i in range(10):\n    print(i*2)\n\n# This loop runs from 0 to 9, which may not be intended.", "fixed_code": "for i in range(5):\n    print(i*2)"}
{"faulty_code": "for i in range(10)\n    print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# Missing base case for recursion", "fixed_code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "my_list = [1,2,3]\nindex = my_list[4]", "fixed_code": "my_list = [1,2,3]\nindex = len(my_list)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "data = [{'name': 'Alice', 'age': 15}, {'name': 'Bob', 'age': 20}]\nresult = [item['name'] for item in data if (item['age'] > 18 and item['age'] % 2 == 0)]\nprint(result)", "fixed_code": "data = [{'name': 'Alice', 'age': 15}, {'name': 'Bob', 'age': 20}]\nresult = [item['name'] for item in data if item.get('age') > 18 and item.get('age') % 2 == 0]\nprint(result)"}
{"faulty_code": "for i in range(len(arr)):\n    print(arr[i])", "fixed_code": "arr = [1,2,3]\nfor i in range(len(arr)):\n    print(arr[i])"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)-1):\n    print(list[i])"}
{"faulty_code": "for i in range(len(arr)):\n    if arr[i] == target:\n        print('Found')", "fixed_code": "for i in range(len(arr)):\n    if arr[i] == target:\n        print('Found')"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# Incorrectly not including last element due to off-by-one error", "fixed_code": "for i in range(11):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i+1])"}
{"faulty_code": "my_list = []\n\nmy_list.append(5)\n", "fixed_code": "my_list = []\n\nmy_list.append(5)\n"}
{"faulty_code": "my_list = [1,2,3]\nmy_list[2] = 'a string'", "fixed_code": "my_list = [1,2,3]\nmy_list[2] = [1,2,3]"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10, 20):\n    print(i)"}
{"faulty_code": "s = 'test'; print(s[3]]", "fixed_code": "s = 'test'; print(s[3])"}
{"faulty_code": "for i in range(len(arr)-1):\n    if arr[i] > arr[i+1]:\n        swap(arr[i], arr[i+1])", "fixed_code": "for i in range(len(arr)-1):\n    if arr[i] > arr[i+1]:\n        temp = arr[i]\n        arr[i] = arr[i+1]\n        arr[i+1] = temp"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i], arr[i+1])", "fixed_code": "for i in range(len(arr)-1):\n    print(arr[i], arr[i+1])"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\nprint('Loop completed')", "fixed_code": "for i in range(5):\n    print(i+1)\n\nprint('Loop completed, all items processed')"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i], arr[i+1])", "fixed_code": "for i in range(len(arr)-1):\n    print(arr[i], arr[i+1])\n# Fixed by adding comment\n"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(len(lst)-1): print(lst[i])", "fixed_code": "for i in range(len(lst)): print(lst[i])"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(6): print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "print = input", "fixed_code": "import sys; print = sys.stdout.write\n# Or use print = __import__('sys').stdout.write"}
{"faulty_code": "for i in range(10): print(i+1)\n", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n# Missing colon after for loop\nprint(i+2)", "fixed_code": "for i in range(5):\n    print(i+1)\n# Corrected with colon\nprint(i+2)"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(len(list)-1):\n    print(i)", "fixed_code": "for i in range(len(list)):\n    print(i)"}
{"faulty_code": "for i in range(10):<br>\n    print(i)<br>\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)\n    print(i + 1)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i < len(list):\n        print(list[i])"}
{"faulty_code": "for i in range(len(list)-1): print(list[i])", "fixed_code": "for i in range(len(list)): print(list[i])"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    if i < len(arr)-1:\n        print(arr[i])\n"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list - [2])", "fixed_code": "my_list = [1,2,3]\nprint(set(my_list) - {2})"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "s = 'Hello'\nprint(s[0:3])", "fixed_code": "s = 'Hello'\nprint(s[:3])"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(5, 15):\n    print(i)"}
{"faulty_code": ["for i in range(3):\n    print(i)", "with open('nonexistent.txt', 'w')", "if x == 'a':"], "fixed_code": ["for i in range(len(lst)):\n    print(i)", "with open('file.txt', 'r)", "if x == 'A'"]}
{"faulty_code": ["print('Hello, world!')", "def test():\n print(sum(5))"], "fixed_code": ["print('Hello, world!')", "def test():\n print(sum([5]))"]}
{"faulty_code": "for i in range(len(nums)):\n    if nums[i] > 0:\n        print(nums[i])", "fixed_code": "for i in range(len(nums)):\n    if i < len(nums) and nums[i] > 0:\n        print(nums[i])"}
{"faulty_code": "for i in range(len(numbers)):\n    print(numbers[i])", "fixed_code": "for i in range(len(numbers)-1):\n    print(numbers[i])"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[3])", "fixed_code": "my_list = [1,2,3]\nprint(my_list[3] + 0)"}
{"faulty_code": "total = sum\nsum += total", "fixed_code": "total = sum\nsum = total"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[0])", "fixed_code": "my_list = [1,2,3]\ntuple_list = tuple(my_list)\nprint(tuple_list[0])"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\n# This code will cause an IndexError as it tries to access index 5 of a list with only four elements.", "fixed_code": "for i in range(4):\n    print(i+1)"}
{"faulty_code": "a = [1,2,3]\nb = a.pop()\nprint(a)", "fixed_code": "a = [1,2,3]\nb = a.pop(0)\nprint(a)"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)\n\nprint('Loop completed')", "fixed_code": "for i in range(10):\n    print(i)\n\nprint('Loop completed')\n"}
{"faulty_code": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n+1):\n            fib_i = fib_{i-1} + fib_{i-2}\n            print(fib_i)", "fixed_code": "def fibonacci(n):\n    if n == 0 or n == 1:\n        return n\n    else:\n        for i in range(2, n+1):\n            fib_i = fibonacci(i-1) + fibonacci(i-2)\n            print(fib_i)"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[3])", "fixed_code": "my_list = [1,2,3]\nif len(my_list) > 0:\n    print(my_list[2])"}
{"faulty_code": "for i in range(0,1):\n    print(i)", "fixed_code": "for i in range(1,2):\n    print(i)"}
{"faulty_code": "my_list = [1,2,3]\nindex = len(my_list)-1", "fixed_code": "my_list = [1,2,3]\nindex = len(my_list)-1\nprint(my_list[index])", "another_faulty_code": "for i in range(5): print(i)", "another_fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "def outer_func():\n    def inner_func():\n        print('hello')\ninner_func()\nouter_func('world')", "fixed_code": "def outer_func(s): \n    def inner_func():\n        print(f'{s} hello')\n    return inner_func\nouter_func('world')"}
{"faulty_code": "my_list = [1,2,3]\nmy_list.extend([4,5,6])", "fixed_code": "my_list = [1,2,3]\nmy_list.append([4,5,6])"}
{"faulty_code": "for i in range(10)\n    print(i+1)\n", "fixed_code": "for i in range(10)\n    print(i+1)\n"}
{"faulty_code": "a = [1,2,3]\nb = [4,5,6]\na + b", "fixed_code": "a = (1,2,3)\nb = (4,5,6)\n(a[0], b[0])"}
{"faulty_code": "print(10 // 3)\nprint(10 % 3)\nprint(10 / 3)  # Outputs '3.333...'", "fixed_code": "print(10 // 3)  # Outputs 3\nprint(10 % 3)   # Outputs 1\nprint(10 / 3)   # Outputs 3.333..."}
{"faulty_code": "for i in range(len(lst)-1):\n    print(lst[i])", "fixed_code": "for i in range(len(lst)):\n    print(lst[i])"}
{"faulty_code": "for i in range(10): print(i+1)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i < len(list)-1:\n        print(list[i])\n    else:\n        break"}
{"faulty_code": "s = [1,2]; print(s[3])", "fixed_code": "s = [1,2]; print(s[:4])"}
{"faulty_code": "x = 5 + \"hello\"", "fixed_code": "x = str(5) + \"hello\""}
{"faulty_code": "a = [1,2,3]\nb = a[0:2]\nc = b[::-1]\nd = c[1:]", "fixed_code": "a = [1,2,3]\nb = a[:2]\nc = b[::-1]\nd = c[1:]"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[3])", "fixed_code": "my_list = [1,2,3]\nprint(my_list[2])"}
{"faulty_code": "def greet():\n    print('Hello')\n    return name", "fixed_code": "def greet():\n    if hasattr(name, 'exists'):\n        print(f'Hello {name}')\n    else:\n        print('Hello')"}
{"faulty_code": "l = [1,2,3]; print(max(l))", "fixed_code": "l = [1,2,3]; if not l: print('Empty list'); else: print(max(l))"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(0, len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "x = 0.1 + 0.2\nprint(x)\nwhile x < 1:\n    x += 0.1", "fixed_code": "x = 0.3\nprint(x)\ntolerance = 1e-10\nwhile abs(x - 1) > tolerance:\n    x += 0.1\n    print(x)"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)-1):\n    print(list[i+1])"}
{"faulty_code": "for i in range(10):\n    print(i)\n", "fixed_code": "for i in range(10):\n    print(i)\n"}
{"faulty_code": "for i in range(len(numbers)-1):\n    print(numbers[i])", "fixed_code": "for i in range(len(numbers)):\n    print(numbers[i])"}
{"faulty_code": "for i in range(10)\n    print(i+1)\n\nprint('Loop ended without issue')", "fixed_code": "for i in range(10, 15)\n    print(i-4)\n\nprint('Loop completed successfully')"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "while True:\n    print(\"Waiting...,\")", "fixed_code": "while True:\n    print(\"Waiting...,\\n\")\n    break\n"}
{"faulty_code": ["short_snippet", "medium_snippet", "long_snippet"], "fixed_code": ["fixed_short", "fixed_medium", "fixed_long"]}
{"faulty_code": "for i in range(10):\n    print(i*2)\n\n# This code prints even numbers from 0 to 18, but misses 20 because of an off-by-one error", "fixed_code": "for i in range(0, 20, 2):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)\n\nprint('Loop completed')", "fixed_code": "for i in range(10, 20):\n    print(i)\n\nprint('Loop completed')\n"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "n = 5\nnums = [1,2,3]\nprint(nums[n])", "fixed_code": "n = 5\nnums = [1,2,3]\nprint(nums[:n])"}
{"faulty_code": "my_list = [1,2,3]\nmy_list[0] = 'one'", "fixed_code": "my_list = ['one', 2, 3]"}
{"faulty_code": "print('''Hello''')", "fixed_code": "print('Hello')"}
{"faulty_code": "for i in range(10\n", "fixed_code": "for i in range(10)"}
{"faulty_code": [["short Faulty"], ["medium Faulty"], ["long Faulty"]], "fixed_code": [["short Fixed"], ["medium Fixed"], ["long Fixed"]]}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i+1])"}
{"faulty_code": "lst = [1,2,3]\nfor i in lst:\n    if i % 2 == 0:\n        del lst[i]", "fixed_code": "lst = [1,2,3]\ncpy_lst = lst.copy()\nfor i in cpy_lst:\n    if i % 2 == 0:\n        del cpy_lst[i]"}
{"faulty_code": "print('Hello, 'world!')", "fixed_code": "print('Hello, world!')"}
{"faulty_code": "try:\n    open('nonexistentfile.txt', 'r')\nexcept IOError:\n    print('File not found')", "fixed_code": "try:\n    with open('nonexistentfile.txt', 'r') as f:\n        print(f.read())\nexcept FileNotFoundError:\n    print('File not found')"}
{"faulty_code": "if x > 5:\n    print('x is greater than 5')\n\n# Missing colon after if statement", "fixed_code": "if x > 5:\n    print('x is greater than 5:')\n"}
{"faulty_code": "for i in range(10):\n    print(i)\n\nprint('Loop completed')", "fixed_code": "for i in range(10):\n    print(i)\n\nprint('Loop completed after 10 iterations')"}
{"faulty_code": "for i in range(5):\\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "x = [1,2,3]\nprint(x[4])", "fixed_code": "x = [1,2,3]\nprint(x[:4])"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5, 10):\n    print(i)"}
{"faulty_code": "my_list = [x for x in range(5) if not (x % 2 == 0)]", "fixed_code": "my_list = [x for x in range(5) if x % 2 != 0]"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10, 20):\n    print(i)"}
{"faulty_code": "try:\n    open('nonexistentfile.txt', 'r')\nexcept FileNotFoundError\n", "fixed_code": "try:\n    if not os.path.exists('nonexistentfile.txt'):\n        raise FileNotFoundError\n    open('nonexistentfile.txt', 'r')\nexcept FileNotFoundError as e:\n    print(f'FileNotFoundError: {e}')\n"}
{"faulty_code": ["for i in range(5): print(i)", "def greet(n): return f'Hello {n}'", "my_list = [x for x in range(10) if x%2 ==0]"], "fixed_code": ["range(5)", "def greet(n): return f'Hello {n}'", "my_list = [x for x in range(10) if x%2 !=0]"]}
{"faulty_code": "my_list = [1, 2, 3]\nmy_list.remove(4)\nmy_list.remove(5)\nmy_list.pop()", "fixed_code": "my_list = [1, 2, 3]\ntry:\n    my_list.remove(4)\nexcept ValueError:\n    pass\ntry:\n    my_list.remove(5)\nexcept ValueError:\n    pass\nmy_list.pop()"}
{"faulty_code": "try:\n    open('data.txt')\nexcept FileNotFoundError:\n    print('File not found')", "fixed_code": "try:\n    with open('data.txt', 'r') as f:\n        print(f.read())\nexcept FileNotFoundError:\n    print('File not found')"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)-1):\n    print(list[i])"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "lst = []\ntry:\n    print(lst[0])\nexcept IndexError:\n    pass", "fixed_code": "lst = []\ntry:\n    print(lst[0])\nexcept IndexError:\n    print('List is empty')\n"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i < len(list)-1:\n        print(list[i])\n"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "print('Hello, ' + 'world!' + ',')", "fixed_code": "print('Hello, world!')"}
{"faulty_code": "sum = 0\nfor i in range(5):\n    sum += i", "fixed_code": "total = 0\nfor i in range(6):\n    total += i"}
{"faulty_code": "def greet():\n    print('Hello')", "fixed_code": "def greet():\n    print('Hello')\n    return"}
{"faulty_code": "for i in range(10):\n    print(i+1)\nprint(i)", "fixed_code": "for i in range(10):\n    print(i+1)\nprint(i+1)"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\n# This code misses the iteration for i=0", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "my_list = [1,2,3]\nmy_list[3] = 'a'", "fixed_code": "my_list = [1,2,3]"}
{"faulty_code": "for i in range(0, len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\n# This loop prints numbers from 1 to 6 instead of 0 to 4", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This loop will run forever because there's no condition to break out\n", "fixed_code": "for i in range(10):\n    print(i+1)\n\n# The loop is correct as it currently runs from 0 to 9, printing each value plus one"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(i)", "fixed_code": "for i in enumerate(list):\n    print(i)"}
{"faulty_code": "for i in range(10): print(i+1)\n", "fixed_code": "for i in range(10): print(i+1)\n"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i], arr[i+1])", "fixed_code": "for i in range(len(arr)-1):\n    print(arr[i], arr[i+1])"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(6): print(i)"}
{"faulty_code": "lst = [1, 2, 3]\nprint(lst[10])", "fixed_code": "lst = [1, 2, 3]\nif 0 <= idx < len(lst):\n    print(lst[idx])\nelse:\n    print('Index out of range')"}
{"faulty_code": "i = 0\nwhile i < 5:\n    print(i)\n    i += 1", "fixed_code": "i = 0\nwhile i < 5:\n    print(i)\n    i += 1\n    if i == 5:\n        break"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i+1])", "fixed_code": "for i in range(len(list)-1):\n    print(list[i+1])"}
{"faulty_code": "import pandas as pd\ndf = pd.read_csv('data.csv')\nmean = df['values'][df['values'].index[df['values'] == None]].mean()", "fixed_code": "import pandas as pd\ndf = pd.read_csv('data.csv', na_values=[None])\nmean = df['values'].mean(skipna=True)\nif pd.isna(mean):\n    print('Mean could not be calculated due to missing values')"}
{"faulty_code": "for i in range(4):\n    print(i)", "fixed_code": "for i in range(3):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(5)\n    print(i**2)\nprint('Missing')", "fixed_code": "for i in range(5)\n    print(i**2)\nprint('Missing the fifth element')"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "try:\n    f = open('nonexistent.txt', 'r')\n    data = f.read()\n    print(data)\nexcept FileNotFoundError:\n    print('File not found')\nreturn", "fixed_code": "try:\n    f = open('nonexistent.txt', 'r')\n    data = f.read()\n    print(data)\nexcept FileNotFoundError as e:\n    print(f'Error: {e}')\n"}
{"faulty_code": "a = [1,2,3]\nb = a.pop()\na.append(4)\nprint(a)", "fixed_code": "a = [1,2,3]\nb = a.pop(0)\na.insert(0, 4)\nprint(a)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "lst = [1,2,3]\n\nfor i in lst:\n    print(i)\n\nprint(lst)", "fixed_code": "lst = [1,2,3]\n\nfor i in lst:\n    print(i)\n\nprint(lst)"}
{"faulty_code": "for i in range(10)\n    print(i+1)\n\nprint('Missing')", "fixed_code": "for i in range(10)\n    print(i+1)\n\nprint('Missing')"}
{"faulty_code": "s = 'Hello'\ns.lower()\nprint(s)", "fixed_code": "s = 'Hello'\ntemp = s.lower()\nprint(temp)"}
{"faulty_code": "for i in range(len(list)):\\n    if list[i] == target:\\n        print('Found!')", "fixed_code": "for i in range(len(list)):\\n    if list[i] == target:\\n        print('Found!')"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    print(arr[i])"}
{"faulty_code": "for i in range(len(arr)-1): print(arr[i])", "fixed_code": "for i in range(len(arr)-1): print(arr[i])"}
{"faulty_code": "my_list = [1, 2, 3]\nnew_list = my_list.remove(2)", "fixed_code": "my_list = [1, 2, 3]\nnew_list = list(my_list)\n\n# or \n\nmy_list.remove(2)"}
{"faulty_code": "x = [1,2,3]\nx.append(4)\nprint(x)", "fixed_code": "x = [1,2,3]\nx.append(4)\nprint(x)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\nprint('The loop ran from 0 to 9 inclusive.')", "fixed_code": "for i in range(10):\n    print(i + 1)\n\nprint('The loop ran from 1 to 10 inclusive.')"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)\n", "fixed_code": "for i in range(10):\n    print(i)\n    i += 1\n"}
{"faulty_code": "for i in range(5):\n    print(i", "fixed_code": "for i in range(5):\n    print(i"}
{"faulty_code": "try:\n    x = int(input())\nexcept ValueError:\n    print('Invalid input')", "fixed_code": "try:\n    x = int(input())\nexcept ValueError:\n    print('Invalid input', file=sys.stderr)\nfinally:\n    print(f'Value: {x}') if isinstance(x, int) else None"}
{"faulty_code": "for i in range(5):\\n    print(i)", "fixed_code": "for i in range(6):\\n    print(i)"}
{"faulty_code": "numbers = [1, 2, 3]\nindex = len(numbers)\nprint(numbers[index])", "fixed_code": "numbers = [1, 2, 3]\ntry:\n    index = len(numbers)\nexcept IndexError:\n    print('Index out of bounds')\nprint(numbers[index])"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(10)\n    print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "my_list = []\nprint(my_list[0])", "fixed_code": "my_list = [1]\nprint(my_list[0])"}
{"faulty_code": "a = [1,2,3]\nb = a[0:2]\nc = b[::-1]", "fixed_code": "a = [1,2,3]\nb = a[:2][::-1]"}
{"faulty_code": "my_list = ['a', 'b', 'c']\n    print(my_list[2])", "fixed_code": "my_list = ['a', 'b', 'c']\n    print(my_list[1])"}
{"faulty_code": "for i in range(5):", "fixed_code": "for i in range(6):"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "import socket\n\ns = socket.socket()\nprint(s)\ns.close()", "fixed_code": "import socket\n\ns = socket.socket()\nprint(s)\ns.close()"}
{"faulty_code": "open('nonexistent.txt')", "fixed_code": "open('nonexistent.txt', 'r')"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "a = [1,2,3]; b = a[::3]; print(b)", "fixed_code": "a = [1,2,3]; b = a[::3] + [4]; print(b)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(len(numbers)-1):\n    print(numbers[i])", "fixed_code": "for i in range(len(numbers)):\n    print(numbers[i])"}
{"faulty_code": "for i in range(5):\n    print(i+1)\nprint('Next item')", "fixed_code": "for i in range(5):\n    print(i)\nprint('Next item')\n"}
{"faulty_code": "def calculate_average(numbers):\n    total = sum(numbers)\n    count = len(numbers)\n    average = total / count\n\n    return average", "fixed_code": "def calculate_average(numbers):\n    total = sum(numbers or [0])\n    count = len(numbers)\n    if count == 0:\n        return None\n    average = total / count\n    return average"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)\nprint('Loop completed')", "fixed_code": "for i in range(5):\n    print(i+1\n    )\nprint('Loop completed')"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5,6):\n    print(i)"}
{"faulty_code": "print('Hello, world!')\nprint('This is a second message.')", "fixed_code": "print('Hello, world!')\n\nprint('This is a second message.')"}
{"faulty_code": "for i in range(1,5):\n    print(i)", "fixed_code": "for i in range(0,5):\n    print(i)"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])\n\n# This loop misses the last element of the array", "fixed_code": "for i in range(len(arr)):\n    print(arr[i])\n\n# The loop now correctly iterates through all elements"}
{"faulty_code": "print('Hello, world!')", "fixed_code": "print('Hello, world!'"}
{"faulty_code": "my_list = [1,2,3]\n\nmy_list.extend.append(5)", "fixed_code": "my_list = [i for i in range(4)]\n\nmy_list.append(5)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(len(list)):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)\nprint(i+1)", "fixed_code": "for i in range(10):\n    print(i)\nprint(i + 1)"}
{"faulty_code": "for i in range(10)\n    print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "lst = [1,2,3]; print(lst[10])", "fixed_code": "lst = [1,2,3]; if len(lst) > i+1: print(lst[i+1]) else: pass"}
{"faulty_code": "for i in range(5):\n    print(i+1)\nprint(i+2)", "fixed_code": "for i in range(5):\n    print(i+1)"}
{"faulty_code": "for i in range(len(lst): print(lst[i])", "fixed_code": "for i in range(len(lst)): print(lst[i])"}
{"faulty_code": "for i in range(0,5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')\n    print('How are you?')", "fixed_code": "def greet(name):\n    print(f'Hello, {name}!')\n    print('How are you?')"}
{"faulty_code": "a = [1,2,3]\nb = a[0:2]\nc = b[::-1]", "fixed_code": "a = [1,2,3]\nb = a[:2][::-1]"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": ["for i in range(5): print(i)", "from math import sqrt\nprint(sqrt(4))", "try: list.index('a') except ValueError: pass"], "fixed_code": ["for i in range(5): print(i + 1)", "import math; print(math.sqrt(4))", "try: list.index('a'); raise ValueError except: pass"]}
{"faulty_code": "for i in range(9):\n    print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "nums = [1,2,3]\nif any(n > 0 for n in nums):\n    print('All numbers are positive')", "fixed_code": "nums = [1,2,3]\nif all(n > 0 for n in nums):\n    print('All numbers are positive')"}
{"faulty_code": "my_list = [1, 2, 3]\nprint(my_list[3])", "fixed_code": "my_list = [1, 2, 3]\nprint(my_list[2])"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\n# This loop runs from 0 to 4 inclusive, but prints i+1 which starts at 1 and ends at 5.", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(10):\\n    print(i*2)\n", "fixed_code": "for i in range(10):\n    print(i*2)\n"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(x)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(len(lst)): print(lst[i])", "fixed_code": "try: for i in range(len(lst)): print(lst[i]) except IndexError: pass"}
{"faulty_code": "for i in range(10):\n    print(i)\n\nprint('Loop completed')", "fixed_code": "for i in range(10):\n    print(i)\n\nprint('Loop completed')\n"}
{"faulty_code": "for i in range(10):\n    print(i)\nprint('Loop completed')", "fixed_code": "for i in range(10):\n    print(i)\nprint('Loop completed')\n"}
{"faulty_code": "for i in range(len(nums)+1):\n    total += nums[i]", "fixed_code": "total = sum(nums)\naverage = total / len(nums)"}
{"faulty_code": "lst = [1,2,3]; print(lst[5])", "fixed_code": "lst = [1,2,3]; print(lst[-4:]"}
{"faulty_code": ["print('Hello, world!')", "[x for x in range(5) if x > 3]", "def calculate_score(letters):\n\ttotal = 0\n\tfor l in letters:\n\t\tif l.isupper():\n\t\t\ttotal += ord(l) - ord('A') +1\n\t\telif l.islower():\n\t\t\ttotal += ord(l) - ord('a') +1", "d = {'a':1}\nkeys, values = d.keys(), d.values()\nprint(keys[0])", "def calculate_score(letters):\n   total = 0\n   for char in letters:\n       if char.isupper():\n           total += ord(char) - ord('A') + 1\n       elif char.islower():\n           total += ord(char) - ord('a') + 1", "def calculate_score(letters):\n   total = 0\n   for l in letters:\n       if l.isupper():\n           total += ord(l) - ord('A') + 1\n       elif l.islower():\n           total += ord(l) - ord('a') + 1"], "fixed_code": ["print('Hello, world!')", "[x for x in range(4,5)]", "def calculate_score(letters):\n\ttotal = 0\n\tfor l in letters:\n\t\tif l.isupper():\n\t\t\ttotal += ord(l) - ord('A') +1", "d = {'a':1}\n*keys, *values = d.keys(), d.values()\nprint(*keys)", "def calculate_score(letters):\n   total = 0\n   for char in letters:\n       base = ord('A') if char.isupper() else ord('a')\n       total += ord(char) - base + 1", "def calculate_score(letters):\n   total = 0\n   for char in letters:\n       base = ord('A' if char.isupper() else 'a')\n       total += ord(char) - base + 1"]}
{"faulty_code": "if x and y or z:\n    print('Yes')\nelse:\n    print('No')", "fixed_code": "if x and (y or z):\n    print('Yes')\nelse:\n    print('No')", "title": "Conditional Statement Logic Error"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This code has an off-by-one error. The loop runs from 0 to 9, but it prints i+1 which starts at 1 and ends at 10.", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(5):<br/>\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)\nprint(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "os.remove('nonexistentfile.txt')", "fixed_code": "os.remove(os.path.abspath('nonexistentfile.txt'))"}
{"faulty_code": "a = [1,2,3]\nb = a\nprint(a[0])", "fixed_code": "a = [1,2,3]\nb = a.copy()\nprint(b[0])"}
{"faulty_code": "print('Hello, world!')\n\n# This example is very simple; your code should be more realistic.", "fixed_code": "print('Hello, world!')"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)\n\nprint('Missing item')", "fixed_code": "for i in range(5, -1, -1):\n    print(i)\n\nprint('Missing item')"}
{"faulty_code": "while True:\n    print('Hello, world!')", "fixed_code": "while True:\n    print('Hello, world!')\n\n# This example shows an infinite loop which doesn't have a condition to break out of the loop."}
{"faulty_code": "for i in range(9):\n    print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "a = [1,2,3]\nb = a[0] + a[1] + a[2]", "fixed_code": "a = [1,2,3]\nb = sum(a)"}
{"faulty_code": "print('Hello, world!')\n\nprint('Hello, world!')", "fixed_code": "print('Hello, world!')\n\nprint('Hello, world!')"}
{"faulty_code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 2)", "fixed_code": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\nprint('Next item')", "fixed_code": "for i in range(10):\n    print(i+1)\n\nprint('Next item', end='\\n')\n"}
{"faulty_code": "if x > 5:\n    print('x is greater than 5')\n\n    # Missing colon here", "fixed_code": "if x > 5:\n    print('x is greater than 5')\n"}
{"faulty_code": "for i in range(10):\n    print(i)\nprint('Loop completed')", "fixed_code": "for i in range(10):\n    print(i)\nprint('Loop completed')\n"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(6): print(i)"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "a = [1,2,3]\na[0] = '1' + '\n' # This adds an extra newline\nprint(a)", "fixed_code": "a = [1,2,3]\na[0] = '1'\nprint(a)"}
{"faulty_code": "print('Hello, world!')\nprint('Hello, world!')", "fixed_code": "print('Hello, world!')\nprint('Hello, world!')"}
{"faulty_code": "my_list = [1,2,3]\n\nreversed_list = my_list[::-1]", "fixed_code": "if my_list is not None:\n    reversed_list = my_list[::-1]"}
{"faulty_code": "x = [1,2,3]\nx.sort()\nprint(x)", "fixed_code": "x = [1,2,3]\nx.sort()\nprint(x)"}
{"faulty_code": "for i in range(5):\n    if i == 4:\n        print(i)", "fixed_code": "for i in range(6):\n    if i == 5:\n        print(i)"}
{"faulty_code": "for i in range(len(list)-2):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i < len(list)-1:\n        print(list[i])"}
{"faulty_code": "my_list = [1,2,3]\n\nfor i in my_list:\n    print(i)", "fixed_code": "my_list = [1,2,3]\n\nfor i in range(len(my_list)):\n    print(my_list[i])"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10, 11):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)\n\nfor j in range(6):\n    print(j)", "fixed_code": "for i in range(6):\n    print(i)\n\nfor j in range(5):\n    print(j)"}
{"faulty_code": "for i in range(10):\n    print(i*2)\n\n# This loop runs from 0 to 9, which is correct.", "fixed_code": "for i in range(10):\n    print(i*2)"}
{"faulty_code": "for i in range(len(arr)-1):\n    arr[i] = arr[i+1]\n\nprint('Shifted correctly')", "fixed_code": "for i in range(len(arr)-1):\n    arr[i+1] = arr[i]\n\nprint('Shifted correctly')"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(1, n):\n    print(i)\nn", "fixed_code": "for i in range(1, n+1):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This code is missing an else clause to handle when i exceeds the list length", "fixed_code": "for i in range(10, 20):\n    print(i)"}
{"faulty_code": ["short_faulty", "medium_faulty", "long_faulty"], "fixed_code": ["short_fixed", "medium_fixed", "long_fixed"]}
{"faulty_code": "s = input().strip()\nif s == '':\n    print('Enter a name')\nelse:\n    print(s)", "fixed_code": "s = input().strip()\nif not s:\n    print('Enter a name')\nelse:\n    print(s)"}
{"faulty_code": "for i in range(len(list)):\n    if list[i] == target:\n        print('Found at index',i)\n        break", "fixed_code": "for i in range(len(list)):\n    if list[i] == target:\n        print('Found at index',i)\n        break"}
{"faulty_code": "for i in range(len(prices)):\n    if prices[i] > 0:\n        print(prices[i])", "fixed_code": "for i in range(len(prices)-1):\n    if prices[i+1] > 0:\n        print(prices[i+1])"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "s = 'Hello' + ' ' + 'world'", "fixed_code": "s = 'Hello' + ' ' + 'world'"}
{"faulty_code": "print(f\"{name},{age}\")", "fixed_code": "print(f\"{name}, {age}\")\n"}
{"faulty_code": "for i in range(len(arr)-1): print(arr[i])", "fixed_code": "for i in range(len(arr)): print(arr[i])\n"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(n):\n    print(i+1)\n\n# This code has an off-by-one error; it prints from 1 to n instead of 0 to n-1.", "fixed_code": "for i in range(n+1):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i < len(list)-1:\n        print(list[i])\n\n# Fixed version includes a check to prevent IndexError by ensuring we don't access the last element\n"}
{"faulty_code": "for i in range(10):\n    print(i)\n\nprint(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "a = [1,2,3]\nb = a\nprint(a[0])", "fixed_code": "a = [1,2,3]\nb = a.copy()\nprint(b[0])"}
{"faulty_code": "try:\n    print(x)\nexcept Exception:\n    pass", "fixed_code": "try:\n    if x >= 0:\n        print(x ** 0.5)\n    else:\n        print('Cannot compute square root of negative number')\nexcept ValueError:\n    print('Invalid input value')\nfinally:\n    print('Operation completed')"}
{"faulty_code": "for i in range(10):\n    print(i*2)\n\nprint('Missing key')", "fixed_code": "for i in range(5):\n    print(i*2)\n\nprint('Missing key')"}
{"faulty_code": "for i in range(10): print(i+1)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i], arr[i+1])", "fixed_code": "for i in range(len(arr)-1):\n    print(arr[i], arr[i+1])"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "print('Hello' + ' ' + 'world')", "fixed_code": "print('Hello world')"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')", "fixed_code": "def greet(name):\n    print(f'Hello, {name}!')"}
{"faulty_code": "with open('nonexistent.txt') as f:\n    print(f)", "fixed_code": "try:\n    with open('nonexistent.txt') as f:\n        print(f)\nexcept FileNotFoundError:\n    print('File not found')"}
{"faulty_code": "if x == True or y == False:\n    print('Yes')\n    print('No')\n", "fixed_code": "if x == True or y == False:\n    print('Yes')"}
{"faulty_code": "for i in range(5):\\n    print(i)", "fixed_code": "for i in range(6):\\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "for i in range(∞):\n    print(i)", "fixed_code": "for i in range(float('inf')):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(len(list)+1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "a = [1,2,3]\nb.append(4)\nprint(a)", "fixed_code": "a = [1,2,3]\na.append(4)\nprint(a)"}
{"faulty_code": "for i in range(1,5):\n    print(i)", "fixed_code": "for i in range(0,5):\n    print(i)"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[4])", "fixed_code": "my_list = [1,2,3]\nprint(my_list[3])"}
{"faulty_code": "n = 5\nwhile n:\n    print(n)\n    input()\n    if n != 0:\n        break", "fixed_code": "n = 5\nwhile n > 0:\n    print(n)\n    input()\n    if n != 0:\n        break"}
{"faulty_code": "print('Hello, world!')", "fixed_code": "print('Hello, world!')"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)-1):\n    print(arr[i+1])"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(0,5):\n    print(i)", "fixed_code": "for i in range(0,5-1):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n# this loop should run from 0 to 4 but prints 1 to 5", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(len(lst)):\n    if lst[i] == target:\n        print('Found: ', lst[i])\n        break\nelse:\n    print('Not found')", "fixed_code": "for i in range(len(lst)):\n    if lst[i] == target:\n        print('Found: ', lst[i])\n        break\nelse:\n    print('Not found')"}
{"faulty_code": "for i in range(len(list)):\n    list.append(i)\n", "fixed_code": "for i in range(len(list) + 1):\n    list.append(i)\n"}
{"faulty_code": "for i in range(len(list)):\n    if list[i] == target:\n        return list[i]\nelse:\n    return None", "fixed_code": "def find_element(lst, target):\n    for i in range(len(lst)):\n        if lst[i] == target:\n            return lst[i]\n    return None"}
{"faulty_code": "def fib(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [0,1]\n    else:\n        return fib(n-1) + fib(n-2)\nprint(fib(5))", "fixed_code": "def fib(n):\n    if n == 0:\n        return []\n    elif n == 1:\n        return [0,1]\n    else:\n        prev = fib(n-1)\n        return prev + [prev[-1]]\nprint(fib(5))\n"}
{"faulty_code": "for i in range(len(arr)):\n    if arr[i] == target:\n        return arr[i+1]\nelse:\n    return None", "fixed_code": "for i in range(len(arr)):\n    if arr[i] == target and i < len(arr)-1:\n        return arr[i+1]\nreturn None"}
{"faulty_code": "a = [1,2,3]\nb = [4,5,6]\nprint(a + b)", "fixed_code": "a = [1,2,3]\nb = [4,5,6]\nprint(a + b)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\nprint('Loop ended')", "fixed_code": "for i in range(10):\n    print(i+1)\nprint('Loop ended', end=' ')"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(6): print(i)"}
{"faulty_code": "import os\nwith open('large_file.txt', 'r') as f:\n    data = f.read()\nprint(data)", "fixed_code": "import os\ndef process_file(filename):\n    with open(filename, 'rb') as f:\n        for chunk in f:\n            print(chunk.decode())\nprocess_file('large_file.txt)"}
{"faulty_code": "for i in range(len(list)):\n    if i == len(list)-1:\n        break\n", "fixed_code": "for i in range(len(list)):\n    if i < len(list)-1:\n        continue\n"}
{"faulty_code": "def calculate_average(numbers):\n    total = sum(numbers)\n    return total / len(numbers) if len(numbers) !=0 else 0", "fixed_code": "def calculate_average(numbers):\n    total = sum(numbers)\n    if len(numbers) == 0:\n        return 0\n    return total / len(numbers)"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[4])", "fixed_code": "my_list = [1,2,3]\nprint(my_list[4:5])"}
{"faulty_code": "print('Hello')", "fixed_code": "print('Hello')"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This loop misses printing 11", "fixed_code": "for i in range(11):\n    print(i)"}
{"faulty_code": "my_list = [10,20,30]\nprint(my_list[-1])", "fixed_code": "my_list = [10,20,30]\nprint(my_list[2])"}
{"faulty_code": "with open('file.txt', 'rb') as f:\n    f.seek(0)", "fixed_code": "with open('file.txt', 'r') as f:\n    f.seek(0)"}
{"faulty_code": ["print('Hello', end=' )", "a = []\na.append(1)", "data['key'] = data['key']"], "fixed_code": ["print('Hello', end=' )", "a = [ ]\na.append(1)", "data['key'] = data.get('key', 0)"]}
{"faulty_code": "import pandas as pd\ndf = pd.read_csv('data.csv', index_col=0)\nprint(df['column'][3:7])", "fixed_code": "import pandas as pd\ndf = pd.read_csv('data.csv', index_col=0)\nprint(df.loc[3:6, 'column'])"}
{"faulty_code": "for i in range(5):\n    print(i)\nprint('Loop ended at', i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "try:\n    list.pop(index=10)\nexcept IndexError:\n    print('Index not found')", "fixed_code": "try:\n    lst = [1,2,3]\n    if index >= len(lst) or index < 0:\n        print('Index out of bounds')\n    else:\n        list.pop(index=index)\nexcept IndexError:\n    print('Index not found')\nprint('List:', list)"}
{"faulty_code": "a = 5\nb = a + 3\na = b", "fixed_code": "a = 5\nb = a + 3\nb = a"}
{"faulty_code": "for i in range(3):\n    print(i+1)", "fixed_code": "for i in range(3):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "a = [1,2,3]\nb = a[1:3]\nc = b[::-1]", "fixed_code": "a = [1,2,3]\nb = a[1:3]\nc = b[::-1]"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')\n    return", "fixed_code": "def greet(name):\n    print('Hello, ' + name + '!')\n    return None"}
{"faulty_code": "while True:\n    print('Waiting...')\n    time.sleep(1)\n    if someCondition: # Note the typo here\n        break", "fixed_code": "import time\nwhile True:\n    print('Waiting...')\n    time.sleep(1)\n    if some_condition: # Fixed the typo to 'some_condition'\n        break"}
{"faulty_code": "print('Hello, world!')", "fixed_code": "print('Hello, world!'"}
{"faulty_code": "try:\n    f = open('nonexistentfile.txt', 'r')\nexcept FileNotFoundError:\n    print('File not found')\nfinally:\n    f.close()", "fixed_code": "try:\n    f = open('nonexistentfile.txt', 'r')\nexcept FileNotFoundError as e:\n    print(f'File not found: {e}')\nfinally:\n    f.close()"}
{"faulty_code": "s = 'hello'; print(s[3:])", "fixed_code": "s = 'hello'; print(s[2:])"}
{"faulty_code": "a = [1,2,3]\na[4] = 'x'", "fixed_code": "a = [1,2,3]"}
{"faulty_code": "for i in range(10):\n    print(i)\n", "fixed_code": "for i in range(10, 20):\n    print(i)\n"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "my_list = [1, 2, 3]\nprint(my_list[-1])", "fixed_code": "my_list = [1, 2, 3]\nprint(my_list[-1])"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "if x not in [1,2,3]:\n    print('Not found')", "fixed_code": "x = [1,2,3]\nif x not in [1,2,3]:\n    print('Not found')"}
{"faulty_code": ["short_snippet", "medium_snippet", "long_snippet"], "fixed_code": ["fixed_short", "fixed_medium", "fixed_long"]}
{"faulty_code": "\"hello\" + \"world\"", "fixed_code": "'hello' + 'world'"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": ["short_snippet", "medium_snippet", "long_snippet"], "fixed_code": ["fixed_short", "fixed_medium", "fixed_long"]}
{"faulty_code": "import csv\n\nwith open('data.csv', 'r') as file:\n    reader = csv.reader(file)\n    next(reader)\n    for row in reader:\n        print(row[0], row[1])", "fixed_code": "import csv\n\nwith open('data.csv', 'r') as file:\n    reader = csv.DictReader(file)\n    for row in reader:\n        print(row['Name'], row['Age'])\n"}
{"faulty_code": "for i in range(10):\n    print(i)\n", "fixed_code": "for i in range(10)\n    print(i)\n"}
{"faulty_code": "my_list = [1, 2, 3]\nfixed_index = [i for i in my_list if i > 2] # This will throw a TypeError because you can't iterate over integers", "fixed_code": "my_list = [1, 2, 3]\nfixed_index = [i for i in my_list if i > 2]"}
{"faulty_code": "print('Hello, world''", "fixed_code": "print('Hello, world')"}
{"faulty_code": "for i in range(1,len(numbers)):\n    if numbers[i]%2==0:\n        result.append(numbers[i])", "fixed_code": "for i in range(len(numbers)):\n    if numbers[i]%2==0:\n        result.append(numbers[i])"}
{"faulty_code": "i = 0\nwhile i < 10:\n    print(i)\ni += 2", "fixed_code": "i = 0\nwhile i < 10:\n    print(i)\ni += 1"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "a = [1,2,3]; b = [4,5,6]; a.append(b[0])", "fixed_code": "a = [1,2,3]; b = [4,5,6]; a.append(b.pop(0))"}
{"faulty_code": "def calculate_stats(data):\n    mean = sum(data)/len(data)\n    median = sorted(data)[len(data)//2]\n    return {'mean': mean, 'median': median}\n\n# Example usage:\nresult = calculate_stats([1,2,3,4,5])\nprint(result['std_dev'])", "fixed_code": "def calculate_stats(data):\n    mean = sum(data)/len(data)\n    sorted_data = sorted(data)\n    n = len(sorted_data)\n    median = (sorted_data[n//2 -1] + sorted_data[n//2])/2 if n % 2 ==0 else sorted_data[n//2]\n    return {'mean': mean, 'median': median}\n\n# Example usage:\nresult = calculate_stats([1,2,3,4,5])\nprint(result['std_dev'])"}
{"faulty_code": "try:\n    print('Hello')\nexcept FileNotFoundError:\n    print('File not found')", "fixed_code": "try:\n    print('Hello')\nexcept FileNotFoundError as e:\n    print(f'Error: {e}')", "faulty_code_2": "a = [1, 2, 3]\nb = a\nb.append(4)\na[0] = 5", "fixed_code_2": "a = [1, 2, 3]\nb = list(a)  # Create a new list instead of referencing the same object\nb.append(4)\nprint(a[0])  # This will still be 1 after appending to b"}
{"faulty_code": "try:\n    x = int(input())\nexcept ValueError:\n    print('Please enter a valid number')\n", "fixed_code": "try:\n    x = int(input())\nexcept ValueError as e:\n    print(f'Invalid input: {e}')\n"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(1,5):\n    print(i+1)", "fixed_code": "for i in range(1,5):\n    print(i*2)"}
{"faulty_code": "a = [1,2,3]\nb.append(4)", "fixed_code": "a = [1,2,3]\nb = a.copy()\nb.append(4)"}
{"faulty_code": "try:\n    file = open('nonexistent.txt', 'r')\nexcept FileNotFoundError:\n    print('File not found')\nelse:\n    data = file.read()\n    print(data)", "fixed_code": "try:\n    with open('nonexistent.txt', 'r') as f:\n        data = f.read()\nexcept FileNotFoundError:\n    print('File not found')\nelse:\n    print(data)"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    print(arr[i])"}
{"faulty_code": "for i in range(10):<br/>\n    print(i)", "fixed_code": "for i in range(9):<br/>\n    print(i)"}
{"faulty_code": "my_list = [1,2,3]\nfor i in range(len(my_list)):\n    print(my_list[i])", "fixed_code": "my_list = [1,2,3]\nfor i in range(len(my_list)-1):\n    print(my_list[i])"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "def greet(name):\n    return name", "fixed_code": "def greet(name):\n    if not name:\n        return 'Hello'"}
{"faulty_code": "for i in range(10):<br/>\n    print(i+1)", "fixed_code": "for i in range(10):<br/>\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "numbers = [1, 2, 3]\nsum = sum(numbers[0:3])\nprint(sum)", "fixed_code": "numbers = [1, 2, 3]\ntry:\n    sum = sum(numbers[0:3])\nexcept IndexError:\n    print('List index out of range')\nprint(sum)"}
{"faulty_code": "arr = [1,2,3]\nprint(arr[3])", "fixed_code": "arr = [1,2,3]\nprint(arr[2])"}
{"faulty_code": "result = []\nfor i in range(len(list)):\n    result.append(list[i])", "fixed_code": "result = [item for item in list]"}
{"faulty_code": "for i in range(10,20):\n    print(i)\n\n# This code runs from 10 (inclusive) to 20 (exclusive), which is correct. No fix needed.", "fixed_code": "for i in range(10,20):\n    print(i)"}
{"faulty_code": "for i in range(6):\n    print(i)", "fixed_code": "for i in range(len(list)):\n    print(i)"}
{"faulty_code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1) + n", "fixed_code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)"}
{"faulty_code": "for i in range(5):\\n    print(i)", "fixed_code": "for i in range(5):\\n    print(i)"}
{"faulty_code": "a = [1,2,3]\nb.append(4)\nprint(a)", "fixed_code": "a = [1,2,3]\na.append(4)\nprint(a)"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[5])", "fixed_code": "my_list = [1,2,3]\nif len(my_list) > 5:\n    print('List is long enough')\nelse:\n    print('Index out of bounds')"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(len(list)):\n    if list[i] == target:\n        return list[i]\nelse:\n    return None", "fixed_code": "def find_element(lst, target):\n    for i in range(len(lst)):\n        if lst[i] == target:\n            return lst[i]\n    return None"}
{"faulty_code": "try:\n    f = open('nonexistent.txt', 'r')\nexcept FileNotFoundError:\n    pass\nwith open('nonexistent.txt', 'a') as file:\n    file.write('data')", "fixed_code": "try:\n    with open('nonexistent.txt', 'w') as file:\n        file.write('Initial file created!')\nexcept FileNotFoundError:\n    with open('nonexistent.txt', 'w') as file:\n        file.write('File not found. Creating now.')\nwith open('nonexistent.txt', 'a') as file:\n    file.write('Data appended: data')"}
{"faulty_code": "for i in range(len(arr)):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    print(arr[i])"}
{"faulty_code": "for i in range(10):\n    print(i*2)\n\n# This code runs from 0 to 9, which is correct. What's the issue?", "fixed_code": "for i in range(5):\n    print(i*2)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "n = 5\nm = 'hello'\nprint(n + m)", "fixed_code": "n = 5\nm = '6'\nprint(int(m) + n)"}
{"faulty_code": "lst = [1,2,3]\nprint(lst[4])", "fixed_code": "lst = [1,2,3]\nprint(lst[3])"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "my_list = [1]\nprint(my_list[2])", "fixed_code": "my_list = [1]\nprint(len(my_list)-1)"}
{"faulty_code": "for i in range(10):\n    print(i)\n", "fixed_code": "for i in range(5):\n    print(i)\n"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')", "fixed_code": "def greet(name):\n    print(f'Hello, {name}!')"}
{"faulty_code": "for i in range(0, n):\n    print(i)", "fixed_code": "for i in range(n):\n    print(i)"}
{"faulty_code": "for i in range(1,5):\n    print(i)", "fixed_code": "for i in range(1,5):\n    print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i < len(list):\n        print(list[i])\n"}
{"faulty_code": "for i in range(3):\n    print(i)", "fixed_code": "for i in range(3):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)\n\nprint('Loop did not terminate')", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)\nprint('Next')", "fixed_code": "for i in range(5):\n    print(i+1)\nprint(i+1)"}
{"faulty_code": "a = [1,2,3]\nb = a\nprint(a)\na.remove(2)\nprint(a)", "fixed_code": "a = [1,2,3]\nb = a.copy()\nprint(b)\na.remove(2)\nprint(a)"}
{"faulty_code": "for i in range(10):\n    print(i)\n\n# This loop runs indefinitely because it lacks an exit condition", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    if i < len(arr)-1:\n        print(arr[i])\n\n# OR \n\nfor i in range(len(arr)-1):\n    print(arr[i])"}
{"faulty_code": "if x:y: print('x is less than y')", "fixed_code": "if (x < y):\n    print('x is less than y')"}
{"faulty_code": "a = [1,2,3]\nb = a[4]", "fixed_code": "a = [1,2,3]\nb = a[3]"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "try:\n    print(1/0)\nexcept ZeroDivisionError:\n    print('Divided by zero!)'\n", "fixed_code": "try:\n    print(1/0)\nexcept ZeroDivisionError as e:\n    print(f'Divided by zero: {e}')\n"}
{"faulty_code": "my_list = [1,2]; print(my_list[3])", "fixed_code": "my_list = [1,2]; print(my_list[2])"}
{"faulty_code": "my_list = [1,2,3]\nmy_set = set(my_list)\nmy_list.append(4)\nprint(my_set - my_list)", "fixed_code": "my_list = [1,2,3]\nmy_set = set(my_list)\nnew_list = list(my_set - {4})\nprint(new_list)"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(6): print(i)"}
{"faulty_code": "data = {'key': [1,2,3]}", "fixed_code": "if not isinstance(data, dict):\n    data = {}"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# Short example with off-by-one error\nfor i in range(5,20):\n    print(i)", "fixed_code": "for i in range(10):\n    print(i+1)\n\n# Fixed version without the off-by-one error\nfor i in range(5,20,1):\n    print(i)"}
{"faulty_code": "try:\n    x = int(input('Enter a number: '))\nexcept ValueError:\n    print('Please enter a valid integer')", "fixed_code": "try:\n    x = int(input('Enter a number: '))\nexcept ValueError as e:\n    print(f'Invalid input: {e}')"}
{"faulty_code": ["short_snippet_with_bug", "medium_snippet_with_bug"], "fixed_code": ["medium_snippet_with_fix", "long_snippet_with_fix"]}
{"faulty_code": "file = open('data.txt', 'r')\ncontent = file.read()\nprint(content)\nfile.close()", "fixed_code": "with open('data.txt', 'r') as file:\n    content = file.read()\n    print(content)"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "my_list = [1, 2, 3]; print(my_list[3])", "fixed_code": "my_list = [1, 2, 3]; print(my_list[2])"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(0, len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "def calculate_average(numbers):\n    total = sum(numbers)\n    count = len(numbers)\n    return total / count", "fixed_code": "def calculate_average(numbers):\n    total = sum(numbers)\n    count = len(numbers)\n    if count == 0:\n        return None\n    return total / count"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n", "fixed_code": "for i in range(10):\n    print(i)\n"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(1, n-1):\n    print(i)", "fixed_code": "for i in range(n):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\n# This loop should run from 0 to 4 but stops at 3 due to an off-by-one error.", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[0])", "fixed_code": "my_list = [1,2,3]\nprint(my_list[-1])"}
{"faulty_code": "a = [1,2,3]\na[3] = 4", "fixed_code": "a = [1,2,3]\na[3] = 4"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "my_list = [1,2]\nmy_list[10].append(3)", "fixed_code": "my_list = [1,2]\nmy_list.extend([3])"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\n# Missing colon after loop header", "fixed_code": "for i in range(5):\n    print(i+1)\n\n# No missing colon"}
{"faulty_code": "for i in range(5):\n    print(i)\n\nj = 0\nfor j in range(5):\n    print(j)", "fixed_code": "for i in range(5):\n    print(i)\n\nfor i in range(5):\n    print(i)"}
{"faulty_code": "try:\n    file = open('nonexistent.txt', 'r')\nexcept IOError:\n    print(\"File not found\")", "fixed_code": "try:\n    file = open('nonexistent.txt', 'r')\nexcept IOError as e:\n    print(f\"Error opening file: {e}\")"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(9): print(i)"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[4])", "fixed_code": "my_list = [1,2,3]\nprint(my_list[3])"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n", "fixed_code": "for i in range(10):\n    print(i)\n"}
{"faulty_code": "my_list = [1,2,3]; print(my_list[4])", "fixed_code": "my_list = [1,2,3]; if len(my_list) > index: print(my_list[index]) else: print('Index out of range')"}
{"faulty_code": "for i in range(50):\n    print(i+1)\n\n# This code is missing the last element, which should be 50.", "fixed_code": "for i in range(50):\n    print(i)\n"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(1, len(list)):\n    print(list[i-1])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(3):\n    print(i+1)", "fixed_code": "for i in range(3):\n    print(i+1)"}
{"faulty_code": "x = [1,2,3]; print(x[3])", "fixed_code": "x = [1,2,3]; print(x[2])"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i >= len(list):\n        break\n    print(list[i])"}
{"faulty_code": "for i in range(10)\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "try:\n    print(1/0)\nexcept ZeroDivisionError:\n    print('Denominator is zero')", "fixed_code": "try:\n    print(1/0)\nexcept ZeroDivisionError as e:\n    print(f'Division by {e.value} is not allowed')\nexcept:\n    print('An error occurred')"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10, 20):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)\n\nprint('Loop completed')", "fixed_code": "for i in range(10):\n    print(i)\n\nprint('Loop completed')\n"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(len(list)-1):\n    if list[i] > list[i+1]:\n        swap list[i] and list[i+1]\n", "fixed_code": "for i in range(len(list)-1):\n    if list[i] > list[i+1]:\n        temp = list[i]\n        list[i] = list[i+1]\n        list[i+1] = temp\n"}
{"faulty_code": "for i in range(1,5):\n    print(i)", "fixed_code": "for i in range(1,6):\n    print(i)"}
{"faulty_code": "a = [1,2,3]\nb = [4,5,6]\nprint(a + b)", "fixed_code": "a = [1,2,3]\nb = [4,5,6]\nprint(a + b)"}
{"faulty_code": "for i in range(len(arr)):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    print(arr[i], end=' ')\n"}
{"faulty_code": "for i in range(n+1):\n    print(i)\n\ndef my_func(arr):\n    for i in range(len(arr)):\n        if arr[i] == 'a':\n            return arr[i+1]\n\n# Long code here", "fixed_code": "for i in range(n):\n    print(i)\n\ndef my_func(arr):\n    for i in range(len(arr)):\n        if arr[i] == 'a':\n            try:\n                return arr[i+1]\n            except IndexError:\n                return None\n\n# Long fixed code here"}
{"faulty_code": "my_list = [1, 2]\nfor i in range(len(my_list)):\n    print(i)", "fixed_code": "my_list = [1, 2]\nfor i in range(len(my_list) - 1):\n    print(i)"}
{"faulty_code": "import pandas as pd\ndf = pd.read_csv('data.csv', index_col=0)\nprint(df[5:])", "fixed_code": "import pandas as pd\ndf = pd.read_csv('data.csv', index_col=0)\nif '5' not in df.index:\n    print('Index not found')\nelse:\n    print(df[df.index >= 5])"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    print(arr[i])"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i+1])", "fixed_code": "for i in range(len(list)):\n    if i < len(list)-1:\n        print(list[i+1])"}
{"faulty_code": "for i in range(6):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "a = [1,2,3]\na.append('4')", "fixed_code": "a = [1,2,3]\na.append(['4'])"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "my_list = [1,2,3]\nmy_list.pop(0)\nmy_list.pop(0)\nprint(my_list[0])", "fixed_code": "my_list = [1,2,3]\ntry:\n    my_list.pop(0)\nexcept IndexError:\n    pass\ntry:\n    my_list.pop(0)\nexcept IndexError:\n    pass\nprint(my_list[0])"}
{"faulty_code": "numbers = [1,2,3]\nnumbers.sort(reverse=True)\nprint(numbers[0])", "fixed_code": "numbers = [1,2,3]\nnumbers.sort(reverse=True)\nprint(numbers[-1])"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(2,6):\n    print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i-1])", "fixed_code": "for i in range(len(list)):\n    if i > 0:\n        print(list[i-1])\n    else:\n        print('First element')"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(10): print(i+1)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "a = [1,2,3]\na[3] = 'x'\nprint(a)", "fixed_code": "a = [1,2,3]\na[2] = 'x'\nprint(a)"}
{"faulty_code": "for i in range(0, len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "for i in range(len(list)):\n    if list[i] == target:\n        return True\nreturn False", "fixed_code": "target = None\nlist = [1,2,3]\ntarget = list[0]\ndefault = False\nif target in list:\n    return True\nelse:\n    return default"}
{"faulty_code": "try:\n    x = int(input('Enter a number: '))\nexcept ValueError:\n    print('Please enter a valid integer')", "fixed_code": "try:\n    x = int(input('Enter a number: '))\nexcept ValueError as e:\n    print(f'Invalid input: {e}')\nexcept KeyboardInterrupt:\n    print('Operation cancelled')"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(4): print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(len(lst)):\n    print(i)"}
{"faulty_code": ["for i in range(5):", "\tprint(i)", "    print(i+1)"], "fixed_code": ["for i in range(5):", "\tprint(i)", "    print(i + 1)"]}
{"faulty_code": "for i in range(10):\n    print(i)\n\nprint('Loop did not reach 10')", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[5])", "fixed_code": "my_list = [1,2,3]\nif len(my_list) > 5:\n    print(my_list[5])\nelse:\n    print('Index out of range')"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "for i in range(len(item)):\n    print(item[i+1])", "fixed_code": "for i in range(len(item)):\n    print(item[i])"}
{"faulty_code": "for i in range(len(arr)-1):\n    print(arr[i])", "fixed_code": "for i in range(len(arr)):\n    if i < len(arr)-1:\n        print(arr[i])\n\n# OR \n\nfor i in range(len(arr)-1):\n    print(arr[i])"}
{"faulty_code": "a = [1,2,3]\nb = [4,5,6]\nprint(a + b)", "fixed_code": "a = [1,2,3]\nb = [4,5,6]\nprint(a + b)"}
{"faulty_code": "print(x)", "fixed_code": "x = input().strip()\nprint(x)"}
{"faulty_code": "for i in range(5):\n    my_list.append(i+1)", "fixed_code": "for i in range(6):\n    my_list.append(i+1)"}
{"faulty_code": "for i in range(len(lst)):\n    print(lst[i])", "fixed_code": "for i in range(len(lst)):\n    print(lst[i])"}
{"faulty_code": "print('Hello, world!')", "fixed_code": "print('Hello, world!')"}
{"faulty_code": ["for i in range(5):", "    print(i+1)", "try:\n    print(1/0)\nexcept ZeroDivisionError:\n    print('Denominator is zero')", "import os\nos.remove('test_file')\nexcept FileNotFoundError:\n    print('File not found')"], "fixed_code": ["for i in range(5):", "    print(i)", "try:\n    print(1/(0+1))\nexcept ZeroDivisionError:\n    print('Denominator is zero')", "import os\nos.remove('test_file')\nexcept FileNotFoundError:\n    print('File not found')."]}
{"faulty_code": "for i in range(len(list)):\n    if list[i] == target and (i % 2) == 0:\n        print('Found at index', i)", "fixed_code": "for i in range(len(list)):\n    if list[i] == target and (i % 2) == 1:\n        print('Found at index', i)\n", "faulty_code_2": "def my_func():\n    print(x)", "fixed_code_2": "def my_func():\n    global x\n    print(x)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\nprint('Loop ended')", "fixed_code": "for i in range(10):\n    print(i+1)\nprint('Loop ended after iteration 9')"}
{"faulty_code": "try:\n    x = int(input('Enter a number: '))\nexcept ValueError:\n    print('Please enter a valid integer')", "fixed_code": "try:\n    x = int(input('Enter a number: '))\nexcept ValueError as e:\n    print(f'Please enter a valid integer: {e}')\nexcept:\n    print('An unexpected error occurred')"}
{"faulty_code": "for i in range(10)\n    print(i+1)\n\n# This loop is off by one; it should go up to 9 inclusive.", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "try:\n    print(1/0)\nexcept ZeroDivisionError as e:\n    print('division by zero occurred')", "fixed_code": "try:\n    print(1/0)\nexcept ZeroDivisionError as e:\n    print(f'division by zero occurred: {e}')\n"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "try:\n    print(1/0)\nexcept ZeroDivisionError:\n    print('Cannot divide by zero')", "fixed_code": "try:\n    print(1/0)\nexcept ZeroDivisionError:\n    print('Cannot divide by zero')"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[3])", "fixed_code": "my_list = [1,2,3]\nprint(my_list[2])"}
{"faulty_code": "print('Hello, world!')", "fixed_code": "print('Hello, world!')"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i+1]-list[i])", "fixed_code": "for i in range(len(list)-1):\n    if i+1 < len(list):\n        print(list[i+1]-list[i])"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(len(numbers)):\n    numbers.append(numbers[i] + numbers[i+1])", "fixed_code": "for i in range(len(numbers)-1):\n    numbers.append(numbers[i] + numbers[i+1])"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\n# This loop runs from 0 to 4 (inclusive), so it should print 1 to 5. The faulty code prints 1 to 6.", "fixed_code": "for i in range(5):\n    print(i+1)"}
{"faulty_code": "for i in range(len(prices)): if i < 5: print(i)", "fixed_code": "for i in range(6): if i < 5: print(i)"}
{"faulty_code": "for i in range(0,5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for x in range(5): print(x)", "fixed_code": "for x in range(5,10): print(x)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(4):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(10)\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i+1)"}
{"faulty_code": "my_list = [1,2,3]\nindex = my_list.index(4)\nprint(index)", "fixed_code": "my_list = [1,2,3]\ntry:\n    index = my_list.index(4)\nexcept ValueError:\n    print('Index not found')\nprint(index)"}
{"faulty_code": "from collections import Counter as c; c([1,2,2]).most_common(2)", "fixed_code": "from collections import Counter as c; c([1,2,2]).most_common()"}
{"faulty_code": "class MyClass:\n    pass\n    \n    @staticmethod\n    def my_method():\n        pass", "fixed_code": "class MyClass:\n    @staticmethod\n    def my_method():\n        pass"}
{"faulty_code": "a = [1,2,3]\nb = a[4:6]", "fixed_code": "a = [1,2,3]\nb = a[4:5]"}
{"faulty_code": "import math\nmath.sqrt(4", "fixed_code": "import math\nmath.sqrt(4)"}
{"faulty_code": "try:\n    a = int(input('Enter an integer: '))\nexcept ValueError:\n    print('Please enter a valid number')\nprint(a * 2)", "fixed_code": "try:\n    a = int(input('Enter an integer: '))\nexcept ValueError:\n    print('Please enter a valid number')\nprint(a * 2)"}
{"faulty_code": "try:\n    print(1/0)\nexcept ZeroDivisionError:\n    print('Denominator cannot be zero')", "fixed_code": "try:\n    print(1/(0+1))\nexcept ZeroDivisionError:\n    print('Denominator cannot be zero')"}
{"faulty_code": "for i in range(10)\nprint(i)", "fixed_code": "for i in range(10, 20)\nprint(i)"}
{"faulty_code": "a = [1,2,3]\nb.append(4)\nprint(a)", "fixed_code": "a = [1,2,3]\na.append(4)\nprint(a)"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(len(list)): print(list[i])", "fixed_code": "for i in range(len(list)):\n    if i < len(list):\n        print(list[i])"}
{"faulty_code": "for i in range(len(lst)):\n    if lst[i-1] > lst[i]:\n        swap = lst[i]\n        lst[i] = lst[i-1]\n        lst[i-1] = swap", "fixed_code": "for i in range(len(lst)):\n    if lst[i-1] > lst[i]:\n        swap = lst[i]\n        lst[i] = lst[i-1]\n        lst[i-1] = swap"}
{"faulty_code": "numbers = [1,2,3];\nsum = sum(numbers[1:]) / len(numbers);\nprint(sum)", "fixed_code": "numbers = [1,2,3];\nsum = (sum(numbers) ) / len(numbers);\nprint(sum)"}
{"faulty_code": "try:\n    x = int(input('Enter a number: '))\nexcept ValueError:\n    print('Please enter a valid integer')", "fixed_code": "try:\n    x = int(input('Enter a number: '))\nexcept ValueError as e:\n    print(f'Invalid input: {e}')\n"}
{"faulty_code": "print('Hello, world!')\n\nx = [1,2,3]\nsum_x = sum(x)\nprint('Sum is', sum_x)", "fixed_code": "print('Hello, world!')\nx = [1, 2, 3]\nsum_x = sum(x)\nprint('Sum is', sum_x)"}
{"faulty_code": "my_list = [1, 2, 3]\n\nmy_list.append(4)", "fixed_code": "my_list = [1, 2, 3]\n\nmy_list.append(4)"}
{"faulty_code": "for i in range(5):\n    if i == 4:\n        print(i)\n\nmy_list = []\nif my_list:\n    n = len(my_list)\n    for i in range(n):\n        print(my_list[i])", "fixed_code": "my_list = []\nif my_list:\n    n = len(my_list)\n    for i in range(n):\n        if i < n:\n            print(my_list[i])"}
{"faulty_code": "for i in range(len(list)+1):\n    print(i)", "fixed_code": "for i in range(len(list)):\n    print(i)"}
{"faulty_code": "numbers = [1,2,3]\navg = sum(numbers)/len(numbers)\nif avg > 0:\n    print('Average is positive')\nelse:\n    print('Average is zero or negative')", "fixed_code": "numbers = [1,2,3]\navg = sum(numbers) / len(numbers)\ntry:\n    if avg > 0:\n        print('Average is positive')\n    else:\n        print('Average is zero or negative')\nexcept ZeroDivisionError:\n    print('List is empty')"}
{"faulty_code": "for i in range(1, 5):\n    print(i)\n\nprint('Missing value')", "fixed_code": "for i in range(1, 6):\n    print(i)\n\nprint('Missing value')"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)\nprint('Next item')", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "a = [1,2,3]\nb = [4,5,6]\nc = a + b\nprint(c[0])", "fixed_code": "a = [1,2,3]\nb = [4,5,6]\nc = a + b\nprint(c[0] if len(c) > 0 else None)"}
{"faulty_code": "s = 'hello'; print(s[3])", "fixed_code": "s = 'hello'; print(s[3])"}
{"faulty_code": "def greet(name):\n    return f\"Hello, {name}!\"\n", "fixed_code": "def greet(name):\n    return f\"Hello, {name}!\"\n"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(len(numbers)):\n    if numbers[i] > numbers[i+1]:\n        numbers[i], numbers[i+1] = numbers[i+1], numbers[i]\n", "fixed_code": "for i in range(len(numbers)-1):\n    if numbers[i] > numbers[i+1]:\n        numbers[i], numbers[i+1] = numbers[i+1], numbers[i]\n"}
{"faulty_code": "my_list = [1,2,3]\nnew_list = []\nfor x in my_list:\n    new_list.append(x)\nprint(new_list[0])", "fixed_code": "my_list = [1,2,3]\nnew_list = [x for x in my_list]"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "for i in range(5): print(i+1)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')", "fixed_code": "def greet(name):\n    print(f'Hello, {name}!')"}
{"faulty_code": "for i in range(10)\n    print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "try:\n    x = int(input('Enter a number: '))\nexcept ValueError:\n    print('Please enter a valid integer')", "fixed_code": "try:\n    x = int(input('Enter a number: '))\nexcept ValueError as e:\n    print(f'Invalid input error: {e}')\nexcept KeyboardInterrupt:\n    print('Operation cancelled')"}
{"faulty_code": "for i in range(len(numbers)-1):\n    print(numbers[i])\n\n# This loop misses the last element because it stops at len(numbers)-2", "fixed_code": "for i in range(len(numbers)-1, -1, -1):\n    print(numbers[i])"}
{"faulty_code": "print('Hello, world!')", "fixed_code": "print('Hello, world!')"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(len(list)):\n    list.pop(i)", "fixed_code": "for i in reversed(range(len(list)))):\n    list.pop(i)"}
{"faulty_code": "a = [1,2,3]\na[5] = 'x'", "fixed_code": "a = [1,2,3]\na[4] = 'x'"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "nums = [1,2,3,4]\neven_nums = [x for x in nums if x%2==0]", "fixed_code": "nums = [1,2,3,4]\neven_nums = [x for x in nums if x % 2 == 0]"}
{"faulty_code": "my_list = [1,2,3]\nindex = my_list[2]\nprint(index)\n\nmy_list.append(4)\nprint(my_list)", "fixed_code": "my_list = [1, 2, 3]\nindex = my_list[2]\nprint(index)\n\nmy_list.append(4)\nprint(my_list)"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "print('Hello, world!')\n\n", "fixed_code": "print('Hello, world!')\n"}
{"faulty_code": "my_list = [5,3,7]\nfor x in my_list:\n    print(x)\nprint(list)", "fixed_code": "my_list = [5,3,7]\nfor x in my_list:\n    print(x)\nprint(my_list2)"}
{"faulty_code": "for i in range(1,5):\n    print(i)", "fixed_code": "for i in range(1,6):\n    print(i)"}
{"faulty_code": "for i in range(0,len(primes)):\n    primes[i] = primes[i] + 1\n    print(primes)", "fixed_code": "for i in range(len(primes)):\n    primes[i] += 1\n    print(primes)"}
{"faulty_code": ["s = 'Hello'\nprint(s[2:])", "for i in range(10):\n    print(i)", "with open('nonexistent.txt', 'r') as f:\n    pass"], "fixed_code": ["s = 'Hello'\nprint(s[2:])", "for i in range(len(s)):\n    print(i)", "try:\n    with open('nonexistent.txt', 'r') as f:\n        pass\nexcept FileNotFoundError:\n    print('File not found')"]}
{"faulty_code": "for i in range(5): print(i+1)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(1,5): print(i)", "fixed_code": "for i in range(1,5): print(i ** 2)"}
{"faulty_code": "for i in range(1,5):\n    print(i)\nrange(0,5)", "fixed_code": "for i in range(1,5):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)\n\n# Medium example:\nfile = open('nonexistent.txt', 'r')", "fixed_code": "for i in range(6):\n    print(i)\n\ntry:\n    file = open('nonexistent.txt', 'r')\nexcept FileNotFoundError:\n    print(\"File not found\")"}
{"faulty_code": "for i in range(len(list)):\n    if list[i] == target:\n        return list[i+1]\nelse:\n    return None", "fixed_code": "for i in range(len(list)):\n    if list[i] == target:\n        return list[i+1] if (i+1) < len(list) else None\nelse:\n    return None"}
{"faulty_code": "for i in range(10):\n    print(i)\n\nprint('Missing')", "fixed_code": "for i in range(10):\n    print(i)\n\nprint('Ten items')\n"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n\n# After introducing an off-by-one error\nfor i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i+1)"}
{"faulty_code": "for i in range(10):\\n    print(i)", "fixed_code": "for i in range(10):\\n    print(i)"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name", "fixed_code": "def greet(name):\n    print('Hello, ' + name)"}
{"faulty_code": "for i in range(5+1):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "a = [1,2,3]\nb = a[0:2]\nc = b[::-1]\nd = c*2", "fixed_code": "a = [1,2,3]\nb = a[0:2].copy()\nc = b[::-1]\nd = c * 2"}
{"faulty_code": "for i in range(10):\n    print(i)\nprint('Loop will never end')", "fixed_code": "for i in range(10):\n    print(i)\nif i == 9:\n    break\nprint('Loop will never end')"}
{"faulty_code": "try:\n    open('nonexistentfile.txt', 'r')\nexcept IOError:\n    print('File not found')", "fixed_code": "try:\n    if os.path.exists('nonexistentfile.txt'):\n        open('nonexistentfile.txt', 'r')\n    else:\n        print('File not found')\nexcept IOError:\n    print('Failed to read file')\n"}
{"faulty_code": "for i in range(10):\n    print(i)\nprint('Loop completed')\n\n# This code has no bug; it prints numbers from 0 to 9 and then 'Loop completed'\n", "fixed_code": "for i in range(10):\n    print(i)\nprint('Loop completed')"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)-1):\n    print(list[i])"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')\n    print('Welcome!')", "fixed_code": "def greet(name):\n    print('Hello, ' + name + '!')\n    print('Welcome!')"}
{"faulty_code": ["print('Hello, world!')", "for i in range(0, n):"], "fixed_code": ["print('Hello, world!')", "for i in range(n):"]}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "try:\n    for i in range(len(list)):\n        print(list[i])\nexcept IndexError:\n    print('Index out of bounds')\n"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(len(list)):\n    list[i] = 'new_value'\n\n# This code does not handle empty lists correctly", "fixed_code": "for i in range(len(list)):\n    if i < len(list):\n        list[i] = 'new_value'\n"}
{"faulty_code": "for i in range(5): print(i+1)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": ["print('Hello, world!')", "# Incrementing a variable incorrectly\n# Example: i = 5\ni += 2", "\nmedium length faulty example:\nfor i in range(0, len(list)):\n    list.append(i)", "\nlonger faulty example with incorrect string formatting:\nprint('The value is {0}', 10).format(5)"], "fixed_code": ["print('Hello, world!')", "# Incrementing a variable incorrectly\n# Example: i = 5\ni += 2", "\nmedium length fixed example:\nfor i in range(0, len(list)):\n    list.append(i + 2)", "\nlonger fixed example with correct string formatting:\nprint('The value is {0}', 10).format(10)"]}
{"faulty_code": "for i in range(10):\n    print(i)\n\n# Example of a common off-by-one error", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "try:\n    print(1/0)\nexcept ZeroDivisionError:\n    print('Denominator is zero')", "fixed_code": "try:\n    print(1/(0+1))\nexcept ZeroDivisionError:\n    print('Denominator is zero')"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "my_list = [1,2,3]\nprint(my_list[3])", "fixed_code": "my_list = [1,2,3]\nprint(my_list[2])"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)\n\nprint('Loop completed.')", "fixed_code": "for i in range(10):\n    print(i)\n\nprint('Loop completed.')"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "if x == y:\n    print('Equal')", "fixed_code": "if x == y:\n    print('Equal')\n\nif x != y:\n    print('Not Equal')"}
{"faulty_code": "my_list = [1,2,3]\ndef get_element(lst):\n    return lst{i}", "fixed_code": "my_list = [1,2,3]\ndef get_element(lst):\n    return lst[i]"}
{"faulty_code": "a = [1,2,3]\na[3]", "fixed_code": "a = [1,2,3]\na[2]"}
{"faulty_code": "for i in range(10):\n    print(i)\n\n# This code has an off-by-one error. It prints from 0 to 9.", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(len(lst)-1):\n    print(lst[i])", "fixed_code": "for i in range(len(lst)):\n    if i < len(lst)-1:\n        print(lst[i])\n    else:\n        break"}
{"faulty_code": "while True:\n    print('Hello')\n", "fixed_code": "while True:\n    input()  # Press Enter to continue\n"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10)\n    print(i)"}
{"faulty_code": "try:\n    file = open('nonexistentfile.txt', 'r')\nexcept FileNotFoundError as e:\n    print(f\"File not found: {e}\")", "fixed_code": "try:\n    file = open('nonexistentfile.txt', 'r')\nexcept FileNotFoundError as e:\n    print(f\"File not found: {e}\", file=sys.stderr)\nexcept Exception as e:\n    print(f\"An error occurred: {e}\", file=sys.stderr)"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "try:\n    f = open('nonexistent.txt', 'r')\nexcept FileNotFoundError:\n    print('File not found')", "fixed_code": "try:\n    if not os.path.exists('nonexistent.txt'):\n        raise FileNotFoundError\n    f = open('nonexistent.txt', 'r')\nexcept FileNotFoundError:\n    print('File not found')\nfinally:\n    try:\n        f.close()\n    except IOError:\n        pass"}
{"faulty_code": "for i in range(3):\n    for j in range(3):\n        print(i)\nprint(j)", "fixed_code": "for i in range(3):\n    for j in range(3):\n        print(i, end=' ')\n    print()\n\nfor i in range(3):\n    print(i)"}
{"faulty_code": "numbers = [1,2,3]\nsum = sum(numbers)\nprint(sum)", "fixed_code": "numbers = [1,2,3]\ntotal = sum(numbers)\nprint(total)"}
{"faulty_code": "def my_func(x, y=5):\n    return x + y\nmy_func('a', 'b')", "fixed_code": "def my_func(x, y=5)\n    return x + y\nmy_func('a', 'b')"}
{"faulty_code": "for i in range(10)\n    print(i)", "fixed_code": "for i in range(10, 15)\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n\n# This code runs from 0 to 9, but we want it to run from 1 to 10.", "fixed_code": "for i in range(11):\n    print(i)"}
{"faulty_code": "def my_function():\n    for i in range(5):\n        print(i)\n    print(\"Loop ended\")", "fixed_code": "def my_function():\n    for i in range(5):\n        print(i)"}
{"faulty_code": "for i in range(len(numbers)):\n    if numbers[i] > 5:\n        print('Found a number:', numbers[i])\n\n# Faulty code: Off-by-one error in the loop condition", "fixed_code": "for i in range(len(numbers)-1):\n    if numbers[i] > 5:\n        print('Found a number:', numbers[i])\n\n# Fixed code: Adjusted the loop to prevent index out of bounds"}
{"faulty_code": "for i in range(len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(10,20):\n    print(i)", "fixed_code": "for i in range(10,20):\n    print(i)"}
{"faulty_code": "def greet(name):\n    print('Hello, ' + name + '!')", "fixed_code": "def greet(name):\n    return f'Hello, {name}!'"}
{"faulty_code": "def greet(name):\n    return f\"Hello, {name}!\"", "fixed_code": "def greet(name):\n    if not name:\n        return 'Hello'\n    return f\"Hello, {name}!\""}
{"faulty_code": "for i in range(5):\n    print(i+1)\nprint('Loop ended')", "fixed_code": "for i in range(5):\n    print(i+1)\nprint('Loop ended', end=' ')"}
{"faulty_code": "for i in range(n-1):\n    print(i)", "fixed_code": "for i in range(n):\n    print(i)"}
{"faulty_code": "with open('file.txt', 'rb') as f:\n    f.read()\n", "fixed_code": "with open('file.txt', 'r') as f:\n    print(f.read())\n"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "a = [1,2,3]\nb = a[2]\nprint(b)", "fixed_code": "a = [1,2,3]\nb = a[0] if len(a)>=1 else None\nprint(b)"}
{"faulty_code": "for i in range(5):\n   print(i+1)", "fixed_code": "for i in range(5):\n   print(i)"}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": "for i in range(10):\n    print(i*2)\n\nprint('The loop ran',i)", "fixed_code": "for i in range(10):\n    print(i*2)\n\nprint('The loop ran', i)"}
{"faulty_code": "for i in range(len(list)):\n    list.append(i)", "fixed_code": "for i in range(len(list)):\n    list.append(i+1)"}
{"faulty_code": "for i in range(10):\n    print(i+1)", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "try:\n    a = 10\n    b = 20\n    print(a + b)\nexcept IndexError:\n    print('Index out of range')", "fixed_code": "try:\n    a = 10\n    b = 20\n    print(a + b)\nexcept IndexError as e:\n    print(f'Index error: {e}')\n"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "try:\n    x = int(input())\nexcept ValueError:\n    print('Please enter a valid number')", "fixed_code": "x = int(input())"}
{"faulty_code": "for i in range(5): print(i)", "fixed_code": "for i in range(5): print(i)"}
{"faulty_code": ["print('Hello, world!')", "for i in range(10): print(i)", "import re; re.findall(r'pattern', 'string')"], "fixed_code": ["print('Hello, world!')", "for i in range(5, 10): print(i)", "import re; re.findall(r'pattern.*', string, flags=re.IGNORECASE)"]}
{"faulty_code": "for i in range(10):\n    print(i+1)\nprint('Loop ended')", "fixed_code": "for i in range(10):\n    print(i+1)\nprint('Loop ended after 10 iterations')"}
{"faulty_code": "for i in range(1,5):\n    print(i)\n\nprint('Loop completed')", "fixed_code": "for i in range(1,5):\n    print(i)\n\nprint('Loop completed')\n"}
{"faulty_code": "for i in range(10):\n    print(i)", "fixed_code": "for i in range(10, 20):\n    print(i)"}
{"faulty_code": "for i in range(1,5):\n    print(i+1)", "fixed_code": "for i in range(1,5):\n    print(i)"}
{"faulty_code": "import random\n\ndef normal(mean, var):\n    return (random.gauss(mean, var))", "fixed_code": "import math\nimport random\n\ndef normal(mean, var):\n    return math.sqrt(var) * random.gauss(mean, var)"}
{"faulty_code": "try:\n    print(1/0)\nexcept ZeroDivisionError:\n    print('Denominator cannot be zero')", "fixed_code": "try:\n    print(1/0)\nexcept ZeroDivisionError as e:\n    print(f'Division by {e.value} is not allowed')\nexcept:\n    print('An unexpected error occurred')"}
{"faulty_code": "try:\n    print(1/(x-2))\nexcept ZeroDivisionError:\n    print('Divide by zero!')", "fixed_code": "try:\n    print(1/(x-2))\nexcept ZeroDivisionError as e:\n    print(f'Divide by zero: {e}')\n"}
{"faulty_code": "for i in range(10):\n    print(i)\n\nprint('Loop completed.')", "fixed_code": "for i in range(10):\n    print(i)\n\nprint('Loop completed.')"}
{"faulty_code": "lst = [1,2];\nprint(lst[2])", "fixed_code": "lst = [1,2];\nprint(lst[1])"}
{"faulty_code": "with open('file.txt', 'r') as f:\n    print(f.readline())", "fixed_code": "with open('file.txt', 'r') as f:\n    f.seek(0)\n    line = f.readline()\n    print(line)"}
{"faulty_code": "name = input('What's your name?')\nprint(name)", "fixed_code": "username = input('What's your username?')\nprint(username)"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for i in range(10):\n    print(i+1)\n# This loop prints numbers from 2 to 11 instead of 0 to 9.", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "for i in range(10):\n    print(i*2)\n\n# This loop runs from 0 to 9, which is correct. However, if the intention was to run from 1 to 10, this code is off-by-one.", "fixed_code": "for i in range(1, 11):\n    print(i*2)"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n", "fixed_code": "for i in range(5):\n    print(i+1)\n"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "a = [1,2,3]\na[0] # This will raise an IndexError: list index out of range\n", "fixed_code": "a = [1,2,3]\na[-1] # This returns the last element of the list, which is 3"}
{"faulty_code": "for i in range(1, len(list)):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "for x in range(10):\n    print(x)", "fixed_code": "for x in range(10)\n    print(x)"}
{"faulty_code": "my_list = [1, 2, 3]\nmy_list.extend([4,5])", "fixed_code": "my_list = [1, 2, 3]\nmy_list += [4,5]"}
{"faulty_code": "for i in range(len(list)):\n    if list[i] == target:\n        return list[i]\nelse:\n    return None", "fixed_code": "def find_element(lst, target):\n    try:\n        for i in range(len(lst))\n            if lst[i] == target\n                return lst[i]\n        return None\n    except IndexError:\n        return None"}
{"faulty_code": "try:\n    print('Hello')\nexcept ValueError as e:\n    print('Error: ', e)\nexcept Exception as e:\n    print('Unknown error:', e)", "fixed_code": "try:\n    print('Hello')\nexcept ValueError as e:\n    print(f'ValueError: {e}')\nexcept Exception as e:\n    print(f'Unknown error: {e}')", "faulty_code_2": "\nfor i in range(len(list)):\n    if list[i] == target:\n        break\nelse:\n    print('Element not found')", "fixed_code_2": "\nfor i in range(len(list)):\n    if list[i] == target:\n        break\nelse:\n    print('Element not found')\n", "faulty_code_3": "def process_file(filename):\n    with open(filename, 'r', encoding='utf-8') as f:\n        content = f.read()\n        # Redundant comments removed below\n        if content.startswith('---'):\n            print('---')\n        else:\n            print(content)\n        return content", "fixed_code_3": "def process_file(filename):\n    with open(filename, 'r', encoding='utf-8') as f:\n        content = f.read()\n        if content.startswith('---'):\n            print('---')\n        else:\n            print(content)\n        return content"}
{"faulty_code": "for i in range(10):\n    print(i)\n\nprint('Missing item')", "fixed_code": "for i in range(10):\n    print(i)\n\nprint('Missing item')\n\n# No, the loop is correct. The issue was with an incorrect comment."}
{"faulty_code": "for i in range(5):\n    print(i+1)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "for i in range(5)\n    print(i)", "fixed_code": "for i in range(5):\n    print(i)"}
{"faulty_code": "a = [1,2,3]\nb = a[0:2]\nprint(b[2:])", "fixed_code": "a = [1,2,3]\nb = a[:2]\nprint(b[2:])"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(5)\n    print(i)"}
{"faulty_code": "for i in range(5):\n    print(i)", "fixed_code": "for i in range(6):\n    print(i)"}
{"faulty_code": "s = \"test string\"\nif s.count(\"x\") > 0:\n    print(\"found\")", "fixed_code": "s = \"test string\"\nif 'x' in s:\n    print(\"found\")"}
{"faulty_code": "for i in range(5):\n    print(i+1)\n", "fixed_code": "for i in range(5):\n    print(i+2)\n"}
{"faulty_code": "for i in range(len(list)-1):\n    print(list[i])", "fixed_code": "for i in range(len(list)):\n    print(list[i])"}
{"faulty_code": "import socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind(('localhost', 8000))\ns.listen(1)\nprint('Server is listening on port 8000')", "fixed_code": "import socket\ns = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\ns.bind(('localhost', 8000))\ns.listen(1)\nprint('Server is listening on port 8000')\ns.accept() # Added accept() to block until a client connects\n# The faulty code does not accept incoming connections."}
{"faulty_code": "for i in range(10):\n    print(i+1)\n", "fixed_code": "for i in range(10):\n    print(i)"}
{"faulty_code": "a = [1,2]; print(a[3])", "fixed_code": "a = [1,2]; print(a[3] if len(a)>3 else '')"}
{"faulty_code": "for i in range(10): print(i)", "fixed_code": "for i in range(10): print(i)"}
{"faulty_code": "print('Hello, world!')", "fixed_code": "print(\"Hello, world!\")"}
{"faulty_code": "with open('nonexistent.txt', 'r') as f:\n    print(f.read())", "fixed_code": "try:\n    with open('nonexistent.txt', 'r') as f:\n        print(f.read())\nexcept FileNotFoundError as e:\n    print(f'File {e.args[0]} not found')\n"}
{"faulty_code": "for i in range(5):\n    if i < 4:\n        print(i)", "fixed_code": "for i in range(6):\n    if i < 5:\n        print(i)"}
{"faulty_code": "import os\nos.path.join('folder', 'nonexistentfile.txt')", "fixed_code": "import os; try: os.path.join('folder', 'nonexistentfile.txt'); except FileNotFoundError: pass"}
{"faulty_code": "numbers = [1,2,3]\nsum(numbers[0] + numbers[1] + numbers[2])", "fixed_code": "sum(numbers[:2])"}
